// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_5fmsg_2eproto;
namespace login_msg {
class GameAccountInfo;
class GameAccountInfoDefaultTypeInternal;
extern GameAccountInfoDefaultTypeInternal _GameAccountInfo_default_instance_;
class GameAccountList;
class GameAccountListDefaultTypeInternal;
extern GameAccountListDefaultTypeInternal _GameAccountList_default_instance_;
class MSG_REQUEST_ACCOUNT_LOGIN_L;
class MSG_REQUEST_ACCOUNT_LOGIN_LDefaultTypeInternal;
extern MSG_REQUEST_ACCOUNT_LOGIN_LDefaultTypeInternal _MSG_REQUEST_ACCOUNT_LOGIN_L_default_instance_;
class MSG_REQUEST_CLIENT_LOGIN;
class MSG_REQUEST_CLIENT_LOGINDefaultTypeInternal;
extern MSG_REQUEST_CLIENT_LOGINDefaultTypeInternal _MSG_REQUEST_CLIENT_LOGIN_default_instance_;
class MSG_REQUEST_ECHO;
class MSG_REQUEST_ECHODefaultTypeInternal;
extern MSG_REQUEST_ECHODefaultTypeInternal _MSG_REQUEST_ECHO_default_instance_;
class MSG_REQUEST_HANDSHAKE_ESTABLISHED;
class MSG_REQUEST_HANDSHAKE_ESTABLISHEDDefaultTypeInternal;
extern MSG_REQUEST_HANDSHAKE_ESTABLISHEDDefaultTypeInternal _MSG_REQUEST_HANDSHAKE_ESTABLISHED_default_instance_;
class MSG_REQUEST_HANDSHAKE_INIT;
class MSG_REQUEST_HANDSHAKE_INITDefaultTypeInternal;
extern MSG_REQUEST_HANDSHAKE_INITDefaultTypeInternal _MSG_REQUEST_HANDSHAKE_INIT_default_instance_;
class MSG_RESPONSE_ACCOUNT_LOGIN_L;
class MSG_RESPONSE_ACCOUNT_LOGIN_LDefaultTypeInternal;
extern MSG_RESPONSE_ACCOUNT_LOGIN_LDefaultTypeInternal _MSG_RESPONSE_ACCOUNT_LOGIN_L_default_instance_;
class MSG_RESPONSE_CLIENT_LOGIN;
class MSG_RESPONSE_CLIENT_LOGINDefaultTypeInternal;
extern MSG_RESPONSE_CLIENT_LOGINDefaultTypeInternal _MSG_RESPONSE_CLIENT_LOGIN_default_instance_;
class MSG_RESPONSE_ECHO;
class MSG_RESPONSE_ECHODefaultTypeInternal;
extern MSG_RESPONSE_ECHODefaultTypeInternal _MSG_RESPONSE_ECHO_default_instance_;
class MSG_RESPONSE_HANDSHAKE_ESTABLISHED;
class MSG_RESPONSE_HANDSHAKE_ESTABLISHEDDefaultTypeInternal;
extern MSG_RESPONSE_HANDSHAKE_ESTABLISHEDDefaultTypeInternal _MSG_RESPONSE_HANDSHAKE_ESTABLISHED_default_instance_;
class MSG_RESPONSE_HANDSHAKE_INIT;
class MSG_RESPONSE_HANDSHAKE_INITDefaultTypeInternal;
extern MSG_RESPONSE_HANDSHAKE_INITDefaultTypeInternal _MSG_RESPONSE_HANDSHAKE_INIT_default_instance_;
}  // namespace login_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::login_msg::GameAccountInfo* Arena::CreateMaybeMessage<::login_msg::GameAccountInfo>(Arena*);
template<> ::login_msg::GameAccountList* Arena::CreateMaybeMessage<::login_msg::GameAccountList>(Arena*);
template<> ::login_msg::MSG_REQUEST_ACCOUNT_LOGIN_L* Arena::CreateMaybeMessage<::login_msg::MSG_REQUEST_ACCOUNT_LOGIN_L>(Arena*);
template<> ::login_msg::MSG_REQUEST_CLIENT_LOGIN* Arena::CreateMaybeMessage<::login_msg::MSG_REQUEST_CLIENT_LOGIN>(Arena*);
template<> ::login_msg::MSG_REQUEST_ECHO* Arena::CreateMaybeMessage<::login_msg::MSG_REQUEST_ECHO>(Arena*);
template<> ::login_msg::MSG_REQUEST_HANDSHAKE_ESTABLISHED* Arena::CreateMaybeMessage<::login_msg::MSG_REQUEST_HANDSHAKE_ESTABLISHED>(Arena*);
template<> ::login_msg::MSG_REQUEST_HANDSHAKE_INIT* Arena::CreateMaybeMessage<::login_msg::MSG_REQUEST_HANDSHAKE_INIT>(Arena*);
template<> ::login_msg::MSG_RESPONSE_ACCOUNT_LOGIN_L* Arena::CreateMaybeMessage<::login_msg::MSG_RESPONSE_ACCOUNT_LOGIN_L>(Arena*);
template<> ::login_msg::MSG_RESPONSE_CLIENT_LOGIN* Arena::CreateMaybeMessage<::login_msg::MSG_RESPONSE_CLIENT_LOGIN>(Arena*);
template<> ::login_msg::MSG_RESPONSE_ECHO* Arena::CreateMaybeMessage<::login_msg::MSG_RESPONSE_ECHO>(Arena*);
template<> ::login_msg::MSG_RESPONSE_HANDSHAKE_ESTABLISHED* Arena::CreateMaybeMessage<::login_msg::MSG_RESPONSE_HANDSHAKE_ESTABLISHED>(Arena*);
template<> ::login_msg::MSG_RESPONSE_HANDSHAKE_INIT* Arena::CreateMaybeMessage<::login_msg::MSG_RESPONSE_HANDSHAKE_INIT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace login_msg {

// ===================================================================

class GameAccountInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.GameAccountInfo) */ {
 public:
  GameAccountInfo();
  virtual ~GameAccountInfo();

  GameAccountInfo(const GameAccountInfo& from);
  GameAccountInfo(GameAccountInfo&& from) noexcept
    : GameAccountInfo() {
    *this = ::std::move(from);
  }

  inline GameAccountInfo& operator=(const GameAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountInfo& operator=(GameAccountInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountInfo* internal_default_instance() {
    return reinterpret_cast<const GameAccountInfo*>(
               &_GameAccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameAccountInfo& a, GameAccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountInfo* New() const final {
    return CreateMaybeMessage<GameAccountInfo>(nullptr);
  }

  GameAccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountInfo& from);
  void MergeFrom(const GameAccountInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.GameAccountInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 2,
    kSuspensionReasonFieldNumber = 6,
    kAccountIdFieldNumber = 1,
    kSuspensionExpiresFieldNumber = 5,
    kIsSuspendedFieldNumber = 3,
    kIsBannedFieldNumber = 4,
  };
  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string suspension_reason = 6;
  void clear_suspension_reason();
  const std::string& suspension_reason() const;
  void set_suspension_reason(const std::string& value);
  void set_suspension_reason(std::string&& value);
  void set_suspension_reason(const char* value);
  void set_suspension_reason(const char* value, size_t size);
  std::string* mutable_suspension_reason();
  std::string* release_suspension_reason();
  void set_allocated_suspension_reason(std::string* suspension_reason);
  private:
  const std::string& _internal_suspension_reason() const;
  void _internal_set_suspension_reason(const std::string& value);
  std::string* _internal_mutable_suspension_reason();
  public:

  // uint64 account_id = 1;
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 suspension_expires = 5;
  void clear_suspension_expires();
  ::PROTOBUF_NAMESPACE_ID::uint64 suspension_expires() const;
  void set_suspension_expires(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_suspension_expires() const;
  void _internal_set_suspension_expires(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_suspended = 3;
  void clear_is_suspended();
  bool is_suspended() const;
  void set_is_suspended(bool value);
  private:
  bool _internal_is_suspended() const;
  void _internal_set_is_suspended(bool value);
  public:

  // bool is_banned = 4;
  void clear_is_banned();
  bool is_banned() const;
  void set_is_banned(bool value);
  private:
  bool _internal_is_banned() const;
  void _internal_set_is_banned(bool value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.GameAccountInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suspension_reason_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 suspension_expires_;
  bool is_suspended_;
  bool is_banned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class GameAccountList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.GameAccountList) */ {
 public:
  GameAccountList();
  virtual ~GameAccountList();

  GameAccountList(const GameAccountList& from);
  GameAccountList(GameAccountList&& from) noexcept
    : GameAccountList() {
    *this = ::std::move(from);
  }

  inline GameAccountList& operator=(const GameAccountList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountList& operator=(GameAccountList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountList* internal_default_instance() {
    return reinterpret_cast<const GameAccountList*>(
               &_GameAccountList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameAccountList& a, GameAccountList& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountList* New() const final {
    return CreateMaybeMessage<GameAccountList>(nullptr);
  }

  GameAccountList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountList& from);
  void MergeFrom(const GameAccountList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.GameAccountList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameAccountsFieldNumber = 1,
  };
  // repeated .login_msg.GameAccountInfo game_accounts = 1;
  int game_accounts_size() const;
  private:
  int _internal_game_accounts_size() const;
  public:
  void clear_game_accounts();
  ::login_msg::GameAccountInfo* mutable_game_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login_msg::GameAccountInfo >*
      mutable_game_accounts();
  private:
  const ::login_msg::GameAccountInfo& _internal_game_accounts(int index) const;
  ::login_msg::GameAccountInfo* _internal_add_game_accounts();
  public:
  const ::login_msg::GameAccountInfo& game_accounts(int index) const;
  ::login_msg::GameAccountInfo* add_game_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login_msg::GameAccountInfo >&
      game_accounts() const;

  // @@protoc_insertion_point(class_scope:login_msg.GameAccountList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login_msg::GameAccountInfo > game_accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_REQUEST_ACCOUNT_LOGIN_L :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L) */ {
 public:
  MSG_REQUEST_ACCOUNT_LOGIN_L();
  virtual ~MSG_REQUEST_ACCOUNT_LOGIN_L();

  MSG_REQUEST_ACCOUNT_LOGIN_L(const MSG_REQUEST_ACCOUNT_LOGIN_L& from);
  MSG_REQUEST_ACCOUNT_LOGIN_L(MSG_REQUEST_ACCOUNT_LOGIN_L&& from) noexcept
    : MSG_REQUEST_ACCOUNT_LOGIN_L() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_ACCOUNT_LOGIN_L& operator=(const MSG_REQUEST_ACCOUNT_LOGIN_L& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_ACCOUNT_LOGIN_L& operator=(MSG_REQUEST_ACCOUNT_LOGIN_L&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_REQUEST_ACCOUNT_LOGIN_L& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_REQUEST_ACCOUNT_LOGIN_L* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_ACCOUNT_LOGIN_L*>(
               &_MSG_REQUEST_ACCOUNT_LOGIN_L_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_REQUEST_ACCOUNT_LOGIN_L& a, MSG_REQUEST_ACCOUNT_LOGIN_L& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_ACCOUNT_LOGIN_L* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_REQUEST_ACCOUNT_LOGIN_L* New() const final {
    return CreateMaybeMessage<MSG_REQUEST_ACCOUNT_LOGIN_L>(nullptr);
  }

  MSG_REQUEST_ACCOUNT_LOGIN_L* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_REQUEST_ACCOUNT_LOGIN_L>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_REQUEST_ACCOUNT_LOGIN_L& from);
  void MergeFrom(const MSG_REQUEST_ACCOUNT_LOGIN_L& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_REQUEST_ACCOUNT_LOGIN_L* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformIdFieldNumber = 1,
    kProgramIdFieldNumber = 2,
    kAuthFieldNumber = 5,
    kAccountIdFieldNumber = 4,
    kVersionFieldNumber = 3,
  };
  // string platform_id = 1;
  void clear_platform_id();
  const std::string& platform_id() const;
  void set_platform_id(const std::string& value);
  void set_platform_id(std::string&& value);
  void set_platform_id(const char* value);
  void set_platform_id(const char* value, size_t size);
  std::string* mutable_platform_id();
  std::string* release_platform_id();
  void set_allocated_platform_id(std::string* platform_id);
  private:
  const std::string& _internal_platform_id() const;
  void _internal_set_platform_id(const std::string& value);
  std::string* _internal_mutable_platform_id();
  public:

  // string program_id = 2;
  void clear_program_id();
  const std::string& program_id() const;
  void set_program_id(const std::string& value);
  void set_program_id(std::string&& value);
  void set_program_id(const char* value);
  void set_program_id(const char* value, size_t size);
  std::string* mutable_program_id();
  std::string* release_program_id();
  void set_allocated_program_id(std::string* program_id);
  private:
  const std::string& _internal_program_id() const;
  void _internal_set_program_id(const std::string& value);
  std::string* _internal_mutable_program_id();
  public:

  // string auth = 5;
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // uint64 account_id = 4;
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESPONSE_ACCOUNT_LOGIN_L :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L) */ {
 public:
  MSG_RESPONSE_ACCOUNT_LOGIN_L();
  virtual ~MSG_RESPONSE_ACCOUNT_LOGIN_L();

  MSG_RESPONSE_ACCOUNT_LOGIN_L(const MSG_RESPONSE_ACCOUNT_LOGIN_L& from);
  MSG_RESPONSE_ACCOUNT_LOGIN_L(MSG_RESPONSE_ACCOUNT_LOGIN_L&& from) noexcept
    : MSG_RESPONSE_ACCOUNT_LOGIN_L() {
    *this = ::std::move(from);
  }

  inline MSG_RESPONSE_ACCOUNT_LOGIN_L& operator=(const MSG_RESPONSE_ACCOUNT_LOGIN_L& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESPONSE_ACCOUNT_LOGIN_L& operator=(MSG_RESPONSE_ACCOUNT_LOGIN_L&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RESPONSE_ACCOUNT_LOGIN_L& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RESPONSE_ACCOUNT_LOGIN_L* internal_default_instance() {
    return reinterpret_cast<const MSG_RESPONSE_ACCOUNT_LOGIN_L*>(
               &_MSG_RESPONSE_ACCOUNT_LOGIN_L_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_RESPONSE_ACCOUNT_LOGIN_L& a, MSG_RESPONSE_ACCOUNT_LOGIN_L& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESPONSE_ACCOUNT_LOGIN_L* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RESPONSE_ACCOUNT_LOGIN_L* New() const final {
    return CreateMaybeMessage<MSG_RESPONSE_ACCOUNT_LOGIN_L>(nullptr);
  }

  MSG_RESPONSE_ACCOUNT_LOGIN_L* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RESPONSE_ACCOUNT_LOGIN_L>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RESPONSE_ACCOUNT_LOGIN_L& from);
  void MergeFrom(const MSG_RESPONSE_ACCOUNT_LOGIN_L& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESPONSE_ACCOUNT_LOGIN_L* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 3,
    kIpFieldNumber = 4,
    kAccountIdFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
    kPortFieldNumber = 5,
  };
  // string session_key = 3;
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const char* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // string ip = 4;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint64 account_id = 2;
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 5;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_REQUEST_HANDSHAKE_INIT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_REQUEST_HANDSHAKE_INIT) */ {
 public:
  MSG_REQUEST_HANDSHAKE_INIT();
  virtual ~MSG_REQUEST_HANDSHAKE_INIT();

  MSG_REQUEST_HANDSHAKE_INIT(const MSG_REQUEST_HANDSHAKE_INIT& from);
  MSG_REQUEST_HANDSHAKE_INIT(MSG_REQUEST_HANDSHAKE_INIT&& from) noexcept
    : MSG_REQUEST_HANDSHAKE_INIT() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_HANDSHAKE_INIT& operator=(const MSG_REQUEST_HANDSHAKE_INIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_HANDSHAKE_INIT& operator=(MSG_REQUEST_HANDSHAKE_INIT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_REQUEST_HANDSHAKE_INIT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_REQUEST_HANDSHAKE_INIT* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_HANDSHAKE_INIT*>(
               &_MSG_REQUEST_HANDSHAKE_INIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_REQUEST_HANDSHAKE_INIT& a, MSG_REQUEST_HANDSHAKE_INIT& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_HANDSHAKE_INIT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_REQUEST_HANDSHAKE_INIT* New() const final {
    return CreateMaybeMessage<MSG_REQUEST_HANDSHAKE_INIT>(nullptr);
  }

  MSG_REQUEST_HANDSHAKE_INIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_REQUEST_HANDSHAKE_INIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_REQUEST_HANDSHAKE_INIT& from);
  void MergeFrom(const MSG_REQUEST_HANDSHAKE_INIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_REQUEST_HANDSHAKE_INIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_REQUEST_HANDSHAKE_INIT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientRandomFieldNumber = 1,
  };
  // string client_random = 1;
  void clear_client_random();
  const std::string& client_random() const;
  void set_client_random(const std::string& value);
  void set_client_random(std::string&& value);
  void set_client_random(const char* value);
  void set_client_random(const char* value, size_t size);
  std::string* mutable_client_random();
  std::string* release_client_random();
  void set_allocated_client_random(std::string* client_random);
  private:
  const std::string& _internal_client_random() const;
  void _internal_set_client_random(const std::string& value);
  std::string* _internal_mutable_client_random();
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_REQUEST_HANDSHAKE_INIT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_random_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESPONSE_HANDSHAKE_INIT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_RESPONSE_HANDSHAKE_INIT) */ {
 public:
  MSG_RESPONSE_HANDSHAKE_INIT();
  virtual ~MSG_RESPONSE_HANDSHAKE_INIT();

  MSG_RESPONSE_HANDSHAKE_INIT(const MSG_RESPONSE_HANDSHAKE_INIT& from);
  MSG_RESPONSE_HANDSHAKE_INIT(MSG_RESPONSE_HANDSHAKE_INIT&& from) noexcept
    : MSG_RESPONSE_HANDSHAKE_INIT() {
    *this = ::std::move(from);
  }

  inline MSG_RESPONSE_HANDSHAKE_INIT& operator=(const MSG_RESPONSE_HANDSHAKE_INIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESPONSE_HANDSHAKE_INIT& operator=(MSG_RESPONSE_HANDSHAKE_INIT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RESPONSE_HANDSHAKE_INIT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RESPONSE_HANDSHAKE_INIT* internal_default_instance() {
    return reinterpret_cast<const MSG_RESPONSE_HANDSHAKE_INIT*>(
               &_MSG_RESPONSE_HANDSHAKE_INIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_RESPONSE_HANDSHAKE_INIT& a, MSG_RESPONSE_HANDSHAKE_INIT& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESPONSE_HANDSHAKE_INIT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RESPONSE_HANDSHAKE_INIT* New() const final {
    return CreateMaybeMessage<MSG_RESPONSE_HANDSHAKE_INIT>(nullptr);
  }

  MSG_RESPONSE_HANDSHAKE_INIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RESPONSE_HANDSHAKE_INIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RESPONSE_HANDSHAKE_INIT& from);
  void MergeFrom(const MSG_RESPONSE_HANDSHAKE_INIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESPONSE_HANDSHAKE_INIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_RESPONSE_HANDSHAKE_INIT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerRandomFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
    kStatusCodeFieldNumber = 1,
  };
  // string server_random = 2;
  void clear_server_random();
  const std::string& server_random() const;
  void set_server_random(const std::string& value);
  void set_server_random(std::string&& value);
  void set_server_random(const char* value);
  void set_server_random(const char* value, size_t size);
  std::string* mutable_server_random();
  std::string* release_server_random();
  void set_allocated_server_random(std::string* server_random);
  private:
  const std::string& _internal_server_random() const;
  void _internal_set_server_random(const std::string& value);
  std::string* _internal_mutable_server_random();
  public:

  // string public_key = 3;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // int32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_RESPONSE_HANDSHAKE_INIT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_random_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_REQUEST_HANDSHAKE_ESTABLISHED :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED) */ {
 public:
  MSG_REQUEST_HANDSHAKE_ESTABLISHED();
  virtual ~MSG_REQUEST_HANDSHAKE_ESTABLISHED();

  MSG_REQUEST_HANDSHAKE_ESTABLISHED(const MSG_REQUEST_HANDSHAKE_ESTABLISHED& from);
  MSG_REQUEST_HANDSHAKE_ESTABLISHED(MSG_REQUEST_HANDSHAKE_ESTABLISHED&& from) noexcept
    : MSG_REQUEST_HANDSHAKE_ESTABLISHED() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_HANDSHAKE_ESTABLISHED& operator=(const MSG_REQUEST_HANDSHAKE_ESTABLISHED& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_HANDSHAKE_ESTABLISHED& operator=(MSG_REQUEST_HANDSHAKE_ESTABLISHED&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_REQUEST_HANDSHAKE_ESTABLISHED& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_REQUEST_HANDSHAKE_ESTABLISHED* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_HANDSHAKE_ESTABLISHED*>(
               &_MSG_REQUEST_HANDSHAKE_ESTABLISHED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_REQUEST_HANDSHAKE_ESTABLISHED& a, MSG_REQUEST_HANDSHAKE_ESTABLISHED& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_HANDSHAKE_ESTABLISHED* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_REQUEST_HANDSHAKE_ESTABLISHED* New() const final {
    return CreateMaybeMessage<MSG_REQUEST_HANDSHAKE_ESTABLISHED>(nullptr);
  }

  MSG_REQUEST_HANDSHAKE_ESTABLISHED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_REQUEST_HANDSHAKE_ESTABLISHED>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_REQUEST_HANDSHAKE_ESTABLISHED& from);
  void MergeFrom(const MSG_REQUEST_HANDSHAKE_ESTABLISHED& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_REQUEST_HANDSHAKE_ESTABLISHED* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedKeyFieldNumber = 1,
  };
  // bytes encrypted_key = 1;
  void clear_encrypted_key();
  const std::string& encrypted_key() const;
  void set_encrypted_key(const std::string& value);
  void set_encrypted_key(std::string&& value);
  void set_encrypted_key(const char* value);
  void set_encrypted_key(const void* value, size_t size);
  std::string* mutable_encrypted_key();
  std::string* release_encrypted_key();
  void set_allocated_encrypted_key(std::string* encrypted_key);
  private:
  const std::string& _internal_encrypted_key() const;
  void _internal_set_encrypted_key(const std::string& value);
  std::string* _internal_mutable_encrypted_key();
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESPONSE_HANDSHAKE_ESTABLISHED :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_RESPONSE_HANDSHAKE_ESTABLISHED) */ {
 public:
  MSG_RESPONSE_HANDSHAKE_ESTABLISHED();
  virtual ~MSG_RESPONSE_HANDSHAKE_ESTABLISHED();

  MSG_RESPONSE_HANDSHAKE_ESTABLISHED(const MSG_RESPONSE_HANDSHAKE_ESTABLISHED& from);
  MSG_RESPONSE_HANDSHAKE_ESTABLISHED(MSG_RESPONSE_HANDSHAKE_ESTABLISHED&& from) noexcept
    : MSG_RESPONSE_HANDSHAKE_ESTABLISHED() {
    *this = ::std::move(from);
  }

  inline MSG_RESPONSE_HANDSHAKE_ESTABLISHED& operator=(const MSG_RESPONSE_HANDSHAKE_ESTABLISHED& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESPONSE_HANDSHAKE_ESTABLISHED& operator=(MSG_RESPONSE_HANDSHAKE_ESTABLISHED&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RESPONSE_HANDSHAKE_ESTABLISHED& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RESPONSE_HANDSHAKE_ESTABLISHED* internal_default_instance() {
    return reinterpret_cast<const MSG_RESPONSE_HANDSHAKE_ESTABLISHED*>(
               &_MSG_RESPONSE_HANDSHAKE_ESTABLISHED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_RESPONSE_HANDSHAKE_ESTABLISHED& a, MSG_RESPONSE_HANDSHAKE_ESTABLISHED& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESPONSE_HANDSHAKE_ESTABLISHED* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RESPONSE_HANDSHAKE_ESTABLISHED* New() const final {
    return CreateMaybeMessage<MSG_RESPONSE_HANDSHAKE_ESTABLISHED>(nullptr);
  }

  MSG_RESPONSE_HANDSHAKE_ESTABLISHED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RESPONSE_HANDSHAKE_ESTABLISHED>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RESPONSE_HANDSHAKE_ESTABLISHED& from);
  void MergeFrom(const MSG_RESPONSE_HANDSHAKE_ESTABLISHED& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESPONSE_HANDSHAKE_ESTABLISHED* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_RESPONSE_HANDSHAKE_ESTABLISHED";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // int32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_RESPONSE_HANDSHAKE_ESTABLISHED)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_REQUEST_CLIENT_LOGIN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_REQUEST_CLIENT_LOGIN) */ {
 public:
  MSG_REQUEST_CLIENT_LOGIN();
  virtual ~MSG_REQUEST_CLIENT_LOGIN();

  MSG_REQUEST_CLIENT_LOGIN(const MSG_REQUEST_CLIENT_LOGIN& from);
  MSG_REQUEST_CLIENT_LOGIN(MSG_REQUEST_CLIENT_LOGIN&& from) noexcept
    : MSG_REQUEST_CLIENT_LOGIN() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_CLIENT_LOGIN& operator=(const MSG_REQUEST_CLIENT_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_CLIENT_LOGIN& operator=(MSG_REQUEST_CLIENT_LOGIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_REQUEST_CLIENT_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_REQUEST_CLIENT_LOGIN* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_CLIENT_LOGIN*>(
               &_MSG_REQUEST_CLIENT_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MSG_REQUEST_CLIENT_LOGIN& a, MSG_REQUEST_CLIENT_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_CLIENT_LOGIN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_REQUEST_CLIENT_LOGIN* New() const final {
    return CreateMaybeMessage<MSG_REQUEST_CLIENT_LOGIN>(nullptr);
  }

  MSG_REQUEST_CLIENT_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_REQUEST_CLIENT_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_REQUEST_CLIENT_LOGIN& from);
  void MergeFrom(const MSG_REQUEST_CLIENT_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_REQUEST_CLIENT_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_REQUEST_CLIENT_LOGIN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // string session_key = 2;
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const char* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_REQUEST_CLIENT_LOGIN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESPONSE_CLIENT_LOGIN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_RESPONSE_CLIENT_LOGIN) */ {
 public:
  MSG_RESPONSE_CLIENT_LOGIN();
  virtual ~MSG_RESPONSE_CLIENT_LOGIN();

  MSG_RESPONSE_CLIENT_LOGIN(const MSG_RESPONSE_CLIENT_LOGIN& from);
  MSG_RESPONSE_CLIENT_LOGIN(MSG_RESPONSE_CLIENT_LOGIN&& from) noexcept
    : MSG_RESPONSE_CLIENT_LOGIN() {
    *this = ::std::move(from);
  }

  inline MSG_RESPONSE_CLIENT_LOGIN& operator=(const MSG_RESPONSE_CLIENT_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESPONSE_CLIENT_LOGIN& operator=(MSG_RESPONSE_CLIENT_LOGIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RESPONSE_CLIENT_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RESPONSE_CLIENT_LOGIN* internal_default_instance() {
    return reinterpret_cast<const MSG_RESPONSE_CLIENT_LOGIN*>(
               &_MSG_RESPONSE_CLIENT_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_RESPONSE_CLIENT_LOGIN& a, MSG_RESPONSE_CLIENT_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESPONSE_CLIENT_LOGIN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RESPONSE_CLIENT_LOGIN* New() const final {
    return CreateMaybeMessage<MSG_RESPONSE_CLIENT_LOGIN>(nullptr);
  }

  MSG_RESPONSE_CLIENT_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RESPONSE_CLIENT_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RESPONSE_CLIENT_LOGIN& from);
  void MergeFrom(const MSG_RESPONSE_CLIENT_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESPONSE_CLIENT_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_RESPONSE_CLIENT_LOGIN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
    kVersionFieldNumber = 3,
    kIsNewbieFieldNumber = 4,
  };
  // uint64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_newbie = 4;
  void clear_is_newbie();
  bool is_newbie() const;
  void set_is_newbie(bool value);
  private:
  bool _internal_is_newbie() const;
  void _internal_set_is_newbie(bool value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  bool is_newbie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_REQUEST_ECHO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_REQUEST_ECHO) */ {
 public:
  MSG_REQUEST_ECHO();
  virtual ~MSG_REQUEST_ECHO();

  MSG_REQUEST_ECHO(const MSG_REQUEST_ECHO& from);
  MSG_REQUEST_ECHO(MSG_REQUEST_ECHO&& from) noexcept
    : MSG_REQUEST_ECHO() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_ECHO& operator=(const MSG_REQUEST_ECHO& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_ECHO& operator=(MSG_REQUEST_ECHO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_REQUEST_ECHO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_REQUEST_ECHO* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_ECHO*>(
               &_MSG_REQUEST_ECHO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_REQUEST_ECHO& a, MSG_REQUEST_ECHO& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_ECHO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_REQUEST_ECHO* New() const final {
    return CreateMaybeMessage<MSG_REQUEST_ECHO>(nullptr);
  }

  MSG_REQUEST_ECHO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_REQUEST_ECHO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_REQUEST_ECHO& from);
  void MergeFrom(const MSG_REQUEST_ECHO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_REQUEST_ECHO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_REQUEST_ECHO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValue2FieldNumber = 2,
    kValue1FieldNumber = 1,
  };
  // string value2 = 2;
  void clear_value2();
  const std::string& value2() const;
  void set_value2(const std::string& value);
  void set_value2(std::string&& value);
  void set_value2(const char* value);
  void set_value2(const char* value, size_t size);
  std::string* mutable_value2();
  std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // uint64 value1 = 1;
  void clear_value1();
  ::PROTOBUF_NAMESPACE_ID::uint64 value1() const;
  void set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value1() const;
  void _internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_REQUEST_ECHO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESPONSE_ECHO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_RESPONSE_ECHO) */ {
 public:
  MSG_RESPONSE_ECHO();
  virtual ~MSG_RESPONSE_ECHO();

  MSG_RESPONSE_ECHO(const MSG_RESPONSE_ECHO& from);
  MSG_RESPONSE_ECHO(MSG_RESPONSE_ECHO&& from) noexcept
    : MSG_RESPONSE_ECHO() {
    *this = ::std::move(from);
  }

  inline MSG_RESPONSE_ECHO& operator=(const MSG_RESPONSE_ECHO& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESPONSE_ECHO& operator=(MSG_RESPONSE_ECHO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RESPONSE_ECHO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RESPONSE_ECHO* internal_default_instance() {
    return reinterpret_cast<const MSG_RESPONSE_ECHO*>(
               &_MSG_RESPONSE_ECHO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MSG_RESPONSE_ECHO& a, MSG_RESPONSE_ECHO& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESPONSE_ECHO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RESPONSE_ECHO* New() const final {
    return CreateMaybeMessage<MSG_RESPONSE_ECHO>(nullptr);
  }

  MSG_RESPONSE_ECHO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RESPONSE_ECHO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RESPONSE_ECHO& from);
  void MergeFrom(const MSG_RESPONSE_ECHO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESPONSE_ECHO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_RESPONSE_ECHO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValue2FieldNumber = 2,
    kValue1FieldNumber = 1,
  };
  // string value2 = 2;
  void clear_value2();
  const std::string& value2() const;
  void set_value2(const std::string& value);
  void set_value2(std::string&& value);
  void set_value2(const char* value);
  void set_value2(const char* value, size_t size);
  std::string* mutable_value2();
  std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // uint64 value1 = 1;
  void clear_value1();
  ::PROTOBUF_NAMESPACE_ID::uint64 value1() const;
  void set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value1() const;
  void _internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_RESPONSE_ECHO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameAccountInfo

// uint64 account_id = 1;
inline void GameAccountInfo::clear_account_id() {
  account_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameAccountInfo::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameAccountInfo::account_id() const {
  // @@protoc_insertion_point(field_get:login_msg.GameAccountInfo.account_id)
  return _internal_account_id();
}
inline void GameAccountInfo::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_id_ = value;
}
inline void GameAccountInfo::set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:login_msg.GameAccountInfo.account_id)
}

// string display_name = 2;
inline void GameAccountInfo::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameAccountInfo::display_name() const {
  // @@protoc_insertion_point(field_get:login_msg.GameAccountInfo.display_name)
  return _internal_display_name();
}
inline void GameAccountInfo::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:login_msg.GameAccountInfo.display_name)
}
inline std::string* GameAccountInfo::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:login_msg.GameAccountInfo.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& GameAccountInfo::_internal_display_name() const {
  return display_name_.GetNoArena();
}
inline void GameAccountInfo::_internal_set_display_name(const std::string& value) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameAccountInfo::set_display_name(std::string&& value) {
  
  display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.GameAccountInfo.display_name)
}
inline void GameAccountInfo::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.GameAccountInfo.display_name)
}
inline void GameAccountInfo::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.GameAccountInfo.display_name)
}
inline std::string* GameAccountInfo::_internal_mutable_display_name() {
  
  return display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameAccountInfo::release_display_name() {
  // @@protoc_insertion_point(field_release:login_msg.GameAccountInfo.display_name)
  
  return display_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameAccountInfo::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:login_msg.GameAccountInfo.display_name)
}

// bool is_suspended = 3;
inline void GameAccountInfo::clear_is_suspended() {
  is_suspended_ = false;
}
inline bool GameAccountInfo::_internal_is_suspended() const {
  return is_suspended_;
}
inline bool GameAccountInfo::is_suspended() const {
  // @@protoc_insertion_point(field_get:login_msg.GameAccountInfo.is_suspended)
  return _internal_is_suspended();
}
inline void GameAccountInfo::_internal_set_is_suspended(bool value) {
  
  is_suspended_ = value;
}
inline void GameAccountInfo::set_is_suspended(bool value) {
  _internal_set_is_suspended(value);
  // @@protoc_insertion_point(field_set:login_msg.GameAccountInfo.is_suspended)
}

// bool is_banned = 4;
inline void GameAccountInfo::clear_is_banned() {
  is_banned_ = false;
}
inline bool GameAccountInfo::_internal_is_banned() const {
  return is_banned_;
}
inline bool GameAccountInfo::is_banned() const {
  // @@protoc_insertion_point(field_get:login_msg.GameAccountInfo.is_banned)
  return _internal_is_banned();
}
inline void GameAccountInfo::_internal_set_is_banned(bool value) {
  
  is_banned_ = value;
}
inline void GameAccountInfo::set_is_banned(bool value) {
  _internal_set_is_banned(value);
  // @@protoc_insertion_point(field_set:login_msg.GameAccountInfo.is_banned)
}

// uint64 suspension_expires = 5;
inline void GameAccountInfo::clear_suspension_expires() {
  suspension_expires_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameAccountInfo::_internal_suspension_expires() const {
  return suspension_expires_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameAccountInfo::suspension_expires() const {
  // @@protoc_insertion_point(field_get:login_msg.GameAccountInfo.suspension_expires)
  return _internal_suspension_expires();
}
inline void GameAccountInfo::_internal_set_suspension_expires(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  suspension_expires_ = value;
}
inline void GameAccountInfo::set_suspension_expires(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_suspension_expires(value);
  // @@protoc_insertion_point(field_set:login_msg.GameAccountInfo.suspension_expires)
}

// string suspension_reason = 6;
inline void GameAccountInfo::clear_suspension_reason() {
  suspension_reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameAccountInfo::suspension_reason() const {
  // @@protoc_insertion_point(field_get:login_msg.GameAccountInfo.suspension_reason)
  return _internal_suspension_reason();
}
inline void GameAccountInfo::set_suspension_reason(const std::string& value) {
  _internal_set_suspension_reason(value);
  // @@protoc_insertion_point(field_set:login_msg.GameAccountInfo.suspension_reason)
}
inline std::string* GameAccountInfo::mutable_suspension_reason() {
  // @@protoc_insertion_point(field_mutable:login_msg.GameAccountInfo.suspension_reason)
  return _internal_mutable_suspension_reason();
}
inline const std::string& GameAccountInfo::_internal_suspension_reason() const {
  return suspension_reason_.GetNoArena();
}
inline void GameAccountInfo::_internal_set_suspension_reason(const std::string& value) {
  
  suspension_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameAccountInfo::set_suspension_reason(std::string&& value) {
  
  suspension_reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.GameAccountInfo.suspension_reason)
}
inline void GameAccountInfo::set_suspension_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suspension_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.GameAccountInfo.suspension_reason)
}
inline void GameAccountInfo::set_suspension_reason(const char* value, size_t size) {
  
  suspension_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.GameAccountInfo.suspension_reason)
}
inline std::string* GameAccountInfo::_internal_mutable_suspension_reason() {
  
  return suspension_reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameAccountInfo::release_suspension_reason() {
  // @@protoc_insertion_point(field_release:login_msg.GameAccountInfo.suspension_reason)
  
  return suspension_reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameAccountInfo::set_allocated_suspension_reason(std::string* suspension_reason) {
  if (suspension_reason != nullptr) {
    
  } else {
    
  }
  suspension_reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suspension_reason);
  // @@protoc_insertion_point(field_set_allocated:login_msg.GameAccountInfo.suspension_reason)
}

// -------------------------------------------------------------------

// GameAccountList

// repeated .login_msg.GameAccountInfo game_accounts = 1;
inline int GameAccountList::_internal_game_accounts_size() const {
  return game_accounts_.size();
}
inline int GameAccountList::game_accounts_size() const {
  return _internal_game_accounts_size();
}
inline void GameAccountList::clear_game_accounts() {
  game_accounts_.Clear();
}
inline ::login_msg::GameAccountInfo* GameAccountList::mutable_game_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:login_msg.GameAccountList.game_accounts)
  return game_accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login_msg::GameAccountInfo >*
GameAccountList::mutable_game_accounts() {
  // @@protoc_insertion_point(field_mutable_list:login_msg.GameAccountList.game_accounts)
  return &game_accounts_;
}
inline const ::login_msg::GameAccountInfo& GameAccountList::_internal_game_accounts(int index) const {
  return game_accounts_.Get(index);
}
inline const ::login_msg::GameAccountInfo& GameAccountList::game_accounts(int index) const {
  // @@protoc_insertion_point(field_get:login_msg.GameAccountList.game_accounts)
  return _internal_game_accounts(index);
}
inline ::login_msg::GameAccountInfo* GameAccountList::_internal_add_game_accounts() {
  return game_accounts_.Add();
}
inline ::login_msg::GameAccountInfo* GameAccountList::add_game_accounts() {
  // @@protoc_insertion_point(field_add:login_msg.GameAccountList.game_accounts)
  return _internal_add_game_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login_msg::GameAccountInfo >&
GameAccountList::game_accounts() const {
  // @@protoc_insertion_point(field_list:login_msg.GameAccountList.game_accounts)
  return game_accounts_;
}

// -------------------------------------------------------------------

// MSG_REQUEST_ACCOUNT_LOGIN_L

// string platform_id = 1;
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::clear_platform_id() {
  platform_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_REQUEST_ACCOUNT_LOGIN_L::platform_id() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.platform_id)
  return _internal_platform_id();
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_platform_id(const std::string& value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.platform_id)
}
inline std::string* MSG_REQUEST_ACCOUNT_LOGIN_L::mutable_platform_id() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.platform_id)
  return _internal_mutable_platform_id();
}
inline const std::string& MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_platform_id() const {
  return platform_id_.GetNoArena();
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_set_platform_id(const std::string& value) {
  
  platform_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_platform_id(std::string&& value) {
  
  platform_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.platform_id)
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_platform_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.platform_id)
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_platform_id(const char* value, size_t size) {
  
  platform_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.platform_id)
}
inline std::string* MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_mutable_platform_id() {
  
  return platform_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_REQUEST_ACCOUNT_LOGIN_L::release_platform_id() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.platform_id)
  
  return platform_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_allocated_platform_id(std::string* platform_id) {
  if (platform_id != nullptr) {
    
  } else {
    
  }
  platform_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform_id);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.platform_id)
}

// string program_id = 2;
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::clear_program_id() {
  program_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_REQUEST_ACCOUNT_LOGIN_L::program_id() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.program_id)
  return _internal_program_id();
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_program_id(const std::string& value) {
  _internal_set_program_id(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.program_id)
}
inline std::string* MSG_REQUEST_ACCOUNT_LOGIN_L::mutable_program_id() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.program_id)
  return _internal_mutable_program_id();
}
inline const std::string& MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_program_id() const {
  return program_id_.GetNoArena();
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_set_program_id(const std::string& value) {
  
  program_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_program_id(std::string&& value) {
  
  program_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.program_id)
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_program_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  program_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.program_id)
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_program_id(const char* value, size_t size) {
  
  program_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.program_id)
}
inline std::string* MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_mutable_program_id() {
  
  return program_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_REQUEST_ACCOUNT_LOGIN_L::release_program_id() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.program_id)
  
  return program_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_allocated_program_id(std::string* program_id) {
  if (program_id != nullptr) {
    
  } else {
    
  }
  program_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program_id);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.program_id)
}

// int32 version = 3;
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_REQUEST_ACCOUNT_LOGIN_L::version() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.version)
  return _internal_version();
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.version)
}

// uint64 account_id = 4;
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::clear_account_id() {
  account_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_REQUEST_ACCOUNT_LOGIN_L::account_id() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.account_id)
  return _internal_account_id();
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_id_ = value;
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.account_id)
}

// string auth = 5;
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::clear_auth() {
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_REQUEST_ACCOUNT_LOGIN_L::auth() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.auth)
  return _internal_auth();
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.auth)
}
inline std::string* MSG_REQUEST_ACCOUNT_LOGIN_L::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.auth)
  return _internal_mutable_auth();
}
inline const std::string& MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_auth() const {
  return auth_.GetNoArena();
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_set_auth(const std::string& value) {
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_auth(std::string&& value) {
  
  auth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.auth)
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.auth)
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.auth)
}
inline std::string* MSG_REQUEST_ACCOUNT_LOGIN_L::_internal_mutable_auth() {
  
  return auth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_REQUEST_ACCOUNT_LOGIN_L::release_auth() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.auth)
  
  return auth_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_REQUEST_ACCOUNT_LOGIN_L::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_REQUEST_ACCOUNT_LOGIN_L.auth)
}

// -------------------------------------------------------------------

// MSG_RESPONSE_ACCOUNT_LOGIN_L

// int32 status_code = 1;
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_ACCOUNT_LOGIN_L::status_code() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.status_code)
  return _internal_status_code();
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.status_code)
}

// uint64 account_id = 2;
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::clear_account_id() {
  account_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RESPONSE_ACCOUNT_LOGIN_L::account_id() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.account_id)
  return _internal_account_id();
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_id_ = value;
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.account_id)
}

// string session_key = 3;
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_RESPONSE_ACCOUNT_LOGIN_L::session_key() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.session_key)
  return _internal_session_key();
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_session_key(const std::string& value) {
  _internal_set_session_key(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.session_key)
}
inline std::string* MSG_RESPONSE_ACCOUNT_LOGIN_L::mutable_session_key() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.session_key)
  return _internal_mutable_session_key();
}
inline const std::string& MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_session_key() const {
  return session_key_.GetNoArena();
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_set_session_key(const std::string& value) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_session_key(std::string&& value) {
  
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.session_key)
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.session_key)
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_session_key(const char* value, size_t size) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.session_key)
}
inline std::string* MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_mutable_session_key() {
  
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RESPONSE_ACCOUNT_LOGIN_L::release_session_key() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.session_key)
  
  return session_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.session_key)
}

// string ip = 4;
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_RESPONSE_ACCOUNT_LOGIN_L::ip() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.ip)
  return _internal_ip();
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.ip)
}
inline std::string* MSG_RESPONSE_ACCOUNT_LOGIN_L::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.ip)
  return _internal_mutable_ip();
}
inline const std::string& MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.ip)
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.ip)
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.ip)
}
inline std::string* MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RESPONSE_ACCOUNT_LOGIN_L::release_ip() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.ip)
}

// int32 port = 5;
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_ACCOUNT_LOGIN_L::port() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.port)
  return _internal_port();
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MSG_RESPONSE_ACCOUNT_LOGIN_L::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_ACCOUNT_LOGIN_L.port)
}

// -------------------------------------------------------------------

// MSG_REQUEST_HANDSHAKE_INIT

// string client_random = 1;
inline void MSG_REQUEST_HANDSHAKE_INIT::clear_client_random() {
  client_random_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_REQUEST_HANDSHAKE_INIT::client_random() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_HANDSHAKE_INIT.client_random)
  return _internal_client_random();
}
inline void MSG_REQUEST_HANDSHAKE_INIT::set_client_random(const std::string& value) {
  _internal_set_client_random(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_HANDSHAKE_INIT.client_random)
}
inline std::string* MSG_REQUEST_HANDSHAKE_INIT::mutable_client_random() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_REQUEST_HANDSHAKE_INIT.client_random)
  return _internal_mutable_client_random();
}
inline const std::string& MSG_REQUEST_HANDSHAKE_INIT::_internal_client_random() const {
  return client_random_.GetNoArena();
}
inline void MSG_REQUEST_HANDSHAKE_INIT::_internal_set_client_random(const std::string& value) {
  
  client_random_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_REQUEST_HANDSHAKE_INIT::set_client_random(std::string&& value) {
  
  client_random_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_REQUEST_HANDSHAKE_INIT.client_random)
}
inline void MSG_REQUEST_HANDSHAKE_INIT::set_client_random(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_random_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_REQUEST_HANDSHAKE_INIT.client_random)
}
inline void MSG_REQUEST_HANDSHAKE_INIT::set_client_random(const char* value, size_t size) {
  
  client_random_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_REQUEST_HANDSHAKE_INIT.client_random)
}
inline std::string* MSG_REQUEST_HANDSHAKE_INIT::_internal_mutable_client_random() {
  
  return client_random_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_REQUEST_HANDSHAKE_INIT::release_client_random() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_REQUEST_HANDSHAKE_INIT.client_random)
  
  return client_random_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_REQUEST_HANDSHAKE_INIT::set_allocated_client_random(std::string* client_random) {
  if (client_random != nullptr) {
    
  } else {
    
  }
  client_random_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_random);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_REQUEST_HANDSHAKE_INIT.client_random)
}

// -------------------------------------------------------------------

// MSG_RESPONSE_HANDSHAKE_INIT

// int32 status_code = 1;
inline void MSG_RESPONSE_HANDSHAKE_INIT::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_HANDSHAKE_INIT::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_HANDSHAKE_INIT::status_code() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.status_code)
  return _internal_status_code();
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.status_code)
}

// string server_random = 2;
inline void MSG_RESPONSE_HANDSHAKE_INIT::clear_server_random() {
  server_random_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_RESPONSE_HANDSHAKE_INIT::server_random() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.server_random)
  return _internal_server_random();
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_server_random(const std::string& value) {
  _internal_set_server_random(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.server_random)
}
inline std::string* MSG_RESPONSE_HANDSHAKE_INIT::mutable_server_random() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.server_random)
  return _internal_mutable_server_random();
}
inline const std::string& MSG_RESPONSE_HANDSHAKE_INIT::_internal_server_random() const {
  return server_random_.GetNoArena();
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::_internal_set_server_random(const std::string& value) {
  
  server_random_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_server_random(std::string&& value) {
  
  server_random_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.server_random)
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_server_random(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_random_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.server_random)
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_server_random(const char* value, size_t size) {
  
  server_random_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.server_random)
}
inline std::string* MSG_RESPONSE_HANDSHAKE_INIT::_internal_mutable_server_random() {
  
  return server_random_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RESPONSE_HANDSHAKE_INIT::release_server_random() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.server_random)
  
  return server_random_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_allocated_server_random(std::string* server_random) {
  if (server_random != nullptr) {
    
  } else {
    
  }
  server_random_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_random);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.server_random)
}

// string public_key = 3;
inline void MSG_RESPONSE_HANDSHAKE_INIT::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_RESPONSE_HANDSHAKE_INIT::public_key() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.public_key)
  return _internal_public_key();
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.public_key)
}
inline std::string* MSG_RESPONSE_HANDSHAKE_INIT::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& MSG_RESPONSE_HANDSHAKE_INIT::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.public_key)
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.public_key)
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.public_key)
}
inline std::string* MSG_RESPONSE_HANDSHAKE_INIT::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RESPONSE_HANDSHAKE_INIT::release_public_key() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RESPONSE_HANDSHAKE_INIT::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_RESPONSE_HANDSHAKE_INIT.public_key)
}

// -------------------------------------------------------------------

// MSG_REQUEST_HANDSHAKE_ESTABLISHED

// bytes encrypted_key = 1;
inline void MSG_REQUEST_HANDSHAKE_ESTABLISHED::clear_encrypted_key() {
  encrypted_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_REQUEST_HANDSHAKE_ESTABLISHED::encrypted_key() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED.encrypted_key)
  return _internal_encrypted_key();
}
inline void MSG_REQUEST_HANDSHAKE_ESTABLISHED::set_encrypted_key(const std::string& value) {
  _internal_set_encrypted_key(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED.encrypted_key)
}
inline std::string* MSG_REQUEST_HANDSHAKE_ESTABLISHED::mutable_encrypted_key() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED.encrypted_key)
  return _internal_mutable_encrypted_key();
}
inline const std::string& MSG_REQUEST_HANDSHAKE_ESTABLISHED::_internal_encrypted_key() const {
  return encrypted_key_.GetNoArena();
}
inline void MSG_REQUEST_HANDSHAKE_ESTABLISHED::_internal_set_encrypted_key(const std::string& value) {
  
  encrypted_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_REQUEST_HANDSHAKE_ESTABLISHED::set_encrypted_key(std::string&& value) {
  
  encrypted_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED.encrypted_key)
}
inline void MSG_REQUEST_HANDSHAKE_ESTABLISHED::set_encrypted_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED.encrypted_key)
}
inline void MSG_REQUEST_HANDSHAKE_ESTABLISHED::set_encrypted_key(const void* value, size_t size) {
  
  encrypted_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED.encrypted_key)
}
inline std::string* MSG_REQUEST_HANDSHAKE_ESTABLISHED::_internal_mutable_encrypted_key() {
  
  return encrypted_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_REQUEST_HANDSHAKE_ESTABLISHED::release_encrypted_key() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED.encrypted_key)
  
  return encrypted_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_REQUEST_HANDSHAKE_ESTABLISHED::set_allocated_encrypted_key(std::string* encrypted_key) {
  if (encrypted_key != nullptr) {
    
  } else {
    
  }
  encrypted_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_key);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_REQUEST_HANDSHAKE_ESTABLISHED.encrypted_key)
}

// -------------------------------------------------------------------

// MSG_RESPONSE_HANDSHAKE_ESTABLISHED

// int32 status_code = 1;
inline void MSG_RESPONSE_HANDSHAKE_ESTABLISHED::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_HANDSHAKE_ESTABLISHED::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_HANDSHAKE_ESTABLISHED::status_code() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_HANDSHAKE_ESTABLISHED.status_code)
  return _internal_status_code();
}
inline void MSG_RESPONSE_HANDSHAKE_ESTABLISHED::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void MSG_RESPONSE_HANDSHAKE_ESTABLISHED::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_HANDSHAKE_ESTABLISHED.status_code)
}

// -------------------------------------------------------------------

// MSG_REQUEST_CLIENT_LOGIN

// uint64 user_id = 1;
inline void MSG_REQUEST_CLIENT_LOGIN::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_REQUEST_CLIENT_LOGIN::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_REQUEST_CLIENT_LOGIN::user_id() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_CLIENT_LOGIN.user_id)
  return _internal_user_id();
}
inline void MSG_REQUEST_CLIENT_LOGIN::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_CLIENT_LOGIN.user_id)
}

// string session_key = 2;
inline void MSG_REQUEST_CLIENT_LOGIN::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_REQUEST_CLIENT_LOGIN::session_key() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
  return _internal_session_key();
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_session_key(const std::string& value) {
  _internal_set_session_key(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
}
inline std::string* MSG_REQUEST_CLIENT_LOGIN::mutable_session_key() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
  return _internal_mutable_session_key();
}
inline const std::string& MSG_REQUEST_CLIENT_LOGIN::_internal_session_key() const {
  return session_key_.GetNoArena();
}
inline void MSG_REQUEST_CLIENT_LOGIN::_internal_set_session_key(const std::string& value) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_session_key(std::string&& value) {
  
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_session_key(const char* value, size_t size) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
}
inline std::string* MSG_REQUEST_CLIENT_LOGIN::_internal_mutable_session_key() {
  
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_REQUEST_CLIENT_LOGIN::release_session_key() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
  
  return session_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
}

// int32 version = 3;
inline void MSG_REQUEST_CLIENT_LOGIN::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_REQUEST_CLIENT_LOGIN::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_REQUEST_CLIENT_LOGIN::version() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_CLIENT_LOGIN.version)
  return _internal_version();
}
inline void MSG_REQUEST_CLIENT_LOGIN::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_CLIENT_LOGIN.version)
}

// -------------------------------------------------------------------

// MSG_RESPONSE_CLIENT_LOGIN

// int32 status_code = 1;
inline void MSG_RESPONSE_CLIENT_LOGIN::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_CLIENT_LOGIN::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_CLIENT_LOGIN::status_code() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_CLIENT_LOGIN.status_code)
  return _internal_status_code();
}
inline void MSG_RESPONSE_CLIENT_LOGIN::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void MSG_RESPONSE_CLIENT_LOGIN::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_CLIENT_LOGIN.status_code)
}

// uint64 user_id = 2;
inline void MSG_RESPONSE_CLIENT_LOGIN::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RESPONSE_CLIENT_LOGIN::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RESPONSE_CLIENT_LOGIN::user_id() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_CLIENT_LOGIN.user_id)
  return _internal_user_id();
}
inline void MSG_RESPONSE_CLIENT_LOGIN::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void MSG_RESPONSE_CLIENT_LOGIN::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_CLIENT_LOGIN.user_id)
}

// int32 version = 3;
inline void MSG_RESPONSE_CLIENT_LOGIN::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_CLIENT_LOGIN::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_CLIENT_LOGIN::version() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_CLIENT_LOGIN.version)
  return _internal_version();
}
inline void MSG_RESPONSE_CLIENT_LOGIN::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void MSG_RESPONSE_CLIENT_LOGIN::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_CLIENT_LOGIN.version)
}

// bool is_newbie = 4;
inline void MSG_RESPONSE_CLIENT_LOGIN::clear_is_newbie() {
  is_newbie_ = false;
}
inline bool MSG_RESPONSE_CLIENT_LOGIN::_internal_is_newbie() const {
  return is_newbie_;
}
inline bool MSG_RESPONSE_CLIENT_LOGIN::is_newbie() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_CLIENT_LOGIN.is_newbie)
  return _internal_is_newbie();
}
inline void MSG_RESPONSE_CLIENT_LOGIN::_internal_set_is_newbie(bool value) {
  
  is_newbie_ = value;
}
inline void MSG_RESPONSE_CLIENT_LOGIN::set_is_newbie(bool value) {
  _internal_set_is_newbie(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_CLIENT_LOGIN.is_newbie)
}

// -------------------------------------------------------------------

// MSG_REQUEST_ECHO

// uint64 value1 = 1;
inline void MSG_REQUEST_ECHO::clear_value1() {
  value1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_REQUEST_ECHO::_internal_value1() const {
  return value1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_REQUEST_ECHO::value1() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_ECHO.value1)
  return _internal_value1();
}
inline void MSG_REQUEST_ECHO::_internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value1_ = value;
}
inline void MSG_REQUEST_ECHO::set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_ECHO.value1)
}

// string value2 = 2;
inline void MSG_REQUEST_ECHO::clear_value2() {
  value2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_REQUEST_ECHO::value2() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_ECHO.value2)
  return _internal_value2();
}
inline void MSG_REQUEST_ECHO::set_value2(const std::string& value) {
  _internal_set_value2(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_ECHO.value2)
}
inline std::string* MSG_REQUEST_ECHO::mutable_value2() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_REQUEST_ECHO.value2)
  return _internal_mutable_value2();
}
inline const std::string& MSG_REQUEST_ECHO::_internal_value2() const {
  return value2_.GetNoArena();
}
inline void MSG_REQUEST_ECHO::_internal_set_value2(const std::string& value) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_REQUEST_ECHO::set_value2(std::string&& value) {
  
  value2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_REQUEST_ECHO.value2)
}
inline void MSG_REQUEST_ECHO::set_value2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_REQUEST_ECHO.value2)
}
inline void MSG_REQUEST_ECHO::set_value2(const char* value, size_t size) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_REQUEST_ECHO.value2)
}
inline std::string* MSG_REQUEST_ECHO::_internal_mutable_value2() {
  
  return value2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_REQUEST_ECHO::release_value2() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_REQUEST_ECHO.value2)
  
  return value2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_REQUEST_ECHO::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    
  } else {
    
  }
  value2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value2);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_REQUEST_ECHO.value2)
}

// -------------------------------------------------------------------

// MSG_RESPONSE_ECHO

// uint64 value1 = 1;
inline void MSG_RESPONSE_ECHO::clear_value1() {
  value1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RESPONSE_ECHO::_internal_value1() const {
  return value1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RESPONSE_ECHO::value1() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_ECHO.value1)
  return _internal_value1();
}
inline void MSG_RESPONSE_ECHO::_internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value1_ = value;
}
inline void MSG_RESPONSE_ECHO::set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_ECHO.value1)
}

// string value2 = 2;
inline void MSG_RESPONSE_ECHO::clear_value2() {
  value2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_RESPONSE_ECHO::value2() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_ECHO.value2)
  return _internal_value2();
}
inline void MSG_RESPONSE_ECHO::set_value2(const std::string& value) {
  _internal_set_value2(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_ECHO.value2)
}
inline std::string* MSG_RESPONSE_ECHO::mutable_value2() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_RESPONSE_ECHO.value2)
  return _internal_mutable_value2();
}
inline const std::string& MSG_RESPONSE_ECHO::_internal_value2() const {
  return value2_.GetNoArena();
}
inline void MSG_RESPONSE_ECHO::_internal_set_value2(const std::string& value) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RESPONSE_ECHO::set_value2(std::string&& value) {
  
  value2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_RESPONSE_ECHO.value2)
}
inline void MSG_RESPONSE_ECHO::set_value2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_RESPONSE_ECHO.value2)
}
inline void MSG_RESPONSE_ECHO::set_value2(const char* value, size_t size) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_RESPONSE_ECHO.value2)
}
inline std::string* MSG_RESPONSE_ECHO::_internal_mutable_value2() {
  
  return value2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RESPONSE_ECHO::release_value2() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_RESPONSE_ECHO.value2)
  
  return value2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RESPONSE_ECHO::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    
  } else {
    
  }
  value2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value2);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_RESPONSE_ECHO.value2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace login_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_2eproto
