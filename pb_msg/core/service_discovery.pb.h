// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_discovery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_5fdiscovery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_5fdiscovery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_5fdiscovery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_5fdiscovery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_5fdiscovery_2eproto;
namespace service_discovery {
class EndPointInstance;
class EndPointInstanceDefaultTypeInternal;
extern EndPointInstanceDefaultTypeInternal _EndPointInstance_default_instance_;
class MSG_NOTICE_INSTANCE;
class MSG_NOTICE_INSTANCEDefaultTypeInternal;
extern MSG_NOTICE_INSTANCEDefaultTypeInternal _MSG_NOTICE_INSTANCE_default_instance_;
class MSG_REQUEST_HEARTBEAT;
class MSG_REQUEST_HEARTBEATDefaultTypeInternal;
extern MSG_REQUEST_HEARTBEATDefaultTypeInternal _MSG_REQUEST_HEARTBEAT_default_instance_;
class MSG_REQUEST_REGISTER_INSTANCE;
class MSG_REQUEST_REGISTER_INSTANCEDefaultTypeInternal;
extern MSG_REQUEST_REGISTER_INSTANCEDefaultTypeInternal _MSG_REQUEST_REGISTER_INSTANCE_default_instance_;
class MSG_RESP_HEARTBEAT;
class MSG_RESP_HEARTBEATDefaultTypeInternal;
extern MSG_RESP_HEARTBEATDefaultTypeInternal _MSG_RESP_HEARTBEAT_default_instance_;
class MSG_RESP_REGISTER_INSTANCE;
class MSG_RESP_REGISTER_INSTANCEDefaultTypeInternal;
extern MSG_RESP_REGISTER_INSTANCEDefaultTypeInternal _MSG_RESP_REGISTER_INSTANCE_default_instance_;
}  // namespace service_discovery
PROTOBUF_NAMESPACE_OPEN
template<> ::service_discovery::EndPointInstance* Arena::CreateMaybeMessage<::service_discovery::EndPointInstance>(Arena*);
template<> ::service_discovery::MSG_NOTICE_INSTANCE* Arena::CreateMaybeMessage<::service_discovery::MSG_NOTICE_INSTANCE>(Arena*);
template<> ::service_discovery::MSG_REQUEST_HEARTBEAT* Arena::CreateMaybeMessage<::service_discovery::MSG_REQUEST_HEARTBEAT>(Arena*);
template<> ::service_discovery::MSG_REQUEST_REGISTER_INSTANCE* Arena::CreateMaybeMessage<::service_discovery::MSG_REQUEST_REGISTER_INSTANCE>(Arena*);
template<> ::service_discovery::MSG_RESP_HEARTBEAT* Arena::CreateMaybeMessage<::service_discovery::MSG_RESP_HEARTBEAT>(Arena*);
template<> ::service_discovery::MSG_RESP_REGISTER_INSTANCE* Arena::CreateMaybeMessage<::service_discovery::MSG_RESP_REGISTER_INSTANCE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_discovery {

enum RegistryStatus : int {
  RS_None = 0,
  RS_Learning = 1,
  RS_Forwarding = 2,
  RegistryStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RegistryStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RegistryStatus_IsValid(int value);
constexpr RegistryStatus RegistryStatus_MIN = RS_None;
constexpr RegistryStatus RegistryStatus_MAX = RS_Forwarding;
constexpr int RegistryStatus_ARRAYSIZE = RegistryStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegistryStatus_descriptor();
template<typename T>
inline const std::string& RegistryStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegistryStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegistryStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegistryStatus_descriptor(), enum_t_value);
}
inline bool RegistryStatus_Parse(
    const std::string& name, RegistryStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegistryStatus>(
    RegistryStatus_descriptor(), name, value);
}
enum UpdateMode : int {
  UM_None = 0,
  UM_Full = 1,
  UM_Incremental = 2,
  UpdateMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateMode_IsValid(int value);
constexpr UpdateMode UpdateMode_MIN = UM_None;
constexpr UpdateMode UpdateMode_MAX = UM_Incremental;
constexpr int UpdateMode_ARRAYSIZE = UpdateMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateMode_descriptor();
template<typename T>
inline const std::string& UpdateMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateMode_descriptor(), enum_t_value);
}
inline bool UpdateMode_Parse(
    const std::string& name, UpdateMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateMode>(
    UpdateMode_descriptor(), name, value);
}
// ===================================================================

class EndPointInstance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.EndPointInstance) */ {
 public:
  EndPointInstance();
  virtual ~EndPointInstance();

  EndPointInstance(const EndPointInstance& from);
  EndPointInstance(EndPointInstance&& from) noexcept
    : EndPointInstance() {
    *this = ::std::move(from);
  }

  inline EndPointInstance& operator=(const EndPointInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPointInstance& operator=(EndPointInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndPointInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndPointInstance* internal_default_instance() {
    return reinterpret_cast<const EndPointInstance*>(
               &_EndPointInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EndPointInstance& a, EndPointInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPointInstance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndPointInstance* New() const final {
    return CreateMaybeMessage<EndPointInstance>(nullptr);
  }

  EndPointInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndPointInstance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndPointInstance& from);
  void MergeFrom(const EndPointInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPointInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.EndPointInstance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_5fdiscovery_2eproto);
    return ::descriptor_table_service_5fdiscovery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 4,
    kIpFieldNumber = 5,
    kRealmFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIdFieldNumber = 3,
    kPortFieldNumber = 6,
    kCodecTypeFieldNumber = 7,
    kMaskFlagFieldNumber = 8,
  };
  // string auth = 4;
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // string ip = 5;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 realm = 1;
  void clear_realm();
  ::PROTOBUF_NAMESPACE_ID::uint32 realm() const;
  void set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_realm() const;
  void _internal_set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .common.EndPointType type = 2;
  void clear_type();
  ::common::EndPointType type() const;
  void set_type(::common::EndPointType value);
  private:
  ::common::EndPointType _internal_type() const;
  void _internal_set_type(::common::EndPointType value);
  public:

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 6;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 codec_type = 7;
  void clear_codec_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 codec_type() const;
  void set_codec_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_codec_type() const;
  void _internal_set_codec_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mask_flag = 8;
  void clear_mask_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 mask_flag() const;
  void set_mask_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mask_flag() const;
  void _internal_set_mask_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_discovery.EndPointInstance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 realm_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 codec_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mask_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class MSG_REQUEST_REGISTER_INSTANCE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.MSG_REQUEST_REGISTER_INSTANCE) */ {
 public:
  MSG_REQUEST_REGISTER_INSTANCE();
  virtual ~MSG_REQUEST_REGISTER_INSTANCE();

  MSG_REQUEST_REGISTER_INSTANCE(const MSG_REQUEST_REGISTER_INSTANCE& from);
  MSG_REQUEST_REGISTER_INSTANCE(MSG_REQUEST_REGISTER_INSTANCE&& from) noexcept
    : MSG_REQUEST_REGISTER_INSTANCE() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_REGISTER_INSTANCE& operator=(const MSG_REQUEST_REGISTER_INSTANCE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_REGISTER_INSTANCE& operator=(MSG_REQUEST_REGISTER_INSTANCE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_REQUEST_REGISTER_INSTANCE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_REQUEST_REGISTER_INSTANCE* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_REGISTER_INSTANCE*>(
               &_MSG_REQUEST_REGISTER_INSTANCE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_REQUEST_REGISTER_INSTANCE& a, MSG_REQUEST_REGISTER_INSTANCE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_REGISTER_INSTANCE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_REQUEST_REGISTER_INSTANCE* New() const final {
    return CreateMaybeMessage<MSG_REQUEST_REGISTER_INSTANCE>(nullptr);
  }

  MSG_REQUEST_REGISTER_INSTANCE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_REQUEST_REGISTER_INSTANCE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_REQUEST_REGISTER_INSTANCE& from);
  void MergeFrom(const MSG_REQUEST_REGISTER_INSTANCE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_REQUEST_REGISTER_INSTANCE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.MSG_REQUEST_REGISTER_INSTANCE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_5fdiscovery_2eproto);
    return ::descriptor_table_service_5fdiscovery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 2,
    kInstanceFieldNumber = 1,
  };
  // string auth = 2;
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // .service_discovery.EndPointInstance instance = 1;
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::service_discovery::EndPointInstance& instance() const;
  ::service_discovery::EndPointInstance* release_instance();
  ::service_discovery::EndPointInstance* mutable_instance();
  void set_allocated_instance(::service_discovery::EndPointInstance* instance);
  private:
  const ::service_discovery::EndPointInstance& _internal_instance() const;
  ::service_discovery::EndPointInstance* _internal_mutable_instance();
  public:

  // @@protoc_insertion_point(class_scope:service_discovery.MSG_REQUEST_REGISTER_INSTANCE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  ::service_discovery::EndPointInstance* instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESP_REGISTER_INSTANCE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.MSG_RESP_REGISTER_INSTANCE) */ {
 public:
  MSG_RESP_REGISTER_INSTANCE();
  virtual ~MSG_RESP_REGISTER_INSTANCE();

  MSG_RESP_REGISTER_INSTANCE(const MSG_RESP_REGISTER_INSTANCE& from);
  MSG_RESP_REGISTER_INSTANCE(MSG_RESP_REGISTER_INSTANCE&& from) noexcept
    : MSG_RESP_REGISTER_INSTANCE() {
    *this = ::std::move(from);
  }

  inline MSG_RESP_REGISTER_INSTANCE& operator=(const MSG_RESP_REGISTER_INSTANCE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESP_REGISTER_INSTANCE& operator=(MSG_RESP_REGISTER_INSTANCE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RESP_REGISTER_INSTANCE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RESP_REGISTER_INSTANCE* internal_default_instance() {
    return reinterpret_cast<const MSG_RESP_REGISTER_INSTANCE*>(
               &_MSG_RESP_REGISTER_INSTANCE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_RESP_REGISTER_INSTANCE& a, MSG_RESP_REGISTER_INSTANCE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESP_REGISTER_INSTANCE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RESP_REGISTER_INSTANCE* New() const final {
    return CreateMaybeMessage<MSG_RESP_REGISTER_INSTANCE>(nullptr);
  }

  MSG_RESP_REGISTER_INSTANCE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RESP_REGISTER_INSTANCE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RESP_REGISTER_INSTANCE& from);
  void MergeFrom(const MSG_RESP_REGISTER_INSTANCE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESP_REGISTER_INSTANCE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.MSG_RESP_REGISTER_INSTANCE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_5fdiscovery_2eproto);
    return ::descriptor_table_service_5fdiscovery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // uint32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_discovery.MSG_RESP_REGISTER_INSTANCE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class MSG_NOTICE_INSTANCE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.MSG_NOTICE_INSTANCE) */ {
 public:
  MSG_NOTICE_INSTANCE();
  virtual ~MSG_NOTICE_INSTANCE();

  MSG_NOTICE_INSTANCE(const MSG_NOTICE_INSTANCE& from);
  MSG_NOTICE_INSTANCE(MSG_NOTICE_INSTANCE&& from) noexcept
    : MSG_NOTICE_INSTANCE() {
    *this = ::std::move(from);
  }

  inline MSG_NOTICE_INSTANCE& operator=(const MSG_NOTICE_INSTANCE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NOTICE_INSTANCE& operator=(MSG_NOTICE_INSTANCE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_NOTICE_INSTANCE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_NOTICE_INSTANCE* internal_default_instance() {
    return reinterpret_cast<const MSG_NOTICE_INSTANCE*>(
               &_MSG_NOTICE_INSTANCE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_NOTICE_INSTANCE& a, MSG_NOTICE_INSTANCE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NOTICE_INSTANCE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_NOTICE_INSTANCE* New() const final {
    return CreateMaybeMessage<MSG_NOTICE_INSTANCE>(nullptr);
  }

  MSG_NOTICE_INSTANCE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_NOTICE_INSTANCE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_NOTICE_INSTANCE& from);
  void MergeFrom(const MSG_NOTICE_INSTANCE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NOTICE_INSTANCE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.MSG_NOTICE_INSTANCE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_5fdiscovery_2eproto);
    return ::descriptor_table_service_5fdiscovery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddInstanceFieldNumber = 5,
    kDeleteInstanceFieldNumber = 6,
    kUpdateInstanceFieldNumber = 7,
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kStatusFieldNumber = 3,
    kModeFieldNumber = 4,
  };
  // repeated .service_discovery.EndPointInstance add_instance = 5;
  int add_instance_size() const;
  private:
  int _internal_add_instance_size() const;
  public:
  void clear_add_instance();
  ::service_discovery::EndPointInstance* mutable_add_instance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
      mutable_add_instance();
  private:
  const ::service_discovery::EndPointInstance& _internal_add_instance(int index) const;
  ::service_discovery::EndPointInstance* _internal_add_add_instance();
  public:
  const ::service_discovery::EndPointInstance& add_instance(int index) const;
  ::service_discovery::EndPointInstance* add_add_instance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
      add_instance() const;

  // repeated .service_discovery.EndPointInstance delete_instance = 6;
  int delete_instance_size() const;
  private:
  int _internal_delete_instance_size() const;
  public:
  void clear_delete_instance();
  ::service_discovery::EndPointInstance* mutable_delete_instance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
      mutable_delete_instance();
  private:
  const ::service_discovery::EndPointInstance& _internal_delete_instance(int index) const;
  ::service_discovery::EndPointInstance* _internal_add_delete_instance();
  public:
  const ::service_discovery::EndPointInstance& delete_instance(int index) const;
  ::service_discovery::EndPointInstance* add_delete_instance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
      delete_instance() const;

  // repeated .service_discovery.EndPointInstance update_instance = 7;
  int update_instance_size() const;
  private:
  int _internal_update_instance_size() const;
  public:
  void clear_update_instance();
  ::service_discovery::EndPointInstance* mutable_update_instance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
      mutable_update_instance();
  private:
  const ::service_discovery::EndPointInstance& _internal_update_instance(int index) const;
  ::service_discovery::EndPointInstance* _internal_add_update_instance();
  public:
  const ::service_discovery::EndPointInstance& update_instance(int index) const;
  ::service_discovery::EndPointInstance* add_update_instance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
      update_instance() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .service_discovery.RegistryStatus status = 3;
  void clear_status();
  ::service_discovery::RegistryStatus status() const;
  void set_status(::service_discovery::RegistryStatus value);
  private:
  ::service_discovery::RegistryStatus _internal_status() const;
  void _internal_set_status(::service_discovery::RegistryStatus value);
  public:

  // .service_discovery.UpdateMode mode = 4;
  void clear_mode();
  ::service_discovery::UpdateMode mode() const;
  void set_mode(::service_discovery::UpdateMode value);
  private:
  ::service_discovery::UpdateMode _internal_mode() const;
  void _internal_set_mode(::service_discovery::UpdateMode value);
  public:

  // @@protoc_insertion_point(class_scope:service_discovery.MSG_NOTICE_INSTANCE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance > add_instance_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance > delete_instance_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance > update_instance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  int status_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class MSG_REQUEST_HEARTBEAT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.MSG_REQUEST_HEARTBEAT) */ {
 public:
  MSG_REQUEST_HEARTBEAT();
  virtual ~MSG_REQUEST_HEARTBEAT();

  MSG_REQUEST_HEARTBEAT(const MSG_REQUEST_HEARTBEAT& from);
  MSG_REQUEST_HEARTBEAT(MSG_REQUEST_HEARTBEAT&& from) noexcept
    : MSG_REQUEST_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_HEARTBEAT& operator=(const MSG_REQUEST_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_HEARTBEAT& operator=(MSG_REQUEST_HEARTBEAT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_REQUEST_HEARTBEAT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_REQUEST_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_HEARTBEAT*>(
               &_MSG_REQUEST_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_REQUEST_HEARTBEAT& a, MSG_REQUEST_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_HEARTBEAT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_REQUEST_HEARTBEAT* New() const final {
    return CreateMaybeMessage<MSG_REQUEST_HEARTBEAT>(nullptr);
  }

  MSG_REQUEST_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_REQUEST_HEARTBEAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_REQUEST_HEARTBEAT& from);
  void MergeFrom(const MSG_REQUEST_HEARTBEAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_REQUEST_HEARTBEAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.MSG_REQUEST_HEARTBEAT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_5fdiscovery_2eproto);
    return ::descriptor_table_service_5fdiscovery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_discovery.MSG_REQUEST_HEARTBEAT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESP_HEARTBEAT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.MSG_RESP_HEARTBEAT) */ {
 public:
  MSG_RESP_HEARTBEAT();
  virtual ~MSG_RESP_HEARTBEAT();

  MSG_RESP_HEARTBEAT(const MSG_RESP_HEARTBEAT& from);
  MSG_RESP_HEARTBEAT(MSG_RESP_HEARTBEAT&& from) noexcept
    : MSG_RESP_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline MSG_RESP_HEARTBEAT& operator=(const MSG_RESP_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESP_HEARTBEAT& operator=(MSG_RESP_HEARTBEAT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RESP_HEARTBEAT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RESP_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const MSG_RESP_HEARTBEAT*>(
               &_MSG_RESP_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_RESP_HEARTBEAT& a, MSG_RESP_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESP_HEARTBEAT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RESP_HEARTBEAT* New() const final {
    return CreateMaybeMessage<MSG_RESP_HEARTBEAT>(nullptr);
  }

  MSG_RESP_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RESP_HEARTBEAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RESP_HEARTBEAT& from);
  void MergeFrom(const MSG_RESP_HEARTBEAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESP_HEARTBEAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.MSG_RESP_HEARTBEAT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_5fdiscovery_2eproto);
    return ::descriptor_table_service_5fdiscovery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // uint32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_discovery.MSG_RESP_HEARTBEAT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EndPointInstance

// uint32 realm = 1;
inline void EndPointInstance::clear_realm() {
  realm_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointInstance::_internal_realm() const {
  return realm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointInstance::realm() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.realm)
  return _internal_realm();
}
inline void EndPointInstance::_internal_set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  realm_ = value;
}
inline void EndPointInstance::set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_realm(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.realm)
}

// .common.EndPointType type = 2;
inline void EndPointInstance::clear_type() {
  type_ = 0;
}
inline ::common::EndPointType EndPointInstance::_internal_type() const {
  return static_cast< ::common::EndPointType >(type_);
}
inline ::common::EndPointType EndPointInstance::type() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.type)
  return _internal_type();
}
inline void EndPointInstance::_internal_set_type(::common::EndPointType value) {
  
  type_ = value;
}
inline void EndPointInstance::set_type(::common::EndPointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.type)
}

// uint32 id = 3;
inline void EndPointInstance::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointInstance::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointInstance::id() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.id)
  return _internal_id();
}
inline void EndPointInstance::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void EndPointInstance::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.id)
}

// string auth = 4;
inline void EndPointInstance::clear_auth() {
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EndPointInstance::auth() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.auth)
  return _internal_auth();
}
inline void EndPointInstance::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.auth)
}
inline std::string* EndPointInstance::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:service_discovery.EndPointInstance.auth)
  return _internal_mutable_auth();
}
inline const std::string& EndPointInstance::_internal_auth() const {
  return auth_.GetNoArena();
}
inline void EndPointInstance::_internal_set_auth(const std::string& value) {
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EndPointInstance::set_auth(std::string&& value) {
  
  auth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:service_discovery.EndPointInstance.auth)
}
inline void EndPointInstance::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_discovery.EndPointInstance.auth)
}
inline void EndPointInstance::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_discovery.EndPointInstance.auth)
}
inline std::string* EndPointInstance::_internal_mutable_auth() {
  
  return auth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndPointInstance::release_auth() {
  // @@protoc_insertion_point(field_release:service_discovery.EndPointInstance.auth)
  
  return auth_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndPointInstance::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:service_discovery.EndPointInstance.auth)
}

// string ip = 5;
inline void EndPointInstance::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EndPointInstance::ip() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.ip)
  return _internal_ip();
}
inline void EndPointInstance::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.ip)
}
inline std::string* EndPointInstance::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:service_discovery.EndPointInstance.ip)
  return _internal_mutable_ip();
}
inline const std::string& EndPointInstance::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void EndPointInstance::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EndPointInstance::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:service_discovery.EndPointInstance.ip)
}
inline void EndPointInstance::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_discovery.EndPointInstance.ip)
}
inline void EndPointInstance::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_discovery.EndPointInstance.ip)
}
inline std::string* EndPointInstance::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndPointInstance::release_ip() {
  // @@protoc_insertion_point(field_release:service_discovery.EndPointInstance.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndPointInstance::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:service_discovery.EndPointInstance.ip)
}

// uint32 port = 6;
inline void EndPointInstance::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointInstance::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointInstance::port() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.port)
  return _internal_port();
}
inline void EndPointInstance::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void EndPointInstance::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.port)
}

// uint32 codec_type = 7;
inline void EndPointInstance::clear_codec_type() {
  codec_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointInstance::_internal_codec_type() const {
  return codec_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointInstance::codec_type() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.codec_type)
  return _internal_codec_type();
}
inline void EndPointInstance::_internal_set_codec_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  codec_type_ = value;
}
inline void EndPointInstance::set_codec_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_codec_type(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.codec_type)
}

// uint32 mask_flag = 8;
inline void EndPointInstance::clear_mask_flag() {
  mask_flag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointInstance::_internal_mask_flag() const {
  return mask_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointInstance::mask_flag() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.mask_flag)
  return _internal_mask_flag();
}
inline void EndPointInstance::_internal_set_mask_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mask_flag_ = value;
}
inline void EndPointInstance::set_mask_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mask_flag(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.mask_flag)
}

// -------------------------------------------------------------------

// MSG_REQUEST_REGISTER_INSTANCE

// .service_discovery.EndPointInstance instance = 1;
inline bool MSG_REQUEST_REGISTER_INSTANCE::_internal_has_instance() const {
  return this != internal_default_instance() && instance_ != nullptr;
}
inline bool MSG_REQUEST_REGISTER_INSTANCE::has_instance() const {
  return _internal_has_instance();
}
inline void MSG_REQUEST_REGISTER_INSTANCE::clear_instance() {
  if (GetArenaNoVirtual() == nullptr && instance_ != nullptr) {
    delete instance_;
  }
  instance_ = nullptr;
}
inline const ::service_discovery::EndPointInstance& MSG_REQUEST_REGISTER_INSTANCE::_internal_instance() const {
  const ::service_discovery::EndPointInstance* p = instance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_discovery::EndPointInstance*>(
      &::service_discovery::_EndPointInstance_default_instance_);
}
inline const ::service_discovery::EndPointInstance& MSG_REQUEST_REGISTER_INSTANCE::instance() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.instance)
  return _internal_instance();
}
inline ::service_discovery::EndPointInstance* MSG_REQUEST_REGISTER_INSTANCE::release_instance() {
  // @@protoc_insertion_point(field_release:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.instance)
  
  ::service_discovery::EndPointInstance* temp = instance_;
  instance_ = nullptr;
  return temp;
}
inline ::service_discovery::EndPointInstance* MSG_REQUEST_REGISTER_INSTANCE::_internal_mutable_instance() {
  
  if (instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_discovery::EndPointInstance>(GetArenaNoVirtual());
    instance_ = p;
  }
  return instance_;
}
inline ::service_discovery::EndPointInstance* MSG_REQUEST_REGISTER_INSTANCE::mutable_instance() {
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.instance)
  return _internal_mutable_instance();
}
inline void MSG_REQUEST_REGISTER_INSTANCE::set_allocated_instance(::service_discovery::EndPointInstance* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete instance_;
  }
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.instance)
}

// string auth = 2;
inline void MSG_REQUEST_REGISTER_INSTANCE::clear_auth() {
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_REQUEST_REGISTER_INSTANCE::auth() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
  return _internal_auth();
}
inline void MSG_REQUEST_REGISTER_INSTANCE::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
}
inline std::string* MSG_REQUEST_REGISTER_INSTANCE::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
  return _internal_mutable_auth();
}
inline const std::string& MSG_REQUEST_REGISTER_INSTANCE::_internal_auth() const {
  return auth_.GetNoArena();
}
inline void MSG_REQUEST_REGISTER_INSTANCE::_internal_set_auth(const std::string& value) {
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_REQUEST_REGISTER_INSTANCE::set_auth(std::string&& value) {
  
  auth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
}
inline void MSG_REQUEST_REGISTER_INSTANCE::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
}
inline void MSG_REQUEST_REGISTER_INSTANCE::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
}
inline std::string* MSG_REQUEST_REGISTER_INSTANCE::_internal_mutable_auth() {
  
  return auth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_REQUEST_REGISTER_INSTANCE::release_auth() {
  // @@protoc_insertion_point(field_release:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
  
  return auth_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_REQUEST_REGISTER_INSTANCE::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
}

// -------------------------------------------------------------------

// MSG_RESP_REGISTER_INSTANCE

// uint32 status_code = 1;
inline void MSG_RESP_REGISTER_INSTANCE::clear_status_code() {
  status_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RESP_REGISTER_INSTANCE::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RESP_REGISTER_INSTANCE::status_code() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_RESP_REGISTER_INSTANCE.status_code)
  return _internal_status_code();
}
inline void MSG_RESP_REGISTER_INSTANCE::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_code_ = value;
}
inline void MSG_RESP_REGISTER_INSTANCE::set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_RESP_REGISTER_INSTANCE.status_code)
}

// -------------------------------------------------------------------

// MSG_NOTICE_INSTANCE

// string id = 1;
inline void MSG_NOTICE_INSTANCE::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_NOTICE_INSTANCE::id() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.id)
  return _internal_id();
}
inline void MSG_NOTICE_INSTANCE::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_NOTICE_INSTANCE.id)
}
inline std::string* MSG_NOTICE_INSTANCE::mutable_id() {
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_NOTICE_INSTANCE.id)
  return _internal_mutable_id();
}
inline const std::string& MSG_NOTICE_INSTANCE::_internal_id() const {
  return id_.GetNoArena();
}
inline void MSG_NOTICE_INSTANCE::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_NOTICE_INSTANCE::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:service_discovery.MSG_NOTICE_INSTANCE.id)
}
inline void MSG_NOTICE_INSTANCE::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_discovery.MSG_NOTICE_INSTANCE.id)
}
inline void MSG_NOTICE_INSTANCE::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_discovery.MSG_NOTICE_INSTANCE.id)
}
inline std::string* MSG_NOTICE_INSTANCE::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_NOTICE_INSTANCE::release_id() {
  // @@protoc_insertion_point(field_release:service_discovery.MSG_NOTICE_INSTANCE.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_NOTICE_INSTANCE::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:service_discovery.MSG_NOTICE_INSTANCE.id)
}

// uint64 version = 2;
inline void MSG_NOTICE_INSTANCE::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_NOTICE_INSTANCE::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_NOTICE_INSTANCE::version() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.version)
  return _internal_version();
}
inline void MSG_NOTICE_INSTANCE::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void MSG_NOTICE_INSTANCE::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_NOTICE_INSTANCE.version)
}

// .service_discovery.RegistryStatus status = 3;
inline void MSG_NOTICE_INSTANCE::clear_status() {
  status_ = 0;
}
inline ::service_discovery::RegistryStatus MSG_NOTICE_INSTANCE::_internal_status() const {
  return static_cast< ::service_discovery::RegistryStatus >(status_);
}
inline ::service_discovery::RegistryStatus MSG_NOTICE_INSTANCE::status() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.status)
  return _internal_status();
}
inline void MSG_NOTICE_INSTANCE::_internal_set_status(::service_discovery::RegistryStatus value) {
  
  status_ = value;
}
inline void MSG_NOTICE_INSTANCE::set_status(::service_discovery::RegistryStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_NOTICE_INSTANCE.status)
}

// .service_discovery.UpdateMode mode = 4;
inline void MSG_NOTICE_INSTANCE::clear_mode() {
  mode_ = 0;
}
inline ::service_discovery::UpdateMode MSG_NOTICE_INSTANCE::_internal_mode() const {
  return static_cast< ::service_discovery::UpdateMode >(mode_);
}
inline ::service_discovery::UpdateMode MSG_NOTICE_INSTANCE::mode() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.mode)
  return _internal_mode();
}
inline void MSG_NOTICE_INSTANCE::_internal_set_mode(::service_discovery::UpdateMode value) {
  
  mode_ = value;
}
inline void MSG_NOTICE_INSTANCE::set_mode(::service_discovery::UpdateMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_NOTICE_INSTANCE.mode)
}

// repeated .service_discovery.EndPointInstance add_instance = 5;
inline int MSG_NOTICE_INSTANCE::_internal_add_instance_size() const {
  return add_instance_.size();
}
inline int MSG_NOTICE_INSTANCE::add_instance_size() const {
  return _internal_add_instance_size();
}
inline void MSG_NOTICE_INSTANCE::clear_add_instance() {
  add_instance_.Clear();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::mutable_add_instance(int index) {
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_NOTICE_INSTANCE.add_instance)
  return add_instance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
MSG_NOTICE_INSTANCE::mutable_add_instance() {
  // @@protoc_insertion_point(field_mutable_list:service_discovery.MSG_NOTICE_INSTANCE.add_instance)
  return &add_instance_;
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::_internal_add_instance(int index) const {
  return add_instance_.Get(index);
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::add_instance(int index) const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.add_instance)
  return _internal_add_instance(index);
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::_internal_add_add_instance() {
  return add_instance_.Add();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::add_add_instance() {
  // @@protoc_insertion_point(field_add:service_discovery.MSG_NOTICE_INSTANCE.add_instance)
  return _internal_add_add_instance();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
MSG_NOTICE_INSTANCE::add_instance() const {
  // @@protoc_insertion_point(field_list:service_discovery.MSG_NOTICE_INSTANCE.add_instance)
  return add_instance_;
}

// repeated .service_discovery.EndPointInstance delete_instance = 6;
inline int MSG_NOTICE_INSTANCE::_internal_delete_instance_size() const {
  return delete_instance_.size();
}
inline int MSG_NOTICE_INSTANCE::delete_instance_size() const {
  return _internal_delete_instance_size();
}
inline void MSG_NOTICE_INSTANCE::clear_delete_instance() {
  delete_instance_.Clear();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::mutable_delete_instance(int index) {
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_NOTICE_INSTANCE.delete_instance)
  return delete_instance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
MSG_NOTICE_INSTANCE::mutable_delete_instance() {
  // @@protoc_insertion_point(field_mutable_list:service_discovery.MSG_NOTICE_INSTANCE.delete_instance)
  return &delete_instance_;
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::_internal_delete_instance(int index) const {
  return delete_instance_.Get(index);
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::delete_instance(int index) const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.delete_instance)
  return _internal_delete_instance(index);
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::_internal_add_delete_instance() {
  return delete_instance_.Add();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::add_delete_instance() {
  // @@protoc_insertion_point(field_add:service_discovery.MSG_NOTICE_INSTANCE.delete_instance)
  return _internal_add_delete_instance();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
MSG_NOTICE_INSTANCE::delete_instance() const {
  // @@protoc_insertion_point(field_list:service_discovery.MSG_NOTICE_INSTANCE.delete_instance)
  return delete_instance_;
}

// repeated .service_discovery.EndPointInstance update_instance = 7;
inline int MSG_NOTICE_INSTANCE::_internal_update_instance_size() const {
  return update_instance_.size();
}
inline int MSG_NOTICE_INSTANCE::update_instance_size() const {
  return _internal_update_instance_size();
}
inline void MSG_NOTICE_INSTANCE::clear_update_instance() {
  update_instance_.Clear();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::mutable_update_instance(int index) {
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_NOTICE_INSTANCE.update_instance)
  return update_instance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
MSG_NOTICE_INSTANCE::mutable_update_instance() {
  // @@protoc_insertion_point(field_mutable_list:service_discovery.MSG_NOTICE_INSTANCE.update_instance)
  return &update_instance_;
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::_internal_update_instance(int index) const {
  return update_instance_.Get(index);
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::update_instance(int index) const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.update_instance)
  return _internal_update_instance(index);
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::_internal_add_update_instance() {
  return update_instance_.Add();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::add_update_instance() {
  // @@protoc_insertion_point(field_add:service_discovery.MSG_NOTICE_INSTANCE.update_instance)
  return _internal_add_update_instance();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
MSG_NOTICE_INSTANCE::update_instance() const {
  // @@protoc_insertion_point(field_list:service_discovery.MSG_NOTICE_INSTANCE.update_instance)
  return update_instance_;
}

// -------------------------------------------------------------------

// MSG_REQUEST_HEARTBEAT

// -------------------------------------------------------------------

// MSG_RESP_HEARTBEAT

// uint32 status_code = 1;
inline void MSG_RESP_HEARTBEAT::clear_status_code() {
  status_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RESP_HEARTBEAT::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RESP_HEARTBEAT::status_code() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_RESP_HEARTBEAT.status_code)
  return _internal_status_code();
}
inline void MSG_RESP_HEARTBEAT::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_code_ = value;
}
inline void MSG_RESP_HEARTBEAT::set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_RESP_HEARTBEAT.status_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_discovery

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_discovery::RegistryStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_discovery::RegistryStatus>() {
  return ::service_discovery::RegistryStatus_descriptor();
}
template <> struct is_proto_enum< ::service_discovery::UpdateMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_discovery::UpdateMode>() {
  return ::service_discovery::UpdateMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_5fdiscovery_2eproto
