// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route_register.proto

#include "route_register.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_route_5fregister_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteInstance_route_5fregister_2eproto;
namespace route_register {
class RouteInstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteInstance> _instance;
} _RouteInstance_default_instance_;
class MSG_REQUEST_ADD_ROUTEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_REQUEST_ADD_ROUTE> _instance;
} _MSG_REQUEST_ADD_ROUTE_default_instance_;
class MSG_RESP_ADD_ROUTEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RESP_ADD_ROUTE> _instance;
} _MSG_RESP_ADD_ROUTE_default_instance_;
class MSG_REQUEST_HEARTBEATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_REQUEST_HEARTBEAT> _instance;
} _MSG_REQUEST_HEARTBEAT_default_instance_;
class MSG_RESP_HEARTBEATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RESP_HEARTBEAT> _instance;
} _MSG_RESP_HEARTBEAT_default_instance_;
}  // namespace route_register
static void InitDefaultsscc_info_MSG_REQUEST_ADD_ROUTE_route_5fregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::route_register::_MSG_REQUEST_ADD_ROUTE_default_instance_;
    new (ptr) ::route_register::MSG_REQUEST_ADD_ROUTE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::route_register::MSG_REQUEST_ADD_ROUTE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_REQUEST_ADD_ROUTE_route_5fregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_REQUEST_ADD_ROUTE_route_5fregister_2eproto}, {
      &scc_info_RouteInstance_route_5fregister_2eproto.base,}};

static void InitDefaultsscc_info_MSG_REQUEST_HEARTBEAT_route_5fregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::route_register::_MSG_REQUEST_HEARTBEAT_default_instance_;
    new (ptr) ::route_register::MSG_REQUEST_HEARTBEAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::route_register::MSG_REQUEST_HEARTBEAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_REQUEST_HEARTBEAT_route_5fregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_REQUEST_HEARTBEAT_route_5fregister_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RESP_ADD_ROUTE_route_5fregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::route_register::_MSG_RESP_ADD_ROUTE_default_instance_;
    new (ptr) ::route_register::MSG_RESP_ADD_ROUTE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::route_register::MSG_RESP_ADD_ROUTE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RESP_ADD_ROUTE_route_5fregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RESP_ADD_ROUTE_route_5fregister_2eproto}, {
      &scc_info_RouteInstance_route_5fregister_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RESP_HEARTBEAT_route_5fregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::route_register::_MSG_RESP_HEARTBEAT_default_instance_;
    new (ptr) ::route_register::MSG_RESP_HEARTBEAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::route_register::MSG_RESP_HEARTBEAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RESP_HEARTBEAT_route_5fregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RESP_HEARTBEAT_route_5fregister_2eproto}, {}};

static void InitDefaultsscc_info_RouteInstance_route_5fregister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::route_register::_RouteInstance_default_instance_;
    new (ptr) ::route_register::RouteInstance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::route_register::RouteInstance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteInstance_route_5fregister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteInstance_route_5fregister_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_route_5fregister_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_route_5fregister_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_route_5fregister_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_route_5fregister_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_register::RouteInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::route_register::RouteInstance, realm_),
  PROTOBUF_FIELD_OFFSET(::route_register::RouteInstance, type_),
  PROTOBUF_FIELD_OFFSET(::route_register::RouteInstance, id_),
  PROTOBUF_FIELD_OFFSET(::route_register::RouteInstance, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_register::MSG_REQUEST_ADD_ROUTE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::route_register::MSG_REQUEST_ADD_ROUTE, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_register::MSG_RESP_ADD_ROUTE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::route_register::MSG_RESP_ADD_ROUTE, target_),
  PROTOBUF_FIELD_OFFSET(::route_register::MSG_RESP_ADD_ROUTE, route_),
  PROTOBUF_FIELD_OFFSET(::route_register::MSG_RESP_ADD_ROUTE, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_register::MSG_REQUEST_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_register::MSG_RESP_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::route_register::MSG_RESP_HEARTBEAT, status_code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::route_register::RouteInstance)},
  { 9, -1, sizeof(::route_register::MSG_REQUEST_ADD_ROUTE)},
  { 15, -1, sizeof(::route_register::MSG_RESP_ADD_ROUTE)},
  { 23, -1, sizeof(::route_register::MSG_REQUEST_HEARTBEAT)},
  { 28, -1, sizeof(::route_register::MSG_RESP_HEARTBEAT)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_register::_RouteInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_register::_MSG_REQUEST_ADD_ROUTE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_register::_MSG_RESP_ADD_ROUTE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_register::_MSG_REQUEST_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_register::_MSG_RESP_HEARTBEAT_default_instance_),
};

const char descriptor_table_protodef_route_5fregister_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024route_register.proto\022\016route_register\032\014"
  "common.proto\"\\\n\rRouteInstance\022\r\n\005realm\030\001"
  " \001(\r\022\"\n\004type\030\002 \001(\0162\024.common.EndPointType"
  "\022\n\n\002id\030\003 \001(\r\022\014\n\004auth\030\004 \001(\t\"H\n\025MSG_REQUES"
  "T_ADD_ROUTE\022/\n\010instance\030\001 \001(\0132\035.route_re"
  "gister.RouteInstance\"\206\001\n\022MSG_RESP_ADD_RO"
  "UTE\022-\n\006target\030\001 \001(\0132\035.route_register.Rou"
  "teInstance\022,\n\005route\030\002 \001(\0132\035.route_regist"
  "er.RouteInstance\022\023\n\013status_code\030\003 \001(\r\"\027\n"
  "\025MSG_REQUEST_HEARTBEAT\")\n\022MSG_RESP_HEART"
  "BEAT\022\023\n\013status_code\030\001 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_route_5fregister_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_route_5fregister_2eproto_sccs[5] = {
  &scc_info_MSG_REQUEST_ADD_ROUTE_route_5fregister_2eproto.base,
  &scc_info_MSG_REQUEST_HEARTBEAT_route_5fregister_2eproto.base,
  &scc_info_MSG_RESP_ADD_ROUTE_route_5fregister_2eproto.base,
  &scc_info_MSG_RESP_HEARTBEAT_route_5fregister_2eproto.base,
  &scc_info_RouteInstance_route_5fregister_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_route_5fregister_2eproto_once;
static bool descriptor_table_route_5fregister_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_route_5fregister_2eproto = {
  &descriptor_table_route_5fregister_2eproto_initialized, descriptor_table_protodef_route_5fregister_2eproto, "route_register.proto", 433,
  &descriptor_table_route_5fregister_2eproto_once, descriptor_table_route_5fregister_2eproto_sccs, descriptor_table_route_5fregister_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_route_5fregister_2eproto::offsets,
  file_level_metadata_route_5fregister_2eproto, 5, file_level_enum_descriptors_route_5fregister_2eproto, file_level_service_descriptors_route_5fregister_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_route_5fregister_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_route_5fregister_2eproto), true);
namespace route_register {

// ===================================================================

void RouteInstance::InitAsDefaultInstance() {
}
class RouteInstance::_Internal {
 public:
};

RouteInstance::RouteInstance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:route_register.RouteInstance)
}
RouteInstance::RouteInstance(const RouteInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth().empty()) {
    auth_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  ::memcpy(&realm_, &from.realm_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&realm_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:route_register.RouteInstance)
}

void RouteInstance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteInstance_route_5fregister_2eproto.base);
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&realm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&realm_)) + sizeof(id_));
}

RouteInstance::~RouteInstance() {
  // @@protoc_insertion_point(destructor:route_register.RouteInstance)
  SharedDtor();
}

void RouteInstance::SharedDtor() {
  auth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouteInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteInstance& RouteInstance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteInstance_route_5fregister_2eproto.base);
  return *internal_default_instance();
}


void RouteInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:route_register.RouteInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&realm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&realm_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* RouteInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 realm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          realm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.EndPointType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::common::EndPointType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_auth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "route_register.RouteInstance.auth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_register.RouteInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 realm = 1;
  if (this->realm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_realm(), target);
  }

  // .common.EndPointType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  // string auth = 4;
  if (this->auth().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth().data(), static_cast<int>(this->_internal_auth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "route_register.RouteInstance.auth");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_register.RouteInstance)
  return target;
}

size_t RouteInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_register.RouteInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth = 4;
  if (this->auth().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth());
  }

  // uint32 realm = 1;
  if (this->realm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_realm());
  }

  // .common.EndPointType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:route_register.RouteInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:route_register.RouteInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:route_register.RouteInstance)
    MergeFrom(*source);
  }
}

void RouteInstance::MergeFrom(const RouteInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_register.RouteInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth().size() > 0) {

    auth_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  if (from.realm() != 0) {
    _internal_set_realm(from._internal_realm());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RouteInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:route_register.RouteInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteInstance::CopyFrom(const RouteInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_register.RouteInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInstance::IsInitialized() const {
  return true;
}

void RouteInstance::InternalSwap(RouteInstance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  auth_.Swap(&other->auth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(realm_, other->realm_);
  swap(type_, other->type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_REQUEST_ADD_ROUTE::InitAsDefaultInstance() {
  ::route_register::_MSG_REQUEST_ADD_ROUTE_default_instance_._instance.get_mutable()->instance_ = const_cast< ::route_register::RouteInstance*>(
      ::route_register::RouteInstance::internal_default_instance());
}
class MSG_REQUEST_ADD_ROUTE::_Internal {
 public:
  static const ::route_register::RouteInstance& instance(const MSG_REQUEST_ADD_ROUTE* msg);
};

const ::route_register::RouteInstance&
MSG_REQUEST_ADD_ROUTE::_Internal::instance(const MSG_REQUEST_ADD_ROUTE* msg) {
  return *msg->instance_;
}
MSG_REQUEST_ADD_ROUTE::MSG_REQUEST_ADD_ROUTE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:route_register.MSG_REQUEST_ADD_ROUTE)
}
MSG_REQUEST_ADD_ROUTE::MSG_REQUEST_ADD_ROUTE(const MSG_REQUEST_ADD_ROUTE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_instance()) {
    instance_ = new ::route_register::RouteInstance(*from.instance_);
  } else {
    instance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:route_register.MSG_REQUEST_ADD_ROUTE)
}

void MSG_REQUEST_ADD_ROUTE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_REQUEST_ADD_ROUTE_route_5fregister_2eproto.base);
  instance_ = nullptr;
}

MSG_REQUEST_ADD_ROUTE::~MSG_REQUEST_ADD_ROUTE() {
  // @@protoc_insertion_point(destructor:route_register.MSG_REQUEST_ADD_ROUTE)
  SharedDtor();
}

void MSG_REQUEST_ADD_ROUTE::SharedDtor() {
  if (this != internal_default_instance()) delete instance_;
}

void MSG_REQUEST_ADD_ROUTE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_REQUEST_ADD_ROUTE& MSG_REQUEST_ADD_ROUTE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_REQUEST_ADD_ROUTE_route_5fregister_2eproto.base);
  return *internal_default_instance();
}


void MSG_REQUEST_ADD_ROUTE::Clear() {
// @@protoc_insertion_point(message_clear_start:route_register.MSG_REQUEST_ADD_ROUTE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && instance_ != nullptr) {
    delete instance_;
  }
  instance_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MSG_REQUEST_ADD_ROUTE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .route_register.RouteInstance instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_REQUEST_ADD_ROUTE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_register.MSG_REQUEST_ADD_ROUTE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_register.RouteInstance instance = 1;
  if (this->has_instance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_register.MSG_REQUEST_ADD_ROUTE)
  return target;
}

size_t MSG_REQUEST_ADD_ROUTE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_register.MSG_REQUEST_ADD_ROUTE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_register.RouteInstance instance = 1;
  if (this->has_instance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_REQUEST_ADD_ROUTE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:route_register.MSG_REQUEST_ADD_ROUTE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_REQUEST_ADD_ROUTE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_REQUEST_ADD_ROUTE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:route_register.MSG_REQUEST_ADD_ROUTE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:route_register.MSG_REQUEST_ADD_ROUTE)
    MergeFrom(*source);
  }
}

void MSG_REQUEST_ADD_ROUTE::MergeFrom(const MSG_REQUEST_ADD_ROUTE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_register.MSG_REQUEST_ADD_ROUTE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_instance()) {
    _internal_mutable_instance()->::route_register::RouteInstance::MergeFrom(from._internal_instance());
  }
}

void MSG_REQUEST_ADD_ROUTE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:route_register.MSG_REQUEST_ADD_ROUTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_REQUEST_ADD_ROUTE::CopyFrom(const MSG_REQUEST_ADD_ROUTE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_register.MSG_REQUEST_ADD_ROUTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_REQUEST_ADD_ROUTE::IsInitialized() const {
  return true;
}

void MSG_REQUEST_ADD_ROUTE::InternalSwap(MSG_REQUEST_ADD_ROUTE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(instance_, other->instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_REQUEST_ADD_ROUTE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RESP_ADD_ROUTE::InitAsDefaultInstance() {
  ::route_register::_MSG_RESP_ADD_ROUTE_default_instance_._instance.get_mutable()->target_ = const_cast< ::route_register::RouteInstance*>(
      ::route_register::RouteInstance::internal_default_instance());
  ::route_register::_MSG_RESP_ADD_ROUTE_default_instance_._instance.get_mutable()->route_ = const_cast< ::route_register::RouteInstance*>(
      ::route_register::RouteInstance::internal_default_instance());
}
class MSG_RESP_ADD_ROUTE::_Internal {
 public:
  static const ::route_register::RouteInstance& target(const MSG_RESP_ADD_ROUTE* msg);
  static const ::route_register::RouteInstance& route(const MSG_RESP_ADD_ROUTE* msg);
};

const ::route_register::RouteInstance&
MSG_RESP_ADD_ROUTE::_Internal::target(const MSG_RESP_ADD_ROUTE* msg) {
  return *msg->target_;
}
const ::route_register::RouteInstance&
MSG_RESP_ADD_ROUTE::_Internal::route(const MSG_RESP_ADD_ROUTE* msg) {
  return *msg->route_;
}
MSG_RESP_ADD_ROUTE::MSG_RESP_ADD_ROUTE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:route_register.MSG_RESP_ADD_ROUTE)
}
MSG_RESP_ADD_ROUTE::MSG_RESP_ADD_ROUTE(const MSG_RESP_ADD_ROUTE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::route_register::RouteInstance(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from._internal_has_route()) {
    route_ = new ::route_register::RouteInstance(*from.route_);
  } else {
    route_ = nullptr;
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:route_register.MSG_RESP_ADD_ROUTE)
}

void MSG_RESP_ADD_ROUTE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RESP_ADD_ROUTE_route_5fregister_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&target_)) + sizeof(status_code_));
}

MSG_RESP_ADD_ROUTE::~MSG_RESP_ADD_ROUTE() {
  // @@protoc_insertion_point(destructor:route_register.MSG_RESP_ADD_ROUTE)
  SharedDtor();
}

void MSG_RESP_ADD_ROUTE::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete route_;
}

void MSG_RESP_ADD_ROUTE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RESP_ADD_ROUTE& MSG_RESP_ADD_ROUTE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RESP_ADD_ROUTE_route_5fregister_2eproto.base);
  return *internal_default_instance();
}


void MSG_RESP_ADD_ROUTE::Clear() {
// @@protoc_insertion_point(message_clear_start:route_register.MSG_RESP_ADD_ROUTE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  status_code_ = 0u;
  _internal_metadata_.Clear();
}

const char* MSG_RESP_ADD_ROUTE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .route_register.RouteInstance target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .route_register.RouteInstance route = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RESP_ADD_ROUTE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_register.MSG_RESP_ADD_ROUTE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_register.RouteInstance target = 1;
  if (this->has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // .route_register.RouteInstance route = 2;
  if (this->has_route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::route(this), target, stream);
  }

  // uint32 status_code = 3;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_register.MSG_RESP_ADD_ROUTE)
  return target;
}

size_t MSG_RESP_ADD_ROUTE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_register.MSG_RESP_ADD_ROUTE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_register.RouteInstance target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .route_register.RouteInstance route = 2;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  // uint32 status_code = 3;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RESP_ADD_ROUTE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:route_register.MSG_RESP_ADD_ROUTE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RESP_ADD_ROUTE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RESP_ADD_ROUTE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:route_register.MSG_RESP_ADD_ROUTE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:route_register.MSG_RESP_ADD_ROUTE)
    MergeFrom(*source);
  }
}

void MSG_RESP_ADD_ROUTE::MergeFrom(const MSG_RESP_ADD_ROUTE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_register.MSG_RESP_ADD_ROUTE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    _internal_mutable_target()->::route_register::RouteInstance::MergeFrom(from._internal_target());
  }
  if (from.has_route()) {
    _internal_mutable_route()->::route_register::RouteInstance::MergeFrom(from._internal_route());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void MSG_RESP_ADD_ROUTE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:route_register.MSG_RESP_ADD_ROUTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RESP_ADD_ROUTE::CopyFrom(const MSG_RESP_ADD_ROUTE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_register.MSG_RESP_ADD_ROUTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RESP_ADD_ROUTE::IsInitialized() const {
  return true;
}

void MSG_RESP_ADD_ROUTE::InternalSwap(MSG_RESP_ADD_ROUTE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(route_, other->route_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RESP_ADD_ROUTE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_REQUEST_HEARTBEAT::InitAsDefaultInstance() {
}
class MSG_REQUEST_HEARTBEAT::_Internal {
 public:
};

MSG_REQUEST_HEARTBEAT::MSG_REQUEST_HEARTBEAT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:route_register.MSG_REQUEST_HEARTBEAT)
}
MSG_REQUEST_HEARTBEAT::MSG_REQUEST_HEARTBEAT(const MSG_REQUEST_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:route_register.MSG_REQUEST_HEARTBEAT)
}

void MSG_REQUEST_HEARTBEAT::SharedCtor() {
}

MSG_REQUEST_HEARTBEAT::~MSG_REQUEST_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:route_register.MSG_REQUEST_HEARTBEAT)
  SharedDtor();
}

void MSG_REQUEST_HEARTBEAT::SharedDtor() {
}

void MSG_REQUEST_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_REQUEST_HEARTBEAT& MSG_REQUEST_HEARTBEAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_REQUEST_HEARTBEAT_route_5fregister_2eproto.base);
  return *internal_default_instance();
}


void MSG_REQUEST_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:route_register.MSG_REQUEST_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MSG_REQUEST_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_REQUEST_HEARTBEAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_register.MSG_REQUEST_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_register.MSG_REQUEST_HEARTBEAT)
  return target;
}

size_t MSG_REQUEST_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_register.MSG_REQUEST_HEARTBEAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_REQUEST_HEARTBEAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:route_register.MSG_REQUEST_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_REQUEST_HEARTBEAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_REQUEST_HEARTBEAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:route_register.MSG_REQUEST_HEARTBEAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:route_register.MSG_REQUEST_HEARTBEAT)
    MergeFrom(*source);
  }
}

void MSG_REQUEST_HEARTBEAT::MergeFrom(const MSG_REQUEST_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_register.MSG_REQUEST_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_REQUEST_HEARTBEAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:route_register.MSG_REQUEST_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_REQUEST_HEARTBEAT::CopyFrom(const MSG_REQUEST_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_register.MSG_REQUEST_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_REQUEST_HEARTBEAT::IsInitialized() const {
  return true;
}

void MSG_REQUEST_HEARTBEAT::InternalSwap(MSG_REQUEST_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_REQUEST_HEARTBEAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RESP_HEARTBEAT::InitAsDefaultInstance() {
}
class MSG_RESP_HEARTBEAT::_Internal {
 public:
};

MSG_RESP_HEARTBEAT::MSG_RESP_HEARTBEAT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:route_register.MSG_RESP_HEARTBEAT)
}
MSG_RESP_HEARTBEAT::MSG_RESP_HEARTBEAT(const MSG_RESP_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:route_register.MSG_RESP_HEARTBEAT)
}

void MSG_RESP_HEARTBEAT::SharedCtor() {
  status_code_ = 0u;
}

MSG_RESP_HEARTBEAT::~MSG_RESP_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:route_register.MSG_RESP_HEARTBEAT)
  SharedDtor();
}

void MSG_RESP_HEARTBEAT::SharedDtor() {
}

void MSG_RESP_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RESP_HEARTBEAT& MSG_RESP_HEARTBEAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RESP_HEARTBEAT_route_5fregister_2eproto.base);
  return *internal_default_instance();
}


void MSG_RESP_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:route_register.MSG_RESP_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_ = 0u;
  _internal_metadata_.Clear();
}

const char* MSG_RESP_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RESP_HEARTBEAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_register.MSG_RESP_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status_code = 1;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_register.MSG_RESP_HEARTBEAT)
  return target;
}

size_t MSG_RESP_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_register.MSG_RESP_HEARTBEAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RESP_HEARTBEAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:route_register.MSG_RESP_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RESP_HEARTBEAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RESP_HEARTBEAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:route_register.MSG_RESP_HEARTBEAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:route_register.MSG_RESP_HEARTBEAT)
    MergeFrom(*source);
  }
}

void MSG_RESP_HEARTBEAT::MergeFrom(const MSG_RESP_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_register.MSG_RESP_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void MSG_RESP_HEARTBEAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:route_register.MSG_RESP_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RESP_HEARTBEAT::CopyFrom(const MSG_RESP_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_register.MSG_RESP_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RESP_HEARTBEAT::IsInitialized() const {
  return true;
}

void MSG_RESP_HEARTBEAT::InternalSwap(MSG_RESP_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RESP_HEARTBEAT::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace route_register
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::route_register::RouteInstance* Arena::CreateMaybeMessage< ::route_register::RouteInstance >(Arena* arena) {
  return Arena::CreateInternal< ::route_register::RouteInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::route_register::MSG_REQUEST_ADD_ROUTE* Arena::CreateMaybeMessage< ::route_register::MSG_REQUEST_ADD_ROUTE >(Arena* arena) {
  return Arena::CreateInternal< ::route_register::MSG_REQUEST_ADD_ROUTE >(arena);
}
template<> PROTOBUF_NOINLINE ::route_register::MSG_RESP_ADD_ROUTE* Arena::CreateMaybeMessage< ::route_register::MSG_RESP_ADD_ROUTE >(Arena* arena) {
  return Arena::CreateInternal< ::route_register::MSG_RESP_ADD_ROUTE >(arena);
}
template<> PROTOBUF_NOINLINE ::route_register::MSG_REQUEST_HEARTBEAT* Arena::CreateMaybeMessage< ::route_register::MSG_REQUEST_HEARTBEAT >(Arena* arena) {
  return Arena::CreateInternal< ::route_register::MSG_REQUEST_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::route_register::MSG_RESP_HEARTBEAT* Arena::CreateMaybeMessage< ::route_register::MSG_RESP_HEARTBEAT >(Arena* arena) {
  return Arena::CreateInternal< ::route_register::MSG_RESP_HEARTBEAT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
