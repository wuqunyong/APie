// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_5fmsg_2eproto;
namespace login_msg {
class MSG_LOGINSERVER_VALIDATE;
class MSG_LOGINSERVER_VALIDATEDefaultTypeInternal;
extern MSG_LOGINSERVER_VALIDATEDefaultTypeInternal _MSG_LOGINSERVER_VALIDATE_default_instance_;
class MSG_REQUEST_CLIENT_LOGIN;
class MSG_REQUEST_CLIENT_LOGINDefaultTypeInternal;
extern MSG_REQUEST_CLIENT_LOGINDefaultTypeInternal _MSG_REQUEST_CLIENT_LOGIN_default_instance_;
class MSG_RESPONSE_CLIENT_LOGIN;
class MSG_RESPONSE_CLIENT_LOGINDefaultTypeInternal;
extern MSG_RESPONSE_CLIENT_LOGINDefaultTypeInternal _MSG_RESPONSE_CLIENT_LOGIN_default_instance_;
class MSG_Test1;
class MSG_Test1DefaultTypeInternal;
extern MSG_Test1DefaultTypeInternal _MSG_Test1_default_instance_;
class MSG_Test2;
class MSG_Test2DefaultTypeInternal;
extern MSG_Test2DefaultTypeInternal _MSG_Test2_default_instance_;
class MSG_Test3;
class MSG_Test3DefaultTypeInternal;
extern MSG_Test3DefaultTypeInternal _MSG_Test3_default_instance_;
class MSG_Test4;
class MSG_Test4DefaultTypeInternal;
extern MSG_Test4DefaultTypeInternal _MSG_Test4_default_instance_;
class MSG_Test5;
class MSG_Test5DefaultTypeInternal;
extern MSG_Test5DefaultTypeInternal _MSG_Test5_default_instance_;
}  // namespace login_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::login_msg::MSG_LOGINSERVER_VALIDATE* Arena::CreateMaybeMessage<::login_msg::MSG_LOGINSERVER_VALIDATE>(Arena*);
template<> ::login_msg::MSG_REQUEST_CLIENT_LOGIN* Arena::CreateMaybeMessage<::login_msg::MSG_REQUEST_CLIENT_LOGIN>(Arena*);
template<> ::login_msg::MSG_RESPONSE_CLIENT_LOGIN* Arena::CreateMaybeMessage<::login_msg::MSG_RESPONSE_CLIENT_LOGIN>(Arena*);
template<> ::login_msg::MSG_Test1* Arena::CreateMaybeMessage<::login_msg::MSG_Test1>(Arena*);
template<> ::login_msg::MSG_Test2* Arena::CreateMaybeMessage<::login_msg::MSG_Test2>(Arena*);
template<> ::login_msg::MSG_Test3* Arena::CreateMaybeMessage<::login_msg::MSG_Test3>(Arena*);
template<> ::login_msg::MSG_Test4* Arena::CreateMaybeMessage<::login_msg::MSG_Test4>(Arena*);
template<> ::login_msg::MSG_Test5* Arena::CreateMaybeMessage<::login_msg::MSG_Test5>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace login_msg {

// ===================================================================

class MSG_REQUEST_CLIENT_LOGIN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_REQUEST_CLIENT_LOGIN) */ {
 public:
  MSG_REQUEST_CLIENT_LOGIN();
  virtual ~MSG_REQUEST_CLIENT_LOGIN();

  MSG_REQUEST_CLIENT_LOGIN(const MSG_REQUEST_CLIENT_LOGIN& from);
  MSG_REQUEST_CLIENT_LOGIN(MSG_REQUEST_CLIENT_LOGIN&& from) noexcept
    : MSG_REQUEST_CLIENT_LOGIN() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_CLIENT_LOGIN& operator=(const MSG_REQUEST_CLIENT_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_CLIENT_LOGIN& operator=(MSG_REQUEST_CLIENT_LOGIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_REQUEST_CLIENT_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_REQUEST_CLIENT_LOGIN* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_CLIENT_LOGIN*>(
               &_MSG_REQUEST_CLIENT_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_REQUEST_CLIENT_LOGIN& a, MSG_REQUEST_CLIENT_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_CLIENT_LOGIN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_REQUEST_CLIENT_LOGIN* New() const final {
    return CreateMaybeMessage<MSG_REQUEST_CLIENT_LOGIN>(nullptr);
  }

  MSG_REQUEST_CLIENT_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_REQUEST_CLIENT_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_REQUEST_CLIENT_LOGIN& from);
  void MergeFrom(const MSG_REQUEST_CLIENT_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_REQUEST_CLIENT_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_REQUEST_CLIENT_LOGIN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // bytes session_key = 3;
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const void* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_REQUEST_CLIENT_LOGIN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESPONSE_CLIENT_LOGIN :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_RESPONSE_CLIENT_LOGIN) */ {
 public:
  MSG_RESPONSE_CLIENT_LOGIN();
  virtual ~MSG_RESPONSE_CLIENT_LOGIN();

  MSG_RESPONSE_CLIENT_LOGIN(const MSG_RESPONSE_CLIENT_LOGIN& from);
  MSG_RESPONSE_CLIENT_LOGIN(MSG_RESPONSE_CLIENT_LOGIN&& from) noexcept
    : MSG_RESPONSE_CLIENT_LOGIN() {
    *this = ::std::move(from);
  }

  inline MSG_RESPONSE_CLIENT_LOGIN& operator=(const MSG_RESPONSE_CLIENT_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESPONSE_CLIENT_LOGIN& operator=(MSG_RESPONSE_CLIENT_LOGIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RESPONSE_CLIENT_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RESPONSE_CLIENT_LOGIN* internal_default_instance() {
    return reinterpret_cast<const MSG_RESPONSE_CLIENT_LOGIN*>(
               &_MSG_RESPONSE_CLIENT_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_RESPONSE_CLIENT_LOGIN& a, MSG_RESPONSE_CLIENT_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESPONSE_CLIENT_LOGIN* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RESPONSE_CLIENT_LOGIN* New() const final {
    return CreateMaybeMessage<MSG_RESPONSE_CLIENT_LOGIN>(nullptr);
  }

  MSG_RESPONSE_CLIENT_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RESPONSE_CLIENT_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RESPONSE_CLIENT_LOGIN& from);
  void MergeFrom(const MSG_RESPONSE_CLIENT_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESPONSE_CLIENT_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_RESPONSE_CLIENT_LOGIN";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
    kVersionFieldNumber = 3,
    kIsNewbieFieldNumber = 4,
  };
  // uint64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_newbie = 4;
  void clear_is_newbie();
  bool is_newbie() const;
  void set_is_newbie(bool value);
  private:
  bool _internal_is_newbie() const;
  void _internal_set_is_newbie(bool value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  bool is_newbie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_LOGINSERVER_VALIDATE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_LOGINSERVER_VALIDATE) */ {
 public:
  MSG_LOGINSERVER_VALIDATE();
  virtual ~MSG_LOGINSERVER_VALIDATE();

  MSG_LOGINSERVER_VALIDATE(const MSG_LOGINSERVER_VALIDATE& from);
  MSG_LOGINSERVER_VALIDATE(MSG_LOGINSERVER_VALIDATE&& from) noexcept
    : MSG_LOGINSERVER_VALIDATE() {
    *this = ::std::move(from);
  }

  inline MSG_LOGINSERVER_VALIDATE& operator=(const MSG_LOGINSERVER_VALIDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_LOGINSERVER_VALIDATE& operator=(MSG_LOGINSERVER_VALIDATE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_LOGINSERVER_VALIDATE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_LOGINSERVER_VALIDATE* internal_default_instance() {
    return reinterpret_cast<const MSG_LOGINSERVER_VALIDATE*>(
               &_MSG_LOGINSERVER_VALIDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_LOGINSERVER_VALIDATE& a, MSG_LOGINSERVER_VALIDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_LOGINSERVER_VALIDATE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_LOGINSERVER_VALIDATE* New() const final {
    return CreateMaybeMessage<MSG_LOGINSERVER_VALIDATE>(nullptr);
  }

  MSG_LOGINSERVER_VALIDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_LOGINSERVER_VALIDATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_LOGINSERVER_VALIDATE& from);
  void MergeFrom(const MSG_LOGINSERVER_VALIDATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_LOGINSERVER_VALIDATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_LOGINSERVER_VALIDATE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 4,
    kCheckOutTextFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kPortFieldNumber = 2,
    kIsRealNameFlagFieldNumber = 3,
  };
  // string ip = 4;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bytes check_out_text = 5;
  void clear_check_out_text();
  const std::string& check_out_text() const;
  void set_check_out_text(const std::string& value);
  void set_check_out_text(std::string&& value);
  void set_check_out_text(const char* value);
  void set_check_out_text(const void* value, size_t size);
  std::string* mutable_check_out_text();
  std::string* release_check_out_text();
  void set_allocated_check_out_text(std::string* check_out_text);
  private:
  const std::string& _internal_check_out_text() const;
  void _internal_set_check_out_text(const std::string& value);
  std::string* _internal_mutable_check_out_text();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_real_name_flag = 3;
  void clear_is_real_name_flag();
  bool is_real_name_flag() const;
  void set_is_real_name_flag(bool value);
  private:
  bool _internal_is_real_name_flag() const;
  void _internal_set_is_real_name_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_LOGINSERVER_VALIDATE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_out_text_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  bool is_real_name_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Test1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_Test1) */ {
 public:
  MSG_Test1();
  virtual ~MSG_Test1();

  MSG_Test1(const MSG_Test1& from);
  MSG_Test1(MSG_Test1&& from) noexcept
    : MSG_Test1() {
    *this = ::std::move(from);
  }

  inline MSG_Test1& operator=(const MSG_Test1& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Test1& operator=(MSG_Test1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Test1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Test1* internal_default_instance() {
    return reinterpret_cast<const MSG_Test1*>(
               &_MSG_Test1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_Test1& a, MSG_Test1& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Test1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Test1* New() const final {
    return CreateMaybeMessage<MSG_Test1>(nullptr);
  }

  MSG_Test1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Test1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Test1& from);
  void MergeFrom(const MSG_Test1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Test1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_Test1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTest1StrFieldNumber = 2,
    kId1FieldNumber = 1,
  };
  // string test1_str = 2;
  void clear_test1_str();
  const std::string& test1_str() const;
  void set_test1_str(const std::string& value);
  void set_test1_str(std::string&& value);
  void set_test1_str(const char* value);
  void set_test1_str(const char* value, size_t size);
  std::string* mutable_test1_str();
  std::string* release_test1_str();
  void set_allocated_test1_str(std::string* test1_str);
  private:
  const std::string& _internal_test1_str() const;
  void _internal_set_test1_str(const std::string& value);
  std::string* _internal_mutable_test1_str();
  public:

  // uint64 id1 = 1;
  void clear_id1();
  ::PROTOBUF_NAMESPACE_ID::uint64 id1() const;
  void set_id1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id1() const;
  void _internal_set_id1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_Test1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test1_str_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Test2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_Test2) */ {
 public:
  MSG_Test2();
  virtual ~MSG_Test2();

  MSG_Test2(const MSG_Test2& from);
  MSG_Test2(MSG_Test2&& from) noexcept
    : MSG_Test2() {
    *this = ::std::move(from);
  }

  inline MSG_Test2& operator=(const MSG_Test2& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Test2& operator=(MSG_Test2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Test2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Test2* internal_default_instance() {
    return reinterpret_cast<const MSG_Test2*>(
               &_MSG_Test2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_Test2& a, MSG_Test2& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Test2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Test2* New() const final {
    return CreateMaybeMessage<MSG_Test2>(nullptr);
  }

  MSG_Test2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Test2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Test2& from);
  void MergeFrom(const MSG_Test2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Test2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_Test2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTest2StrFieldNumber = 2,
    kId2FieldNumber = 1,
  };
  // string test2_str = 2;
  void clear_test2_str();
  const std::string& test2_str() const;
  void set_test2_str(const std::string& value);
  void set_test2_str(std::string&& value);
  void set_test2_str(const char* value);
  void set_test2_str(const char* value, size_t size);
  std::string* mutable_test2_str();
  std::string* release_test2_str();
  void set_allocated_test2_str(std::string* test2_str);
  private:
  const std::string& _internal_test2_str() const;
  void _internal_set_test2_str(const std::string& value);
  std::string* _internal_mutable_test2_str();
  public:

  // uint64 id2 = 1;
  void clear_id2();
  ::PROTOBUF_NAMESPACE_ID::uint64 id2() const;
  void set_id2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id2() const;
  void _internal_set_id2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_Test2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test2_str_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Test3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_Test3) */ {
 public:
  MSG_Test3();
  virtual ~MSG_Test3();

  MSG_Test3(const MSG_Test3& from);
  MSG_Test3(MSG_Test3&& from) noexcept
    : MSG_Test3() {
    *this = ::std::move(from);
  }

  inline MSG_Test3& operator=(const MSG_Test3& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Test3& operator=(MSG_Test3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Test3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Test3* internal_default_instance() {
    return reinterpret_cast<const MSG_Test3*>(
               &_MSG_Test3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_Test3& a, MSG_Test3& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Test3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Test3* New() const final {
    return CreateMaybeMessage<MSG_Test3>(nullptr);
  }

  MSG_Test3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Test3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Test3& from);
  void MergeFrom(const MSG_Test3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Test3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_Test3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTest3StrFieldNumber = 2,
    kId3FieldNumber = 1,
  };
  // string test3_str = 2;
  void clear_test3_str();
  const std::string& test3_str() const;
  void set_test3_str(const std::string& value);
  void set_test3_str(std::string&& value);
  void set_test3_str(const char* value);
  void set_test3_str(const char* value, size_t size);
  std::string* mutable_test3_str();
  std::string* release_test3_str();
  void set_allocated_test3_str(std::string* test3_str);
  private:
  const std::string& _internal_test3_str() const;
  void _internal_set_test3_str(const std::string& value);
  std::string* _internal_mutable_test3_str();
  public:

  // uint64 id3 = 1;
  void clear_id3();
  ::PROTOBUF_NAMESPACE_ID::uint64 id3() const;
  void set_id3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id3() const;
  void _internal_set_id3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_Test3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test3_str_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Test4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_Test4) */ {
 public:
  MSG_Test4();
  virtual ~MSG_Test4();

  MSG_Test4(const MSG_Test4& from);
  MSG_Test4(MSG_Test4&& from) noexcept
    : MSG_Test4() {
    *this = ::std::move(from);
  }

  inline MSG_Test4& operator=(const MSG_Test4& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Test4& operator=(MSG_Test4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Test4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Test4* internal_default_instance() {
    return reinterpret_cast<const MSG_Test4*>(
               &_MSG_Test4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_Test4& a, MSG_Test4& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Test4* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Test4* New() const final {
    return CreateMaybeMessage<MSG_Test4>(nullptr);
  }

  MSG_Test4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Test4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Test4& from);
  void MergeFrom(const MSG_Test4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Test4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_Test4";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTest4StrFieldNumber = 2,
    kId4FieldNumber = 1,
  };
  // string test4_str = 2;
  void clear_test4_str();
  const std::string& test4_str() const;
  void set_test4_str(const std::string& value);
  void set_test4_str(std::string&& value);
  void set_test4_str(const char* value);
  void set_test4_str(const char* value, size_t size);
  std::string* mutable_test4_str();
  std::string* release_test4_str();
  void set_allocated_test4_str(std::string* test4_str);
  private:
  const std::string& _internal_test4_str() const;
  void _internal_set_test4_str(const std::string& value);
  std::string* _internal_mutable_test4_str();
  public:

  // uint64 id4 = 1;
  void clear_id4();
  ::PROTOBUF_NAMESPACE_ID::uint64 id4() const;
  void set_id4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id4() const;
  void _internal_set_id4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_Test4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test4_str_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Test5 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.MSG_Test5) */ {
 public:
  MSG_Test5();
  virtual ~MSG_Test5();

  MSG_Test5(const MSG_Test5& from);
  MSG_Test5(MSG_Test5&& from) noexcept
    : MSG_Test5() {
    *this = ::std::move(from);
  }

  inline MSG_Test5& operator=(const MSG_Test5& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Test5& operator=(MSG_Test5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Test5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Test5* internal_default_instance() {
    return reinterpret_cast<const MSG_Test5*>(
               &_MSG_Test5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_Test5& a, MSG_Test5& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Test5* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Test5* New() const final {
    return CreateMaybeMessage<MSG_Test5>(nullptr);
  }

  MSG_Test5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Test5>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Test5& from);
  void MergeFrom(const MSG_Test5& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Test5* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.MSG_Test5";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_2eproto);
    return ::descriptor_table_login_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTest5StrFieldNumber = 2,
    kId5FieldNumber = 1,
  };
  // string test5_str = 2;
  void clear_test5_str();
  const std::string& test5_str() const;
  void set_test5_str(const std::string& value);
  void set_test5_str(std::string&& value);
  void set_test5_str(const char* value);
  void set_test5_str(const char* value, size_t size);
  std::string* mutable_test5_str();
  std::string* release_test5_str();
  void set_allocated_test5_str(std::string* test5_str);
  private:
  const std::string& _internal_test5_str() const;
  void _internal_set_test5_str(const std::string& value);
  std::string* _internal_mutable_test5_str();
  public:

  // uint64 id5 = 1;
  void clear_id5();
  ::PROTOBUF_NAMESPACE_ID::uint64 id5() const;
  void set_id5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id5() const;
  void _internal_set_id5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.MSG_Test5)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test5_str_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_REQUEST_CLIENT_LOGIN

// uint64 user_id = 1;
inline void MSG_REQUEST_CLIENT_LOGIN::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_REQUEST_CLIENT_LOGIN::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_REQUEST_CLIENT_LOGIN::user_id() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_CLIENT_LOGIN.user_id)
  return _internal_user_id();
}
inline void MSG_REQUEST_CLIENT_LOGIN::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_CLIENT_LOGIN.user_id)
}

// int32 version = 2;
inline void MSG_REQUEST_CLIENT_LOGIN::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_REQUEST_CLIENT_LOGIN::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_REQUEST_CLIENT_LOGIN::version() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_CLIENT_LOGIN.version)
  return _internal_version();
}
inline void MSG_REQUEST_CLIENT_LOGIN::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_CLIENT_LOGIN.version)
}

// bytes session_key = 3;
inline void MSG_REQUEST_CLIENT_LOGIN::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_REQUEST_CLIENT_LOGIN::session_key() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
  return _internal_session_key();
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_session_key(const std::string& value) {
  _internal_set_session_key(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
}
inline std::string* MSG_REQUEST_CLIENT_LOGIN::mutable_session_key() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
  return _internal_mutable_session_key();
}
inline const std::string& MSG_REQUEST_CLIENT_LOGIN::_internal_session_key() const {
  return session_key_.GetNoArena();
}
inline void MSG_REQUEST_CLIENT_LOGIN::_internal_set_session_key(const std::string& value) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_session_key(std::string&& value) {
  
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_session_key(const void* value, size_t size) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
}
inline std::string* MSG_REQUEST_CLIENT_LOGIN::_internal_mutable_session_key() {
  
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_REQUEST_CLIENT_LOGIN::release_session_key() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
  
  return session_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_REQUEST_CLIENT_LOGIN::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_REQUEST_CLIENT_LOGIN.session_key)
}

// -------------------------------------------------------------------

// MSG_RESPONSE_CLIENT_LOGIN

// int32 status_code = 1;
inline void MSG_RESPONSE_CLIENT_LOGIN::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_CLIENT_LOGIN::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_CLIENT_LOGIN::status_code() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_CLIENT_LOGIN.status_code)
  return _internal_status_code();
}
inline void MSG_RESPONSE_CLIENT_LOGIN::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void MSG_RESPONSE_CLIENT_LOGIN::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_CLIENT_LOGIN.status_code)
}

// uint64 user_id = 2;
inline void MSG_RESPONSE_CLIENT_LOGIN::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RESPONSE_CLIENT_LOGIN::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RESPONSE_CLIENT_LOGIN::user_id() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_CLIENT_LOGIN.user_id)
  return _internal_user_id();
}
inline void MSG_RESPONSE_CLIENT_LOGIN::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void MSG_RESPONSE_CLIENT_LOGIN::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_CLIENT_LOGIN.user_id)
}

// int32 version = 3;
inline void MSG_RESPONSE_CLIENT_LOGIN::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_CLIENT_LOGIN::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_RESPONSE_CLIENT_LOGIN::version() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_CLIENT_LOGIN.version)
  return _internal_version();
}
inline void MSG_RESPONSE_CLIENT_LOGIN::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void MSG_RESPONSE_CLIENT_LOGIN::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_CLIENT_LOGIN.version)
}

// bool is_newbie = 4;
inline void MSG_RESPONSE_CLIENT_LOGIN::clear_is_newbie() {
  is_newbie_ = false;
}
inline bool MSG_RESPONSE_CLIENT_LOGIN::_internal_is_newbie() const {
  return is_newbie_;
}
inline bool MSG_RESPONSE_CLIENT_LOGIN::is_newbie() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_RESPONSE_CLIENT_LOGIN.is_newbie)
  return _internal_is_newbie();
}
inline void MSG_RESPONSE_CLIENT_LOGIN::_internal_set_is_newbie(bool value) {
  
  is_newbie_ = value;
}
inline void MSG_RESPONSE_CLIENT_LOGIN::set_is_newbie(bool value) {
  _internal_set_is_newbie(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_RESPONSE_CLIENT_LOGIN.is_newbie)
}

// -------------------------------------------------------------------

// MSG_LOGINSERVER_VALIDATE

// uint64 user_id = 1;
inline void MSG_LOGINSERVER_VALIDATE::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_LOGINSERVER_VALIDATE::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_LOGINSERVER_VALIDATE::user_id() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_LOGINSERVER_VALIDATE.user_id)
  return _internal_user_id();
}
inline void MSG_LOGINSERVER_VALIDATE::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void MSG_LOGINSERVER_VALIDATE::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_LOGINSERVER_VALIDATE.user_id)
}

// int32 port = 2;
inline void MSG_LOGINSERVER_VALIDATE::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_LOGINSERVER_VALIDATE::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_LOGINSERVER_VALIDATE::port() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_LOGINSERVER_VALIDATE.port)
  return _internal_port();
}
inline void MSG_LOGINSERVER_VALIDATE::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MSG_LOGINSERVER_VALIDATE::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_LOGINSERVER_VALIDATE.port)
}

// bool is_real_name_flag = 3;
inline void MSG_LOGINSERVER_VALIDATE::clear_is_real_name_flag() {
  is_real_name_flag_ = false;
}
inline bool MSG_LOGINSERVER_VALIDATE::_internal_is_real_name_flag() const {
  return is_real_name_flag_;
}
inline bool MSG_LOGINSERVER_VALIDATE::is_real_name_flag() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_LOGINSERVER_VALIDATE.is_real_name_flag)
  return _internal_is_real_name_flag();
}
inline void MSG_LOGINSERVER_VALIDATE::_internal_set_is_real_name_flag(bool value) {
  
  is_real_name_flag_ = value;
}
inline void MSG_LOGINSERVER_VALIDATE::set_is_real_name_flag(bool value) {
  _internal_set_is_real_name_flag(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_LOGINSERVER_VALIDATE.is_real_name_flag)
}

// string ip = 4;
inline void MSG_LOGINSERVER_VALIDATE::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_LOGINSERVER_VALIDATE::ip() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_LOGINSERVER_VALIDATE.ip)
  return _internal_ip();
}
inline void MSG_LOGINSERVER_VALIDATE::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_LOGINSERVER_VALIDATE.ip)
}
inline std::string* MSG_LOGINSERVER_VALIDATE::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_LOGINSERVER_VALIDATE.ip)
  return _internal_mutable_ip();
}
inline const std::string& MSG_LOGINSERVER_VALIDATE::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void MSG_LOGINSERVER_VALIDATE::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_LOGINSERVER_VALIDATE::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_LOGINSERVER_VALIDATE.ip)
}
inline void MSG_LOGINSERVER_VALIDATE::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_LOGINSERVER_VALIDATE.ip)
}
inline void MSG_LOGINSERVER_VALIDATE::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_LOGINSERVER_VALIDATE.ip)
}
inline std::string* MSG_LOGINSERVER_VALIDATE::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_LOGINSERVER_VALIDATE::release_ip() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_LOGINSERVER_VALIDATE.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_LOGINSERVER_VALIDATE::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_LOGINSERVER_VALIDATE.ip)
}

// bytes check_out_text = 5;
inline void MSG_LOGINSERVER_VALIDATE::clear_check_out_text() {
  check_out_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_LOGINSERVER_VALIDATE::check_out_text() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_LOGINSERVER_VALIDATE.check_out_text)
  return _internal_check_out_text();
}
inline void MSG_LOGINSERVER_VALIDATE::set_check_out_text(const std::string& value) {
  _internal_set_check_out_text(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_LOGINSERVER_VALIDATE.check_out_text)
}
inline std::string* MSG_LOGINSERVER_VALIDATE::mutable_check_out_text() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_LOGINSERVER_VALIDATE.check_out_text)
  return _internal_mutable_check_out_text();
}
inline const std::string& MSG_LOGINSERVER_VALIDATE::_internal_check_out_text() const {
  return check_out_text_.GetNoArena();
}
inline void MSG_LOGINSERVER_VALIDATE::_internal_set_check_out_text(const std::string& value) {
  
  check_out_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_LOGINSERVER_VALIDATE::set_check_out_text(std::string&& value) {
  
  check_out_text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_LOGINSERVER_VALIDATE.check_out_text)
}
inline void MSG_LOGINSERVER_VALIDATE::set_check_out_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  check_out_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_LOGINSERVER_VALIDATE.check_out_text)
}
inline void MSG_LOGINSERVER_VALIDATE::set_check_out_text(const void* value, size_t size) {
  
  check_out_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_LOGINSERVER_VALIDATE.check_out_text)
}
inline std::string* MSG_LOGINSERVER_VALIDATE::_internal_mutable_check_out_text() {
  
  return check_out_text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_LOGINSERVER_VALIDATE::release_check_out_text() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_LOGINSERVER_VALIDATE.check_out_text)
  
  return check_out_text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_LOGINSERVER_VALIDATE::set_allocated_check_out_text(std::string* check_out_text) {
  if (check_out_text != nullptr) {
    
  } else {
    
  }
  check_out_text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), check_out_text);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_LOGINSERVER_VALIDATE.check_out_text)
}

// -------------------------------------------------------------------

// MSG_Test1

// uint64 id1 = 1;
inline void MSG_Test1::clear_id1() {
  id1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Test1::_internal_id1() const {
  return id1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Test1::id1() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_Test1.id1)
  return _internal_id1();
}
inline void MSG_Test1::_internal_set_id1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id1_ = value;
}
inline void MSG_Test1::set_id1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id1(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_Test1.id1)
}

// string test1_str = 2;
inline void MSG_Test1::clear_test1_str() {
  test1_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_Test1::test1_str() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_Test1.test1_str)
  return _internal_test1_str();
}
inline void MSG_Test1::set_test1_str(const std::string& value) {
  _internal_set_test1_str(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_Test1.test1_str)
}
inline std::string* MSG_Test1::mutable_test1_str() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_Test1.test1_str)
  return _internal_mutable_test1_str();
}
inline const std::string& MSG_Test1::_internal_test1_str() const {
  return test1_str_.GetNoArena();
}
inline void MSG_Test1::_internal_set_test1_str(const std::string& value) {
  
  test1_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Test1::set_test1_str(std::string&& value) {
  
  test1_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_Test1.test1_str)
}
inline void MSG_Test1::set_test1_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test1_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_Test1.test1_str)
}
inline void MSG_Test1::set_test1_str(const char* value, size_t size) {
  
  test1_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_Test1.test1_str)
}
inline std::string* MSG_Test1::_internal_mutable_test1_str() {
  
  return test1_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Test1::release_test1_str() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_Test1.test1_str)
  
  return test1_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Test1::set_allocated_test1_str(std::string* test1_str) {
  if (test1_str != nullptr) {
    
  } else {
    
  }
  test1_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test1_str);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_Test1.test1_str)
}

// -------------------------------------------------------------------

// MSG_Test2

// uint64 id2 = 1;
inline void MSG_Test2::clear_id2() {
  id2_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Test2::_internal_id2() const {
  return id2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Test2::id2() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_Test2.id2)
  return _internal_id2();
}
inline void MSG_Test2::_internal_set_id2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id2_ = value;
}
inline void MSG_Test2::set_id2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id2(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_Test2.id2)
}

// string test2_str = 2;
inline void MSG_Test2::clear_test2_str() {
  test2_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_Test2::test2_str() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_Test2.test2_str)
  return _internal_test2_str();
}
inline void MSG_Test2::set_test2_str(const std::string& value) {
  _internal_set_test2_str(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_Test2.test2_str)
}
inline std::string* MSG_Test2::mutable_test2_str() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_Test2.test2_str)
  return _internal_mutable_test2_str();
}
inline const std::string& MSG_Test2::_internal_test2_str() const {
  return test2_str_.GetNoArena();
}
inline void MSG_Test2::_internal_set_test2_str(const std::string& value) {
  
  test2_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Test2::set_test2_str(std::string&& value) {
  
  test2_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_Test2.test2_str)
}
inline void MSG_Test2::set_test2_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test2_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_Test2.test2_str)
}
inline void MSG_Test2::set_test2_str(const char* value, size_t size) {
  
  test2_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_Test2.test2_str)
}
inline std::string* MSG_Test2::_internal_mutable_test2_str() {
  
  return test2_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Test2::release_test2_str() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_Test2.test2_str)
  
  return test2_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Test2::set_allocated_test2_str(std::string* test2_str) {
  if (test2_str != nullptr) {
    
  } else {
    
  }
  test2_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test2_str);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_Test2.test2_str)
}

// -------------------------------------------------------------------

// MSG_Test3

// uint64 id3 = 1;
inline void MSG_Test3::clear_id3() {
  id3_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Test3::_internal_id3() const {
  return id3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Test3::id3() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_Test3.id3)
  return _internal_id3();
}
inline void MSG_Test3::_internal_set_id3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id3_ = value;
}
inline void MSG_Test3::set_id3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id3(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_Test3.id3)
}

// string test3_str = 2;
inline void MSG_Test3::clear_test3_str() {
  test3_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_Test3::test3_str() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_Test3.test3_str)
  return _internal_test3_str();
}
inline void MSG_Test3::set_test3_str(const std::string& value) {
  _internal_set_test3_str(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_Test3.test3_str)
}
inline std::string* MSG_Test3::mutable_test3_str() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_Test3.test3_str)
  return _internal_mutable_test3_str();
}
inline const std::string& MSG_Test3::_internal_test3_str() const {
  return test3_str_.GetNoArena();
}
inline void MSG_Test3::_internal_set_test3_str(const std::string& value) {
  
  test3_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Test3::set_test3_str(std::string&& value) {
  
  test3_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_Test3.test3_str)
}
inline void MSG_Test3::set_test3_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test3_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_Test3.test3_str)
}
inline void MSG_Test3::set_test3_str(const char* value, size_t size) {
  
  test3_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_Test3.test3_str)
}
inline std::string* MSG_Test3::_internal_mutable_test3_str() {
  
  return test3_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Test3::release_test3_str() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_Test3.test3_str)
  
  return test3_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Test3::set_allocated_test3_str(std::string* test3_str) {
  if (test3_str != nullptr) {
    
  } else {
    
  }
  test3_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test3_str);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_Test3.test3_str)
}

// -------------------------------------------------------------------

// MSG_Test4

// uint64 id4 = 1;
inline void MSG_Test4::clear_id4() {
  id4_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Test4::_internal_id4() const {
  return id4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Test4::id4() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_Test4.id4)
  return _internal_id4();
}
inline void MSG_Test4::_internal_set_id4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id4_ = value;
}
inline void MSG_Test4::set_id4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id4(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_Test4.id4)
}

// string test4_str = 2;
inline void MSG_Test4::clear_test4_str() {
  test4_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_Test4::test4_str() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_Test4.test4_str)
  return _internal_test4_str();
}
inline void MSG_Test4::set_test4_str(const std::string& value) {
  _internal_set_test4_str(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_Test4.test4_str)
}
inline std::string* MSG_Test4::mutable_test4_str() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_Test4.test4_str)
  return _internal_mutable_test4_str();
}
inline const std::string& MSG_Test4::_internal_test4_str() const {
  return test4_str_.GetNoArena();
}
inline void MSG_Test4::_internal_set_test4_str(const std::string& value) {
  
  test4_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Test4::set_test4_str(std::string&& value) {
  
  test4_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_Test4.test4_str)
}
inline void MSG_Test4::set_test4_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test4_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_Test4.test4_str)
}
inline void MSG_Test4::set_test4_str(const char* value, size_t size) {
  
  test4_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_Test4.test4_str)
}
inline std::string* MSG_Test4::_internal_mutable_test4_str() {
  
  return test4_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Test4::release_test4_str() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_Test4.test4_str)
  
  return test4_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Test4::set_allocated_test4_str(std::string* test4_str) {
  if (test4_str != nullptr) {
    
  } else {
    
  }
  test4_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test4_str);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_Test4.test4_str)
}

// -------------------------------------------------------------------

// MSG_Test5

// uint64 id5 = 1;
inline void MSG_Test5::clear_id5() {
  id5_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Test5::_internal_id5() const {
  return id5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Test5::id5() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_Test5.id5)
  return _internal_id5();
}
inline void MSG_Test5::_internal_set_id5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id5_ = value;
}
inline void MSG_Test5::set_id5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id5(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_Test5.id5)
}

// string test5_str = 2;
inline void MSG_Test5::clear_test5_str() {
  test5_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_Test5::test5_str() const {
  // @@protoc_insertion_point(field_get:login_msg.MSG_Test5.test5_str)
  return _internal_test5_str();
}
inline void MSG_Test5::set_test5_str(const std::string& value) {
  _internal_set_test5_str(value);
  // @@protoc_insertion_point(field_set:login_msg.MSG_Test5.test5_str)
}
inline std::string* MSG_Test5::mutable_test5_str() {
  // @@protoc_insertion_point(field_mutable:login_msg.MSG_Test5.test5_str)
  return _internal_mutable_test5_str();
}
inline const std::string& MSG_Test5::_internal_test5_str() const {
  return test5_str_.GetNoArena();
}
inline void MSG_Test5::_internal_set_test5_str(const std::string& value) {
  
  test5_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Test5::set_test5_str(std::string&& value) {
  
  test5_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_msg.MSG_Test5.test5_str)
}
inline void MSG_Test5::set_test5_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test5_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_msg.MSG_Test5.test5_str)
}
inline void MSG_Test5::set_test5_str(const char* value, size_t size) {
  
  test5_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_msg.MSG_Test5.test5_str)
}
inline std::string* MSG_Test5::_internal_mutable_test5_str() {
  
  return test5_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Test5::release_test5_str() {
  // @@protoc_insertion_point(field_release:login_msg.MSG_Test5.test5_str)
  
  return test5_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Test5::set_allocated_test5_str(std::string* test5_str) {
  if (test5_str != nullptr) {
    
  } else {
    
  }
  test5_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test5_str);
  // @@protoc_insertion_point(field_set_allocated:login_msg.MSG_Test5.test5_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace login_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_2eproto
