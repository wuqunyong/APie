// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route_register.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_route_5fregister_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_route_5fregister_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "service_discovery.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_route_5fregister_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_route_5fregister_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_route_5fregister_2eproto;
namespace route_register {
class MSG_REQUEST_ADD_ROUTE;
class MSG_REQUEST_ADD_ROUTEDefaultTypeInternal;
extern MSG_REQUEST_ADD_ROUTEDefaultTypeInternal _MSG_REQUEST_ADD_ROUTE_default_instance_;
class MSG_RESP_ADD_ROUTE;
class MSG_RESP_ADD_ROUTEDefaultTypeInternal;
extern MSG_RESP_ADD_ROUTEDefaultTypeInternal _MSG_RESP_ADD_ROUTE_default_instance_;
class RouteInstance;
class RouteInstanceDefaultTypeInternal;
extern RouteInstanceDefaultTypeInternal _RouteInstance_default_instance_;
}  // namespace route_register
PROTOBUF_NAMESPACE_OPEN
template<> ::route_register::MSG_REQUEST_ADD_ROUTE* Arena::CreateMaybeMessage<::route_register::MSG_REQUEST_ADD_ROUTE>(Arena*);
template<> ::route_register::MSG_RESP_ADD_ROUTE* Arena::CreateMaybeMessage<::route_register::MSG_RESP_ADD_ROUTE>(Arena*);
template<> ::route_register::RouteInstance* Arena::CreateMaybeMessage<::route_register::RouteInstance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace route_register {

// ===================================================================

class RouteInstance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_register.RouteInstance) */ {
 public:
  RouteInstance();
  virtual ~RouteInstance();

  RouteInstance(const RouteInstance& from);
  RouteInstance(RouteInstance&& from) noexcept
    : RouteInstance() {
    *this = ::std::move(from);
  }

  inline RouteInstance& operator=(const RouteInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInstance& operator=(RouteInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteInstance* internal_default_instance() {
    return reinterpret_cast<const RouteInstance*>(
               &_RouteInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RouteInstance& a, RouteInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInstance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInstance* New() const final {
    return CreateMaybeMessage<RouteInstance>(nullptr);
  }

  RouteInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInstance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteInstance& from);
  void MergeFrom(const RouteInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_register.RouteInstance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_route_5fregister_2eproto);
    return ::descriptor_table_route_5fregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string auth = 3;
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // .service_discovery.EndPointType type = 1;
  void clear_type();
  ::service_discovery::EndPointType type() const;
  void set_type(::service_discovery::EndPointType value);
  private:
  ::service_discovery::EndPointType _internal_type() const;
  void _internal_set_type(::service_discovery::EndPointType value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:route_register.RouteInstance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_route_5fregister_2eproto;
};
// -------------------------------------------------------------------

class MSG_REQUEST_ADD_ROUTE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_register.MSG_REQUEST_ADD_ROUTE) */ {
 public:
  MSG_REQUEST_ADD_ROUTE();
  virtual ~MSG_REQUEST_ADD_ROUTE();

  MSG_REQUEST_ADD_ROUTE(const MSG_REQUEST_ADD_ROUTE& from);
  MSG_REQUEST_ADD_ROUTE(MSG_REQUEST_ADD_ROUTE&& from) noexcept
    : MSG_REQUEST_ADD_ROUTE() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_ADD_ROUTE& operator=(const MSG_REQUEST_ADD_ROUTE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_ADD_ROUTE& operator=(MSG_REQUEST_ADD_ROUTE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_REQUEST_ADD_ROUTE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_REQUEST_ADD_ROUTE* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_ADD_ROUTE*>(
               &_MSG_REQUEST_ADD_ROUTE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_REQUEST_ADD_ROUTE& a, MSG_REQUEST_ADD_ROUTE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_ADD_ROUTE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_REQUEST_ADD_ROUTE* New() const final {
    return CreateMaybeMessage<MSG_REQUEST_ADD_ROUTE>(nullptr);
  }

  MSG_REQUEST_ADD_ROUTE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_REQUEST_ADD_ROUTE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_REQUEST_ADD_ROUTE& from);
  void MergeFrom(const MSG_REQUEST_ADD_ROUTE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_REQUEST_ADD_ROUTE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_register.MSG_REQUEST_ADD_ROUTE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_route_5fregister_2eproto);
    return ::descriptor_table_route_5fregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // .route_register.RouteInstance instance = 1;
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::route_register::RouteInstance& instance() const;
  ::route_register::RouteInstance* release_instance();
  ::route_register::RouteInstance* mutable_instance();
  void set_allocated_instance(::route_register::RouteInstance* instance);
  private:
  const ::route_register::RouteInstance& _internal_instance() const;
  ::route_register::RouteInstance* _internal_mutable_instance();
  public:

  // @@protoc_insertion_point(class_scope:route_register.MSG_REQUEST_ADD_ROUTE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::route_register::RouteInstance* instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_route_5fregister_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESP_ADD_ROUTE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_register.MSG_RESP_ADD_ROUTE) */ {
 public:
  MSG_RESP_ADD_ROUTE();
  virtual ~MSG_RESP_ADD_ROUTE();

  MSG_RESP_ADD_ROUTE(const MSG_RESP_ADD_ROUTE& from);
  MSG_RESP_ADD_ROUTE(MSG_RESP_ADD_ROUTE&& from) noexcept
    : MSG_RESP_ADD_ROUTE() {
    *this = ::std::move(from);
  }

  inline MSG_RESP_ADD_ROUTE& operator=(const MSG_RESP_ADD_ROUTE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESP_ADD_ROUTE& operator=(MSG_RESP_ADD_ROUTE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RESP_ADD_ROUTE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RESP_ADD_ROUTE* internal_default_instance() {
    return reinterpret_cast<const MSG_RESP_ADD_ROUTE*>(
               &_MSG_RESP_ADD_ROUTE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_RESP_ADD_ROUTE& a, MSG_RESP_ADD_ROUTE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESP_ADD_ROUTE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RESP_ADD_ROUTE* New() const final {
    return CreateMaybeMessage<MSG_RESP_ADD_ROUTE>(nullptr);
  }

  MSG_RESP_ADD_ROUTE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RESP_ADD_ROUTE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RESP_ADD_ROUTE& from);
  void MergeFrom(const MSG_RESP_ADD_ROUTE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESP_ADD_ROUTE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_register.MSG_RESP_ADD_ROUTE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_route_5fregister_2eproto);
    return ::descriptor_table_route_5fregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // uint32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:route_register.MSG_RESP_ADD_ROUTE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_route_5fregister_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RouteInstance

// .service_discovery.EndPointType type = 1;
inline void RouteInstance::clear_type() {
  type_ = 0;
}
inline ::service_discovery::EndPointType RouteInstance::_internal_type() const {
  return static_cast< ::service_discovery::EndPointType >(type_);
}
inline ::service_discovery::EndPointType RouteInstance::type() const {
  // @@protoc_insertion_point(field_get:route_register.RouteInstance.type)
  return _internal_type();
}
inline void RouteInstance::_internal_set_type(::service_discovery::EndPointType value) {
  
  type_ = value;
}
inline void RouteInstance::set_type(::service_discovery::EndPointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:route_register.RouteInstance.type)
}

// uint32 id = 2;
inline void RouteInstance::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteInstance::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteInstance::id() const {
  // @@protoc_insertion_point(field_get:route_register.RouteInstance.id)
  return _internal_id();
}
inline void RouteInstance::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void RouteInstance::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:route_register.RouteInstance.id)
}

// string auth = 3;
inline void RouteInstance::clear_auth() {
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteInstance::auth() const {
  // @@protoc_insertion_point(field_get:route_register.RouteInstance.auth)
  return _internal_auth();
}
inline void RouteInstance::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:route_register.RouteInstance.auth)
}
inline std::string* RouteInstance::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:route_register.RouteInstance.auth)
  return _internal_mutable_auth();
}
inline const std::string& RouteInstance::_internal_auth() const {
  return auth_.GetNoArena();
}
inline void RouteInstance::_internal_set_auth(const std::string& value) {
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RouteInstance::set_auth(std::string&& value) {
  
  auth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:route_register.RouteInstance.auth)
}
inline void RouteInstance::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:route_register.RouteInstance.auth)
}
inline void RouteInstance::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:route_register.RouteInstance.auth)
}
inline std::string* RouteInstance::_internal_mutable_auth() {
  
  return auth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteInstance::release_auth() {
  // @@protoc_insertion_point(field_release:route_register.RouteInstance.auth)
  
  return auth_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteInstance::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:route_register.RouteInstance.auth)
}

// -------------------------------------------------------------------

// MSG_REQUEST_ADD_ROUTE

// .route_register.RouteInstance instance = 1;
inline bool MSG_REQUEST_ADD_ROUTE::_internal_has_instance() const {
  return this != internal_default_instance() && instance_ != nullptr;
}
inline bool MSG_REQUEST_ADD_ROUTE::has_instance() const {
  return _internal_has_instance();
}
inline void MSG_REQUEST_ADD_ROUTE::clear_instance() {
  if (GetArenaNoVirtual() == nullptr && instance_ != nullptr) {
    delete instance_;
  }
  instance_ = nullptr;
}
inline const ::route_register::RouteInstance& MSG_REQUEST_ADD_ROUTE::_internal_instance() const {
  const ::route_register::RouteInstance* p = instance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::route_register::RouteInstance*>(
      &::route_register::_RouteInstance_default_instance_);
}
inline const ::route_register::RouteInstance& MSG_REQUEST_ADD_ROUTE::instance() const {
  // @@protoc_insertion_point(field_get:route_register.MSG_REQUEST_ADD_ROUTE.instance)
  return _internal_instance();
}
inline ::route_register::RouteInstance* MSG_REQUEST_ADD_ROUTE::release_instance() {
  // @@protoc_insertion_point(field_release:route_register.MSG_REQUEST_ADD_ROUTE.instance)
  
  ::route_register::RouteInstance* temp = instance_;
  instance_ = nullptr;
  return temp;
}
inline ::route_register::RouteInstance* MSG_REQUEST_ADD_ROUTE::_internal_mutable_instance() {
  
  if (instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_register::RouteInstance>(GetArenaNoVirtual());
    instance_ = p;
  }
  return instance_;
}
inline ::route_register::RouteInstance* MSG_REQUEST_ADD_ROUTE::mutable_instance() {
  // @@protoc_insertion_point(field_mutable:route_register.MSG_REQUEST_ADD_ROUTE.instance)
  return _internal_mutable_instance();
}
inline void MSG_REQUEST_ADD_ROUTE::set_allocated_instance(::route_register::RouteInstance* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete instance_;
  }
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:route_register.MSG_REQUEST_ADD_ROUTE.instance)
}

// -------------------------------------------------------------------

// MSG_RESP_ADD_ROUTE

// uint32 status_code = 1;
inline void MSG_RESP_ADD_ROUTE::clear_status_code() {
  status_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RESP_ADD_ROUTE::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RESP_ADD_ROUTE::status_code() const {
  // @@protoc_insertion_point(field_get:route_register.MSG_RESP_ADD_ROUTE.status_code)
  return _internal_status_code();
}
inline void MSG_RESP_ADD_ROUTE::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_code_ = value;
}
inline void MSG_RESP_ADD_ROUTE::set_status_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:route_register.MSG_RESP_ADD_ROUTE.status_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace route_register

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_route_5fregister_2eproto
