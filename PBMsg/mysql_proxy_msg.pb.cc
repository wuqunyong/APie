// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql_proxy_msg.proto

#include "mysql_proxy_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto;
namespace mysql_proxy_msg {
class MysqlValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlValue> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_v_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_v_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_v_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_v_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_v_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_v_;
  float float_v_;
  double double_v_;
} _MysqlValue_default_instance_;
class MysqlFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlField> _instance;
} _MysqlField_default_instance_;
class MysqlRowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlRow> _instance;
} _MysqlRow_default_instance_;
class MysqlTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlTable> _instance;
} _MysqlTable_default_instance_;
}  // namespace mysql_proxy_msg
static void InitDefaultsscc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlField_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlRow_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlRow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlRow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlTable_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlValue_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mysql_5fproxy_5fmsg_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mysql_5fproxy_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mysql_5fproxy_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, type_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, int32_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, int64_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, uint32_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, uint64_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, string_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, bytes_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, float_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, double_v_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlField, index_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlField, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlRow, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, db_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, rows_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mysql_proxy_msg::MysqlValue)},
  { 15, -1, sizeof(::mysql_proxy_msg::MysqlField)},
  { 22, -1, sizeof(::mysql_proxy_msg::MysqlRow)},
  { 28, -1, sizeof(::mysql_proxy_msg::MysqlTable)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlTable_default_instance_),
};

const char descriptor_table_protodef_mysql_5fproxy_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025mysql_proxy_msg.proto\022\017mysql_proxy_msg"
  "\"\351\001\n\nMysqlValue\0224\n\004type\030\001 \001(\0162&.mysql_pr"
  "oxy_msg.MysqlScalarValueTypes\022\021\n\007int32_v"
  "\030e \001(\005H\000\022\021\n\007int64_v\030f \001(\003H\000\022\022\n\010uint32_v\030"
  "g \001(\rH\000\022\022\n\010uint64_v\030h \001(\004H\000\022\022\n\010string_v\030"
  "i \001(\tH\000\022\021\n\007bytes_v\030j \001(\014H\000\022\021\n\007float_v\030k "
  "\001(\002H\000\022\022\n\010double_v\030l \001(\001H\000B\t\n\007payload\"G\n\n"
  "MysqlField\022\r\n\005index\030\001 \001(\r\022*\n\005value\030\002 \001(\013"
  "2\033.mysql_proxy_msg.MysqlValue\"7\n\010MysqlRo"
  "w\022+\n\006fields\030\001 \003(\0132\033.mysql_proxy_msg.Mysq"
  "lField\"O\n\nMysqlTable\022\n\n\002db\030\001 \001(\t\022\014\n\004name"
  "\030\002 \001(\t\022\'\n\004rows\030\003 \003(\0132\031.mysql_proxy_msg.M"
  "ysqlRow*\252\001\n\025MysqlScalarValueTypes\022\r\n\tMSV"
  "T_None\020\000\022\016\n\nMSVT_INT32\020\001\022\016\n\nMSVT_INT64\020\002"
  "\022\017\n\013MSVT_UINT32\020\003\022\017\n\013MSVT_UINT64\020\004\022\017\n\013MS"
  "VT_STRING\020\005\022\016\n\nMSVT_BYTES\020\006\022\016\n\nMSVT_FLOA"
  "T\020\007\022\017\n\013MSVT_DOUBLE\020\010*e\n\025MysqlDataManipul"
  "ation\022\014\n\010MDM_None\020\000\022\016\n\nMDM_SELECT\020\001\022\016\n\nM"
  "DM_UPDATE\020\002\022\016\n\nMDM_DELETE\020\003\022\016\n\nMDM_INSER"
  "T\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mysql_5fproxy_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mysql_5fproxy_5fmsg_2eproto_sccs[4] = {
  &scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mysql_5fproxy_5fmsg_2eproto_once;
static bool descriptor_table_mysql_5fproxy_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mysql_5fproxy_5fmsg_2eproto = {
  &descriptor_table_mysql_5fproxy_5fmsg_2eproto_initialized, descriptor_table_protodef_mysql_5fproxy_5fmsg_2eproto, "mysql_proxy_msg.proto", 771,
  &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once, descriptor_table_mysql_5fproxy_5fmsg_2eproto_sccs, descriptor_table_mysql_5fproxy_5fmsg_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_mysql_5fproxy_5fmsg_2eproto::offsets,
  file_level_metadata_mysql_5fproxy_5fmsg_2eproto, 4, file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto, file_level_service_descriptors_mysql_5fproxy_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mysql_5fproxy_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mysql_5fproxy_5fmsg_2eproto), true);
namespace mysql_proxy_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MysqlScalarValueTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mysql_5fproxy_5fmsg_2eproto);
  return file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto[0];
}
bool MysqlScalarValueTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MysqlDataManipulation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mysql_5fproxy_5fmsg_2eproto);
  return file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto[1];
}
bool MysqlDataManipulation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MysqlValue::InitAsDefaultInstance() {
  ::mysql_proxy_msg::_MysqlValue_default_instance_.int32_v_ = 0;
  ::mysql_proxy_msg::_MysqlValue_default_instance_.int64_v_ = PROTOBUF_LONGLONG(0);
  ::mysql_proxy_msg::_MysqlValue_default_instance_.uint32_v_ = 0u;
  ::mysql_proxy_msg::_MysqlValue_default_instance_.uint64_v_ = PROTOBUF_ULONGLONG(0);
  ::mysql_proxy_msg::_MysqlValue_default_instance_.string_v_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::mysql_proxy_msg::_MysqlValue_default_instance_.bytes_v_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::mysql_proxy_msg::_MysqlValue_default_instance_.float_v_ = 0;
  ::mysql_proxy_msg::_MysqlValue_default_instance_.double_v_ = 0;
}
class MysqlValue::_Internal {
 public:
};

MysqlValue::MysqlValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlValue)
}
MysqlValue::MysqlValue(const MysqlValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kInt32V: {
      _internal_set_int32_v(from._internal_int32_v());
      break;
    }
    case kInt64V: {
      _internal_set_int64_v(from._internal_int64_v());
      break;
    }
    case kUint32V: {
      _internal_set_uint32_v(from._internal_uint32_v());
      break;
    }
    case kUint64V: {
      _internal_set_uint64_v(from._internal_uint64_v());
      break;
    }
    case kStringV: {
      _internal_set_string_v(from._internal_string_v());
      break;
    }
    case kBytesV: {
      _internal_set_bytes_v(from._internal_bytes_v());
      break;
    }
    case kFloatV: {
      _internal_set_float_v(from._internal_float_v());
      break;
    }
    case kDoubleV: {
      _internal_set_double_v(from._internal_double_v());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlValue)
}

void MysqlValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto.base);
  type_ = 0;
  clear_has_payload();
}

MysqlValue::~MysqlValue() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlValue)
  SharedDtor();
}

void MysqlValue::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void MysqlValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlValue& MysqlValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlValue::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:mysql_proxy_msg.MysqlValue)
  switch (payload_case()) {
    case kInt32V: {
      // No need to clear
      break;
    }
    case kInt64V: {
      // No need to clear
      break;
    }
    case kUint32V: {
      // No need to clear
      break;
    }
    case kUint64V: {
      // No need to clear
      break;
    }
    case kStringV: {
      payload_.string_v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBytesV: {
      payload_.bytes_v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFloatV: {
      // No need to clear
      break;
    }
    case kDoubleV: {
      // No need to clear
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void MysqlValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_payload();
  _internal_metadata_.Clear();
}

const char* MysqlValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mysql_proxy_msg.MysqlScalarValueTypes type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mysql_proxy_msg::MysqlScalarValueTypes>(val));
        } else goto handle_unusual;
        continue;
      // int32 int32_v = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_int32_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64_v = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_int64_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uint32_v = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_uint32_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uint64_v = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_uint64_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_v = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_string_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlValue.string_v"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bytes_v = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_bytes_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_v = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _internal_set_float_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double_v = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _internal_set_double_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mysql_proxy_msg.MysqlScalarValueTypes type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 int32_v = 101;
  if (_internal_has_int32_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(101, this->_internal_int32_v(), target);
  }

  // int64 int64_v = 102;
  if (_internal_has_int64_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(102, this->_internal_int64_v(), target);
  }

  // uint32 uint32_v = 103;
  if (_internal_has_uint32_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(103, this->_internal_uint32_v(), target);
  }

  // uint64 uint64_v = 104;
  if (_internal_has_uint64_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(104, this->_internal_uint64_v(), target);
  }

  // string string_v = 105;
  if (_internal_has_string_v()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_v().data(), static_cast<int>(this->_internal_string_v().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlValue.string_v");
    target = stream->WriteStringMaybeAliased(
        105, this->_internal_string_v(), target);
  }

  // bytes bytes_v = 106;
  if (_internal_has_bytes_v()) {
    target = stream->WriteBytesMaybeAliased(
        106, this->_internal_bytes_v(), target);
  }

  // float float_v = 107;
  if (_internal_has_float_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(107, this->_internal_float_v(), target);
  }

  // double double_v = 108;
  if (_internal_has_double_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(108, this->_internal_double_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlValue)
  return target;
}

size_t MysqlValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mysql_proxy_msg.MysqlScalarValueTypes type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (payload_case()) {
    // int32 int32_v = 101;
    case kInt32V: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32_v());
      break;
    }
    // int64 int64_v = 102;
    case kInt64V: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int64_v());
      break;
    }
    // uint32 uint32_v = 103;
    case kUint32V: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_v());
      break;
    }
    // uint64 uint64_v = 104;
    case kUint64V: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64_v());
      break;
    }
    // string string_v = 105;
    case kStringV: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_v());
      break;
    }
    // bytes bytes_v = 106;
    case kBytesV: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_v());
      break;
    }
    // float float_v = 107;
    case kFloatV: {
      total_size += 2 + 4;
      break;
    }
    // double double_v = 108;
    case kDoubleV: {
      total_size += 2 + 8;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlValue)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlValue)
    MergeFrom(*source);
  }
}

void MysqlValue::MergeFrom(const MysqlValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.payload_case()) {
    case kInt32V: {
      _internal_set_int32_v(from._internal_int32_v());
      break;
    }
    case kInt64V: {
      _internal_set_int64_v(from._internal_int64_v());
      break;
    }
    case kUint32V: {
      _internal_set_uint32_v(from._internal_uint32_v());
      break;
    }
    case kUint64V: {
      _internal_set_uint64_v(from._internal_uint64_v());
      break;
    }
    case kStringV: {
      _internal_set_string_v(from._internal_string_v());
      break;
    }
    case kBytesV: {
      _internal_set_bytes_v(from._internal_bytes_v());
      break;
    }
    case kFloatV: {
      _internal_set_float_v(from._internal_float_v());
      break;
    }
    case kDoubleV: {
      _internal_set_double_v(from._internal_double_v());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void MysqlValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlValue::CopyFrom(const MysqlValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlValue::IsInitialized() const {
  return true;
}

void MysqlValue::InternalSwap(MysqlValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlField::InitAsDefaultInstance() {
  ::mysql_proxy_msg::_MysqlField_default_instance_._instance.get_mutable()->value_ = const_cast< ::mysql_proxy_msg::MysqlValue*>(
      ::mysql_proxy_msg::MysqlValue::internal_default_instance());
}
class MysqlField::_Internal {
 public:
  static const ::mysql_proxy_msg::MysqlValue& value(const MysqlField* msg);
};

const ::mysql_proxy_msg::MysqlValue&
MysqlField::_Internal::value(const MysqlField* msg) {
  return *msg->value_;
}
MysqlField::MysqlField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlField)
}
MysqlField::MysqlField(const MysqlField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::mysql_proxy_msg::MysqlValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlField)
}

void MysqlField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(index_));
}

MysqlField::~MysqlField() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlField)
  SharedDtor();
}

void MysqlField::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void MysqlField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlField& MysqlField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlField::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  index_ = 0u;
  _internal_metadata_.Clear();
}

const char* MysqlField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mysql_proxy_msg.MysqlValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .mysql_proxy_msg.MysqlValue value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlField)
  return target;
}

size_t MysqlField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mysql_proxy_msg.MysqlValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlField)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlField)
    MergeFrom(*source);
  }
}

void MysqlField::MergeFrom(const MysqlField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::mysql_proxy_msg::MysqlValue::MergeFrom(from._internal_value());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void MysqlField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlField::CopyFrom(const MysqlField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlField::IsInitialized() const {
  return true;
}

void MysqlField::InternalSwap(MysqlField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlRow::InitAsDefaultInstance() {
}
class MysqlRow::_Internal {
 public:
};

MysqlRow::MysqlRow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlRow)
}
MysqlRow::MysqlRow(const MysqlRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlRow)
}

void MysqlRow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto.base);
}

MysqlRow::~MysqlRow() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlRow)
  SharedDtor();
}

void MysqlRow::SharedDtor() {
}

void MysqlRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlRow& MysqlRow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlRow::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear();
}

const char* MysqlRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mysql_proxy_msg.MysqlField fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlRow)
  return target;
}

size_t MysqlRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlRow)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlRow)
    MergeFrom(*source);
  }
}

void MysqlRow::MergeFrom(const MysqlRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void MysqlRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlRow::CopyFrom(const MysqlRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlRow::IsInitialized() const {
  return true;
}

void MysqlRow::InternalSwap(MysqlRow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlRow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlTable::InitAsDefaultInstance() {
}
class MysqlTable::_Internal {
 public:
};

MysqlTable::MysqlTable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlTable)
}
MysqlTable::MysqlTable(const MysqlTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db().empty()) {
    db_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlTable)
}

void MysqlTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto.base);
  db_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MysqlTable::~MysqlTable() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlTable)
  SharedDtor();
}

void MysqlTable::SharedDtor() {
  db_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlTable& MysqlTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlTable::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  db_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MysqlTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string db = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_db();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlTable.db"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlTable.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlRow rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db = 1;
  if (this->db().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db().data(), static_cast<int>(this->_internal_db().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlTable.db");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlTable.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlRow rows = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlTable)
  return target;
}

size_t MysqlTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlRow rows = 3;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db = 1;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlTable)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlTable)
    MergeFrom(*source);
  }
}

void MysqlTable::MergeFrom(const MysqlTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MysqlTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlTable::CopyFrom(const MysqlTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlTable::IsInitialized() const {
  return true;
}

void MysqlTable::InternalSwap(MysqlTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rows_.InternalSwap(&other->rows_);
  db_.Swap(&other->db_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlTable::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mysql_proxy_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlValue* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlValue >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlField* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlField >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlField >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlRow* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlRow >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlRow >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlTable* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlTable >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
