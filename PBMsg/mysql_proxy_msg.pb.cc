// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql_proxy_msg.proto

#include "mysql_proxy_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlDescField_mysql_5fproxy_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlDescTable_mysql_5fproxy_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlDescribeResponse_TablesEntry_DoNotUse_mysql_5fproxy_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto;
namespace mysql_proxy_msg {
class MysqlValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlValue> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_v_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_v_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_v_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_v_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_v_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_v_;
  float float_v_;
  double double_v_;
} _MysqlValue_default_instance_;
class MysqlFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlField> _instance;
} _MysqlField_default_instance_;
class MysqlRowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlRow> _instance;
} _MysqlRow_default_instance_;
class MysqlTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlTable> _instance;
} _MysqlTable_default_instance_;
class MysqlDescribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlDescribeRequest> _instance;
} _MysqlDescribeRequest_default_instance_;
class MysqlDescFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlDescField> _instance;
} _MysqlDescField_default_instance_;
class MysqlDescTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlDescTable> _instance;
} _MysqlDescTable_default_instance_;
class MysqlDescribeResponse_TablesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlDescribeResponse_TablesEntry_DoNotUse> _instance;
} _MysqlDescribeResponse_TablesEntry_DoNotUse_default_instance_;
class MysqlDescribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlDescribeResponse> _instance;
} _MysqlDescribeResponse_default_instance_;
class MysqlQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlQueryRequest> _instance;
} _MysqlQueryRequest_default_instance_;
class MysqlQueryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlQueryResponse> _instance;
} _MysqlQueryResponse_default_instance_;
class MysqlInsertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlInsertRequest> _instance;
} _MysqlInsertRequest_default_instance_;
class MysqlInsertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlInsertResponse> _instance;
} _MysqlInsertResponse_default_instance_;
class MysqlUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlUpdateRequest> _instance;
} _MysqlUpdateRequest_default_instance_;
class MysqlUpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlUpdateResponse> _instance;
} _MysqlUpdateResponse_default_instance_;
class MysqlDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlDeleteRequest> _instance;
} _MysqlDeleteRequest_default_instance_;
class MysqlDeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlDeleteResponse> _instance;
} _MysqlDeleteResponse_default_instance_;
class MysqlQueryRequestByFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlQueryRequestByFilter> _instance;
} _MysqlQueryRequestByFilter_default_instance_;
}  // namespace mysql_proxy_msg
static void InitDefaultsscc_info_MysqlDeleteRequest_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlDeleteRequest_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlDeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlDeleteRequest_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlDeleteRequest_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlDeleteResponse_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlDeleteResponse_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlDeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlDeleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlDeleteResponse_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MysqlDeleteResponse_mysql_5fproxy_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MysqlDescField_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlDescField_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlDescField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlDescField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlDescField_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MysqlDescField_mysql_5fproxy_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MysqlDescTable_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlDescTable_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlDescTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlDescTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlDescTable_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlDescTable_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlDescField_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlDescribeRequest_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlDescribeRequest_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlDescribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlDescribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlDescribeRequest_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MysqlDescribeRequest_mysql_5fproxy_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MysqlDescribeResponse_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlDescribeResponse_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlDescribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlDescribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlDescribeResponse_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlDescribeResponse_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlDescribeResponse_TablesEntry_DoNotUse_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlDescribeResponse_TablesEntry_DoNotUse_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlDescribeResponse_TablesEntry_DoNotUse_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse();
  }
  ::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlDescribeResponse_TablesEntry_DoNotUse_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlDescribeResponse_TablesEntry_DoNotUse_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlDescTable_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlField_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlInsertRequest_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlInsertRequest_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlInsertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlInsertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlInsertRequest_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlInsertRequest_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlInsertResponse_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlInsertResponse_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlInsertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlInsertResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlInsertResponse_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MysqlInsertResponse_mysql_5fproxy_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MysqlQueryRequest_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlQueryRequest_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlQueryRequest_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlQueryRequest_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlQueryRequestByFilter_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlQueryRequestByFilter_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlQueryRequestByFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlQueryRequestByFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlQueryRequestByFilter_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlQueryRequestByFilter_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlQueryResponse_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlQueryResponse_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlQueryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlQueryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlQueryResponse_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlQueryResponse_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlRow_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlRow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlRow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlTable_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlUpdateRequest_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlUpdateRequest_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlUpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MysqlUpdateRequest_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MysqlUpdateRequest_mysql_5fproxy_5fmsg_2eproto}, {
      &scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MysqlUpdateResponse_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlUpdateResponse_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlUpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlUpdateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlUpdateResponse_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MysqlUpdateResponse_mysql_5fproxy_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mysql_proxy_msg::_MysqlValue_default_instance_;
    new (ptr) ::mysql_proxy_msg::MysqlValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mysql_proxy_msg::MysqlValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mysql_5fproxy_5fmsg_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mysql_5fproxy_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mysql_5fproxy_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, db_type_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, type_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, int32_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, int64_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, uint32_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, uint64_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, string_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, bytes_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, float_v_),
  offsetof(::mysql_proxy_msg::MysqlValueDefaultTypeInternal, double_v_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlField, index_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlField, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlRow, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, db_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeRequest, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, index_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, flags_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, type_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescTable, db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescTable, table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescTable, fields_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescTable, result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse, result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse, error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse, tables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequest, table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequest, primary_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryResponse, result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryResponse, error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryResponse, table_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryResponse, sql_statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertRequest, table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertRequest, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, affected_rows_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, insert_id_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, sql_statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateRequest, table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateRequest, fields_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateRequest, primary_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, affected_rows_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, insert_id_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, sql_statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteRequest, table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteRequest, primary_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteResponse, result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteResponse, error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteResponse, affected_rows_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteResponse, sql_statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequestByFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequestByFilter, db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequestByFilter, table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequestByFilter, key_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mysql_proxy_msg::MysqlValue)},
  { 16, -1, sizeof(::mysql_proxy_msg::MysqlField)},
  { 23, -1, sizeof(::mysql_proxy_msg::MysqlRow)},
  { 29, -1, sizeof(::mysql_proxy_msg::MysqlTable)},
  { 37, -1, sizeof(::mysql_proxy_msg::MysqlDescribeRequest)},
  { 43, -1, sizeof(::mysql_proxy_msg::MysqlDescField)},
  { 53, -1, sizeof(::mysql_proxy_msg::MysqlDescTable)},
  { 62, 69, sizeof(::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse)},
  { 71, -1, sizeof(::mysql_proxy_msg::MysqlDescribeResponse)},
  { 79, -1, sizeof(::mysql_proxy_msg::MysqlQueryRequest)},
  { 87, -1, sizeof(::mysql_proxy_msg::MysqlQueryResponse)},
  { 96, -1, sizeof(::mysql_proxy_msg::MysqlInsertRequest)},
  { 104, -1, sizeof(::mysql_proxy_msg::MysqlInsertResponse)},
  { 114, -1, sizeof(::mysql_proxy_msg::MysqlUpdateRequest)},
  { 123, -1, sizeof(::mysql_proxy_msg::MysqlUpdateResponse)},
  { 133, -1, sizeof(::mysql_proxy_msg::MysqlDeleteRequest)},
  { 141, -1, sizeof(::mysql_proxy_msg::MysqlDeleteResponse)},
  { 150, -1, sizeof(::mysql_proxy_msg::MysqlQueryRequestByFilter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlDescribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlDescField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlDescTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlDescribeResponse_TablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlDescribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlQueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlInsertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlInsertResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlUpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlDeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mysql_proxy_msg::_MysqlQueryRequestByFilter_default_instance_),
};

const char descriptor_table_protodef_mysql_5fproxy_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025mysql_proxy_msg.proto\022\017mysql_proxy_msg"
  "\"\372\001\n\nMysqlValue\022\017\n\007db_type\030\001 \001(\005\0224\n\004type"
  "\030\002 \001(\0162&.mysql_proxy_msg.MysqlScalarValu"
  "eTypes\022\021\n\007int32_v\030e \001(\005H\000\022\021\n\007int64_v\030f \001"
  "(\003H\000\022\022\n\010uint32_v\030g \001(\rH\000\022\022\n\010uint64_v\030h \001"
  "(\004H\000\022\022\n\010string_v\030i \001(\tH\000\022\021\n\007bytes_v\030j \001("
  "\014H\000\022\021\n\007float_v\030k \001(\002H\000\022\022\n\010double_v\030l \001(\001"
  "H\000B\t\n\007payload\"G\n\nMysqlField\022\r\n\005index\030\001 \001"
  "(\r\022*\n\005value\030\002 \001(\0132\033.mysql_proxy_msg.Mysq"
  "lValue\"7\n\010MysqlRow\022+\n\006fields\030\001 \003(\0132\033.mys"
  "ql_proxy_msg.MysqlField\"O\n\nMysqlTable\022\n\n"
  "\002db\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\'\n\004rows\030\003 \003(\0132\031."
  "mysql_proxy_msg.MysqlRow\"%\n\024MysqlDescrib"
  "eRequest\022\r\n\005names\030\001 \003(\t\"Z\n\016MysqlDescFiel"
  "d\022\r\n\005index\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005flags\030"
  "\003 \001(\r\022\014\n\004type\030\004 \001(\r\022\016\n\006offset\030\005 \001(\r\"v\n\016M"
  "ysqlDescTable\022\017\n\007db_name\030\001 \001(\t\022\022\n\ntable_"
  "name\030\002 \001(\t\022/\n\006fields\030\003 \003(\0132\037.mysql_proxy"
  "_msg.MysqlDescField\022\016\n\006result\030\004 \001(\010\"\317\001\n\025"
  "MysqlDescribeResponse\022\016\n\006result\030\001 \001(\010\022\022\n"
  "\nerror_info\030\002 \001(\014\022B\n\006tables\030\003 \003(\01322.mysq"
  "l_proxy_msg.MysqlDescribeResponse.Tables"
  "Entry\032N\n\013TablesEntry\022\013\n\003key\030\001 \001(\t\022.\n\005val"
  "ue\030\002 \001(\0132\037.mysql_proxy_msg.MysqlDescTabl"
  "e:\0028\001\"j\n\021MysqlQueryRequest\022\017\n\007db_name\030\001 "
  "\001(\t\022\022\n\ntable_name\030\002 \001(\t\0220\n\013primary_key\030\003"
  " \003(\0132\033.mysql_proxy_msg.MysqlField\"{\n\022Mys"
  "qlQueryResponse\022\016\n\006result\030\001 \001(\010\022\022\n\nerror"
  "_info\030\002 \001(\014\022*\n\005table\030\003 \001(\0132\033.mysql_proxy"
  "_msg.MysqlTable\022\025\n\rsql_statement\030\004 \001(\014\"f"
  "\n\022MysqlInsertRequest\022\017\n\007db_name\030\001 \001(\t\022\022\n"
  "\ntable_name\030\002 \001(\t\022+\n\006fields\030\003 \003(\0132\033.mysq"
  "l_proxy_msg.MysqlField\"z\n\023MysqlInsertRes"
  "ponse\022\016\n\006result\030\001 \001(\010\022\022\n\nerror_info\030\002 \001("
  "\014\022\025\n\raffected_rows\030\003 \001(\004\022\021\n\tinsert_id\030\004 "
  "\001(\004\022\025\n\rsql_statement\030\005 \001(\014\"\230\001\n\022MysqlUpda"
  "teRequest\022\017\n\007db_name\030\001 \001(\t\022\022\n\ntable_name"
  "\030\002 \001(\t\022+\n\006fields\030\003 \003(\0132\033.mysql_proxy_msg"
  ".MysqlField\0220\n\013primary_key\030\004 \003(\0132\033.mysql"
  "_proxy_msg.MysqlField\"z\n\023MysqlUpdateResp"
  "onse\022\016\n\006result\030\001 \001(\010\022\022\n\nerror_info\030\002 \001(\014"
  "\022\025\n\raffected_rows\030\003 \001(\004\022\021\n\tinsert_id\030\004 \001"
  "(\004\022\025\n\rsql_statement\030\005 \001(\014\"k\n\022MysqlDelete"
  "Request\022\017\n\007db_name\030\001 \001(\t\022\022\n\ntable_name\030\002"
  " \001(\t\0220\n\013primary_key\030\003 \003(\0132\033.mysql_proxy_"
  "msg.MysqlField\"g\n\023MysqlDeleteResponse\022\016\n"
  "\006result\030\001 \001(\010\022\022\n\nerror_info\030\002 \001(\014\022\025\n\raff"
  "ected_rows\030\003 \001(\004\022\025\n\rsql_statement\030\004 \001(\014\""
  "j\n\031MysqlQueryRequestByFilter\022\017\n\007db_name\030"
  "\001 \001(\t\022\022\n\ntable_name\030\002 \001(\t\022(\n\003key\030\003 \003(\0132\033"
  ".mysql_proxy_msg.MysqlField*\252\001\n\025MysqlSca"
  "larValueTypes\022\r\n\tMSVT_None\020\000\022\016\n\nMSVT_INT"
  "32\020\001\022\016\n\nMSVT_INT64\020\002\022\017\n\013MSVT_UINT32\020\003\022\017\n"
  "\013MSVT_UINT64\020\004\022\017\n\013MSVT_STRING\020\005\022\016\n\nMSVT_"
  "BYTES\020\006\022\016\n\nMSVT_FLOAT\020\007\022\017\n\013MSVT_DOUBLE\020\010"
  "*~\n\025MysqlDataManipulation\022\014\n\010MDM_None\020\000\022"
  "\016\n\nMDM_SELECT\020\001\022\016\n\nMDM_UPDATE\020\002\022\016\n\nMDM_D"
  "ELETE\020\003\022\016\n\nMDM_INSERT\020\004\022\027\n\023MDM_QUERY_BY_"
  "FILTER\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mysql_5fproxy_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mysql_5fproxy_5fmsg_2eproto_sccs[18] = {
  &scc_info_MysqlDeleteRequest_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlDeleteResponse_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlDescField_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlDescTable_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlDescribeRequest_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlDescribeResponse_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlDescribeResponse_TablesEntry_DoNotUse_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlInsertRequest_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlInsertResponse_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlQueryRequest_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlQueryRequestByFilter_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlQueryResponse_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlUpdateRequest_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlUpdateResponse_mysql_5fproxy_5fmsg_2eproto.base,
  &scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mysql_5fproxy_5fmsg_2eproto_once;
static bool descriptor_table_mysql_5fproxy_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mysql_5fproxy_5fmsg_2eproto = {
  &descriptor_table_mysql_5fproxy_5fmsg_2eproto_initialized, descriptor_table_protodef_mysql_5fproxy_5fmsg_2eproto, "mysql_proxy_msg.proto", 2336,
  &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once, descriptor_table_mysql_5fproxy_5fmsg_2eproto_sccs, descriptor_table_mysql_5fproxy_5fmsg_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_mysql_5fproxy_5fmsg_2eproto::offsets,
  file_level_metadata_mysql_5fproxy_5fmsg_2eproto, 18, file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto, file_level_service_descriptors_mysql_5fproxy_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mysql_5fproxy_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mysql_5fproxy_5fmsg_2eproto), true);
namespace mysql_proxy_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MysqlScalarValueTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mysql_5fproxy_5fmsg_2eproto);
  return file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto[0];
}
bool MysqlScalarValueTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MysqlDataManipulation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mysql_5fproxy_5fmsg_2eproto);
  return file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto[1];
}
bool MysqlDataManipulation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MysqlValue::InitAsDefaultInstance() {
  ::mysql_proxy_msg::_MysqlValue_default_instance_.int32_v_ = 0;
  ::mysql_proxy_msg::_MysqlValue_default_instance_.int64_v_ = PROTOBUF_LONGLONG(0);
  ::mysql_proxy_msg::_MysqlValue_default_instance_.uint32_v_ = 0u;
  ::mysql_proxy_msg::_MysqlValue_default_instance_.uint64_v_ = PROTOBUF_ULONGLONG(0);
  ::mysql_proxy_msg::_MysqlValue_default_instance_.string_v_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::mysql_proxy_msg::_MysqlValue_default_instance_.bytes_v_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::mysql_proxy_msg::_MysqlValue_default_instance_.float_v_ = 0;
  ::mysql_proxy_msg::_MysqlValue_default_instance_.double_v_ = 0;
}
class MysqlValue::_Internal {
 public:
};

MysqlValue::MysqlValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlValue)
}
MysqlValue::MysqlValue(const MysqlValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&db_type_, &from.db_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&db_type_)) + sizeof(type_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kInt32V: {
      _internal_set_int32_v(from._internal_int32_v());
      break;
    }
    case kInt64V: {
      _internal_set_int64_v(from._internal_int64_v());
      break;
    }
    case kUint32V: {
      _internal_set_uint32_v(from._internal_uint32_v());
      break;
    }
    case kUint64V: {
      _internal_set_uint64_v(from._internal_uint64_v());
      break;
    }
    case kStringV: {
      _internal_set_string_v(from._internal_string_v());
      break;
    }
    case kBytesV: {
      _internal_set_bytes_v(from._internal_bytes_v());
      break;
    }
    case kFloatV: {
      _internal_set_float_v(from._internal_float_v());
      break;
    }
    case kDoubleV: {
      _internal_set_double_v(from._internal_double_v());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlValue)
}

void MysqlValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto.base);
  ::memset(&db_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&db_type_)) + sizeof(type_));
  clear_has_payload();
}

MysqlValue::~MysqlValue() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlValue)
  SharedDtor();
}

void MysqlValue::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void MysqlValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlValue& MysqlValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlValue_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlValue::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:mysql_proxy_msg.MysqlValue)
  switch (payload_case()) {
    case kInt32V: {
      // No need to clear
      break;
    }
    case kInt64V: {
      // No need to clear
      break;
    }
    case kUint32V: {
      // No need to clear
      break;
    }
    case kUint64V: {
      // No need to clear
      break;
    }
    case kStringV: {
      payload_.string_v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBytesV: {
      payload_.bytes_v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFloatV: {
      // No need to clear
      break;
    }
    case kDoubleV: {
      // No need to clear
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void MysqlValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&db_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&db_type_)) + sizeof(type_));
  clear_payload();
  _internal_metadata_.Clear();
}

const char* MysqlValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 db_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          db_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mysql_proxy_msg.MysqlScalarValueTypes type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mysql_proxy_msg::MysqlScalarValueTypes>(val));
        } else goto handle_unusual;
        continue;
      // int32 int32_v = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_int32_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64_v = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_int64_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uint32_v = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_uint32_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uint64_v = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_uint64_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_v = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_string_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlValue.string_v"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bytes_v = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_bytes_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_v = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _internal_set_float_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double_v = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _internal_set_double_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 db_type = 1;
  if (this->db_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_db_type(), target);
  }

  // .mysql_proxy_msg.MysqlScalarValueTypes type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 int32_v = 101;
  if (_internal_has_int32_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(101, this->_internal_int32_v(), target);
  }

  // int64 int64_v = 102;
  if (_internal_has_int64_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(102, this->_internal_int64_v(), target);
  }

  // uint32 uint32_v = 103;
  if (_internal_has_uint32_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(103, this->_internal_uint32_v(), target);
  }

  // uint64 uint64_v = 104;
  if (_internal_has_uint64_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(104, this->_internal_uint64_v(), target);
  }

  // string string_v = 105;
  if (_internal_has_string_v()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_v().data(), static_cast<int>(this->_internal_string_v().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlValue.string_v");
    target = stream->WriteStringMaybeAliased(
        105, this->_internal_string_v(), target);
  }

  // bytes bytes_v = 106;
  if (_internal_has_bytes_v()) {
    target = stream->WriteBytesMaybeAliased(
        106, this->_internal_bytes_v(), target);
  }

  // float float_v = 107;
  if (_internal_has_float_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(107, this->_internal_float_v(), target);
  }

  // double double_v = 108;
  if (_internal_has_double_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(108, this->_internal_double_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlValue)
  return target;
}

size_t MysqlValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 db_type = 1;
  if (this->db_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_db_type());
  }

  // .mysql_proxy_msg.MysqlScalarValueTypes type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (payload_case()) {
    // int32 int32_v = 101;
    case kInt32V: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32_v());
      break;
    }
    // int64 int64_v = 102;
    case kInt64V: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int64_v());
      break;
    }
    // uint32 uint32_v = 103;
    case kUint32V: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_v());
      break;
    }
    // uint64 uint64_v = 104;
    case kUint64V: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64_v());
      break;
    }
    // string string_v = 105;
    case kStringV: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_v());
      break;
    }
    // bytes bytes_v = 106;
    case kBytesV: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_v());
      break;
    }
    // float float_v = 107;
    case kFloatV: {
      total_size += 2 + 4;
      break;
    }
    // double double_v = 108;
    case kDoubleV: {
      total_size += 2 + 8;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlValue)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlValue)
    MergeFrom(*source);
  }
}

void MysqlValue::MergeFrom(const MysqlValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_type() != 0) {
    _internal_set_db_type(from._internal_db_type());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.payload_case()) {
    case kInt32V: {
      _internal_set_int32_v(from._internal_int32_v());
      break;
    }
    case kInt64V: {
      _internal_set_int64_v(from._internal_int64_v());
      break;
    }
    case kUint32V: {
      _internal_set_uint32_v(from._internal_uint32_v());
      break;
    }
    case kUint64V: {
      _internal_set_uint64_v(from._internal_uint64_v());
      break;
    }
    case kStringV: {
      _internal_set_string_v(from._internal_string_v());
      break;
    }
    case kBytesV: {
      _internal_set_bytes_v(from._internal_bytes_v());
      break;
    }
    case kFloatV: {
      _internal_set_float_v(from._internal_float_v());
      break;
    }
    case kDoubleV: {
      _internal_set_double_v(from._internal_double_v());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void MysqlValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlValue::CopyFrom(const MysqlValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlValue::IsInitialized() const {
  return true;
}

void MysqlValue::InternalSwap(MysqlValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(db_type_, other->db_type_);
  swap(type_, other->type_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlField::InitAsDefaultInstance() {
  ::mysql_proxy_msg::_MysqlField_default_instance_._instance.get_mutable()->value_ = const_cast< ::mysql_proxy_msg::MysqlValue*>(
      ::mysql_proxy_msg::MysqlValue::internal_default_instance());
}
class MysqlField::_Internal {
 public:
  static const ::mysql_proxy_msg::MysqlValue& value(const MysqlField* msg);
};

const ::mysql_proxy_msg::MysqlValue&
MysqlField::_Internal::value(const MysqlField* msg) {
  return *msg->value_;
}
MysqlField::MysqlField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlField)
}
MysqlField::MysqlField(const MysqlField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::mysql_proxy_msg::MysqlValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlField)
}

void MysqlField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(index_));
}

MysqlField::~MysqlField() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlField)
  SharedDtor();
}

void MysqlField::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void MysqlField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlField& MysqlField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlField_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlField::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  index_ = 0u;
  _internal_metadata_.Clear();
}

const char* MysqlField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mysql_proxy_msg.MysqlValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .mysql_proxy_msg.MysqlValue value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlField)
  return target;
}

size_t MysqlField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mysql_proxy_msg.MysqlValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlField)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlField)
    MergeFrom(*source);
  }
}

void MysqlField::MergeFrom(const MysqlField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::mysql_proxy_msg::MysqlValue::MergeFrom(from._internal_value());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void MysqlField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlField::CopyFrom(const MysqlField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlField::IsInitialized() const {
  return true;
}

void MysqlField::InternalSwap(MysqlField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlRow::InitAsDefaultInstance() {
}
class MysqlRow::_Internal {
 public:
};

MysqlRow::MysqlRow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlRow)
}
MysqlRow::MysqlRow(const MysqlRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlRow)
}

void MysqlRow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto.base);
}

MysqlRow::~MysqlRow() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlRow)
  SharedDtor();
}

void MysqlRow::SharedDtor() {
}

void MysqlRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlRow& MysqlRow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlRow_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlRow::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear();
}

const char* MysqlRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mysql_proxy_msg.MysqlField fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlRow)
  return target;
}

size_t MysqlRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlRow)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlRow)
    MergeFrom(*source);
  }
}

void MysqlRow::MergeFrom(const MysqlRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void MysqlRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlRow::CopyFrom(const MysqlRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlRow::IsInitialized() const {
  return true;
}

void MysqlRow::InternalSwap(MysqlRow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlRow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlTable::InitAsDefaultInstance() {
}
class MysqlTable::_Internal {
 public:
};

MysqlTable::MysqlTable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlTable)
}
MysqlTable::MysqlTable(const MysqlTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db().empty()) {
    db_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlTable)
}

void MysqlTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto.base);
  db_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MysqlTable::~MysqlTable() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlTable)
  SharedDtor();
}

void MysqlTable::SharedDtor() {
  db_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlTable& MysqlTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlTable_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlTable::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  db_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MysqlTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string db = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_db();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlTable.db"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlTable.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlRow rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db = 1;
  if (this->db().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db().data(), static_cast<int>(this->_internal_db().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlTable.db");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlTable.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlRow rows = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlTable)
  return target;
}

size_t MysqlTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlRow rows = 3;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db = 1;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlTable)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlTable)
    MergeFrom(*source);
  }
}

void MysqlTable::MergeFrom(const MysqlTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MysqlTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlTable::CopyFrom(const MysqlTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlTable::IsInitialized() const {
  return true;
}

void MysqlTable::InternalSwap(MysqlTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rows_.InternalSwap(&other->rows_);
  db_.Swap(&other->db_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlDescribeRequest::InitAsDefaultInstance() {
}
class MysqlDescribeRequest::_Internal {
 public:
};

MysqlDescribeRequest::MysqlDescribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlDescribeRequest)
}
MysqlDescribeRequest::MysqlDescribeRequest(const MysqlDescribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      names_(from.names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDescribeRequest)
}

void MysqlDescribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlDescribeRequest_mysql_5fproxy_5fmsg_2eproto.base);
}

MysqlDescribeRequest::~MysqlDescribeRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDescribeRequest)
  SharedDtor();
}

void MysqlDescribeRequest::SharedDtor() {
}

void MysqlDescribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlDescribeRequest& MysqlDescribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlDescribeRequest_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlDescribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDescribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  _internal_metadata_.Clear();
}

const char* MysqlDescribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlDescribeRequest.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlDescribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDescribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDescribeRequest.names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDescribeRequest)
  return target;
}

size_t MysqlDescribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDescribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlDescribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlDescribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlDescribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlDescribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlDescribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlDescribeRequest)
    MergeFrom(*source);
  }
}

void MysqlDescribeRequest::MergeFrom(const MysqlDescribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDescribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
}

void MysqlDescribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlDescribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlDescribeRequest::CopyFrom(const MysqlDescribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDescribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDescribeRequest::IsInitialized() const {
  return true;
}

void MysqlDescribeRequest::InternalSwap(MysqlDescribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDescribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlDescField::InitAsDefaultInstance() {
}
class MysqlDescField::_Internal {
 public:
};

MysqlDescField::MysqlDescField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlDescField)
}
MysqlDescField::MysqlDescField(const MysqlDescField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&index_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDescField)
}

void MysqlDescField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlDescField_mysql_5fproxy_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&index_)) + sizeof(offset_));
}

MysqlDescField::~MysqlDescField() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDescField)
  SharedDtor();
}

void MysqlDescField::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlDescField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlDescField& MysqlDescField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlDescField_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlDescField::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDescField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&index_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* MysqlDescField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlDescField.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlDescField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDescField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDescField.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // uint32 offset = 5;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDescField)
  return target;
}

size_t MysqlDescField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDescField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 offset = 5;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlDescField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlDescField)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlDescField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlDescField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlDescField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlDescField)
    MergeFrom(*source);
  }
}

void MysqlDescField::MergeFrom(const MysqlDescField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDescField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void MysqlDescField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlDescField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlDescField::CopyFrom(const MysqlDescField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDescField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDescField::IsInitialized() const {
  return true;
}

void MysqlDescField::InternalSwap(MysqlDescField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(flags_, other->flags_);
  swap(type_, other->type_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDescField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlDescTable::InitAsDefaultInstance() {
}
class MysqlDescTable::_Internal {
 public:
};

MysqlDescTable::MysqlDescTable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlDescTable)
}
MysqlDescTable::MysqlDescTable(const MysqlDescTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDescTable)
}

void MysqlDescTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlDescTable_mysql_5fproxy_5fmsg_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = false;
}

MysqlDescTable::~MysqlDescTable() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDescTable)
  SharedDtor();
}

void MysqlDescTable::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlDescTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlDescTable& MysqlDescTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlDescTable_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlDescTable::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDescTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = false;
  _internal_metadata_.Clear();
}

const char* MysqlDescTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlDescTable.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlDescTable.table_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlDescField fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlDescTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDescTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDescTable.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDescTable.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlDescField fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fields(i), target, stream);
  }

  // bool result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDescTable)
  return target;
}

size_t MysqlDescTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDescTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlDescField fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // bool result = 4;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlDescTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlDescTable)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlDescTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlDescTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlDescTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlDescTable)
    MergeFrom(*source);
  }
}

void MysqlDescTable::MergeFrom(const MysqlDescTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDescTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MysqlDescTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlDescTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlDescTable::CopyFrom(const MysqlDescTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDescTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDescTable::IsInitialized() const {
  return true;
}

void MysqlDescTable::InternalSwap(MysqlDescTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDescTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MysqlDescribeResponse_TablesEntry_DoNotUse::MysqlDescribeResponse_TablesEntry_DoNotUse() {}
MysqlDescribeResponse_TablesEntry_DoNotUse::MysqlDescribeResponse_TablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MysqlDescribeResponse_TablesEntry_DoNotUse::MergeFrom(const MysqlDescribeResponse_TablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MysqlDescribeResponse_TablesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MysqlDescribeResponse_TablesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MysqlDescribeResponse::InitAsDefaultInstance() {
}
class MysqlDescribeResponse::_Internal {
 public:
};

MysqlDescribeResponse::MysqlDescribeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlDescribeResponse)
}
MysqlDescribeResponse::MysqlDescribeResponse(const MysqlDescribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tables_.MergeFrom(from.tables_);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_info().empty()) {
    error_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDescribeResponse)
}

void MysqlDescribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlDescribeResponse_mysql_5fproxy_5fmsg_2eproto.base);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = false;
}

MysqlDescribeResponse::~MysqlDescribeResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDescribeResponse)
  SharedDtor();
}

void MysqlDescribeResponse::SharedDtor() {
  error_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlDescribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlDescribeResponse& MysqlDescribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlDescribeResponse_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlDescribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDescribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  error_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = false;
  _internal_metadata_.Clear();
}

const char* MysqlDescribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .mysql_proxy_msg.MysqlDescTable> tables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlDescribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDescribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // map<string, .mysql_proxy_msg.MysqlDescTable> tables = 3;
  if (!this->_internal_tables().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mysql_proxy_msg.MysqlDescribeResponse.TablesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tables().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >::const_iterator
          it = this->_internal_tables().begin();
          it != this->_internal_tables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MysqlDescribeResponse_TablesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >::const_iterator
          it = this->_internal_tables().begin();
          it != this->_internal_tables().end(); ++it) {
        target = MysqlDescribeResponse_TablesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDescribeResponse)
  return target;
}

size_t MysqlDescribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDescribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mysql_proxy_msg.MysqlDescTable> tables = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >::const_iterator
      it = this->_internal_tables().begin();
      it != this->_internal_tables().end(); ++it) {
    total_size += MysqlDescribeResponse_TablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlDescribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlDescribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlDescribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlDescribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlDescribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlDescribeResponse)
    MergeFrom(*source);
  }
}

void MysqlDescribeResponse::MergeFrom(const MysqlDescribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDescribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  if (from.error_info().size() > 0) {

    error_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MysqlDescribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlDescribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlDescribeResponse::CopyFrom(const MysqlDescribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDescribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDescribeResponse::IsInitialized() const {
  return true;
}

void MysqlDescribeResponse::InternalSwap(MysqlDescribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tables_.Swap(&other->tables_);
  error_info_.Swap(&other->error_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDescribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlQueryRequest::InitAsDefaultInstance() {
}
class MysqlQueryRequest::_Internal {
 public:
};

MysqlQueryRequest::MysqlQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlQueryRequest)
}
MysqlQueryRequest::MysqlQueryRequest(const MysqlQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      primary_key_(from.primary_key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlQueryRequest)
}

void MysqlQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlQueryRequest_mysql_5fproxy_5fmsg_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MysqlQueryRequest::~MysqlQueryRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlQueryRequest)
  SharedDtor();
}

void MysqlQueryRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlQueryRequest& MysqlQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlQueryRequest_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_key_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MysqlQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlQueryRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlQueryRequest.table_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primary_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlQueryRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlQueryRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_primary_key_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_primary_key(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlQueryRequest)
  return target;
}

size_t MysqlQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
  total_size += 1UL * this->_internal_primary_key_size();
  for (const auto& msg : this->primary_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlQueryRequest)
    MergeFrom(*source);
  }
}

void MysqlQueryRequest::MergeFrom(const MysqlQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  primary_key_.MergeFrom(from.primary_key_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void MysqlQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlQueryRequest::CopyFrom(const MysqlQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQueryRequest::IsInitialized() const {
  return true;
}

void MysqlQueryRequest::InternalSwap(MysqlQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  primary_key_.InternalSwap(&other->primary_key_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlQueryResponse::InitAsDefaultInstance() {
  ::mysql_proxy_msg::_MysqlQueryResponse_default_instance_._instance.get_mutable()->table_ = const_cast< ::mysql_proxy_msg::MysqlTable*>(
      ::mysql_proxy_msg::MysqlTable::internal_default_instance());
}
class MysqlQueryResponse::_Internal {
 public:
  static const ::mysql_proxy_msg::MysqlTable& table(const MysqlQueryResponse* msg);
};

const ::mysql_proxy_msg::MysqlTable&
MysqlQueryResponse::_Internal::table(const MysqlQueryResponse* msg) {
  return *msg->table_;
}
MysqlQueryResponse::MysqlQueryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlQueryResponse)
}
MysqlQueryResponse::MysqlQueryResponse(const MysqlQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_info().empty()) {
    error_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  sql_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sql_statement().empty()) {
    sql_statement_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_statement_);
  }
  if (from._internal_has_table()) {
    table_ = new ::mysql_proxy_msg::MysqlTable(*from.table_);
  } else {
    table_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlQueryResponse)
}

void MysqlQueryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlQueryResponse_mysql_5fproxy_5fmsg_2eproto.base);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&table_)) + sizeof(result_));
}

MysqlQueryResponse::~MysqlQueryResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlQueryResponse)
  SharedDtor();
}

void MysqlQueryResponse::SharedDtor() {
  error_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete table_;
}

void MysqlQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlQueryResponse& MysqlQueryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlQueryResponse_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && table_ != nullptr) {
    delete table_;
  }
  table_ = nullptr;
  result_ = false;
  _internal_metadata_.Clear();
}

const char* MysqlQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mysql_proxy_msg.MysqlTable table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sql_statement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sql_statement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlQueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // .mysql_proxy_msg.MysqlTable table = 3;
  if (this->has_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::table(this), target, stream);
  }

  // bytes sql_statement = 4;
  if (this->sql_statement().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sql_statement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlQueryResponse)
  return target;
}

size_t MysqlQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlQueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bytes sql_statement = 4;
  if (this->sql_statement().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sql_statement());
  }

  // .mysql_proxy_msg.MysqlTable table = 3;
  if (this->has_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_);
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlQueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlQueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlQueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlQueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlQueryResponse)
    MergeFrom(*source);
  }
}

void MysqlQueryResponse::MergeFrom(const MysqlQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_info().size() > 0) {

    error_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  if (from.sql_statement().size() > 0) {

    sql_statement_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_statement_);
  }
  if (from.has_table()) {
    _internal_mutable_table()->::mysql_proxy_msg::MysqlTable::MergeFrom(from._internal_table());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MysqlQueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlQueryResponse::CopyFrom(const MysqlQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQueryResponse::IsInitialized() const {
  return true;
}

void MysqlQueryResponse::InternalSwap(MysqlQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_info_.Swap(&other->error_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sql_statement_.Swap(&other->sql_statement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(table_, other->table_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlQueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlInsertRequest::InitAsDefaultInstance() {
}
class MysqlInsertRequest::_Internal {
 public:
};

MysqlInsertRequest::MysqlInsertRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlInsertRequest)
}
MysqlInsertRequest::MysqlInsertRequest(const MysqlInsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlInsertRequest)
}

void MysqlInsertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlInsertRequest_mysql_5fproxy_5fmsg_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MysqlInsertRequest::~MysqlInsertRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlInsertRequest)
  SharedDtor();
}

void MysqlInsertRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlInsertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlInsertRequest& MysqlInsertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlInsertRequest_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlInsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlInsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MysqlInsertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlInsertRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlInsertRequest.table_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlInsertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlInsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlInsertRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlInsertRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlField fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlInsertRequest)
  return target;
}

size_t MysqlInsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlInsertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlInsertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlInsertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlInsertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlInsertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlInsertRequest)
    MergeFrom(*source);
  }
}

void MysqlInsertRequest::MergeFrom(const MysqlInsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void MysqlInsertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlInsertRequest::CopyFrom(const MysqlInsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlInsertRequest::IsInitialized() const {
  return true;
}

void MysqlInsertRequest::InternalSwap(MysqlInsertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlInsertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlInsertResponse::InitAsDefaultInstance() {
}
class MysqlInsertResponse::_Internal {
 public:
};

MysqlInsertResponse::MysqlInsertResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlInsertResponse)
}
MysqlInsertResponse::MysqlInsertResponse(const MysqlInsertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_info().empty()) {
    error_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  sql_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sql_statement().empty()) {
    sql_statement_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_statement_);
  }
  ::memcpy(&affected_rows_, &from.affected_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&affected_rows_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlInsertResponse)
}

void MysqlInsertResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlInsertResponse_mysql_5fproxy_5fmsg_2eproto.base);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&affected_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&affected_rows_)) + sizeof(result_));
}

MysqlInsertResponse::~MysqlInsertResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlInsertResponse)
  SharedDtor();
}

void MysqlInsertResponse::SharedDtor() {
  error_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlInsertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlInsertResponse& MysqlInsertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlInsertResponse_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlInsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlInsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&affected_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&affected_rows_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* MysqlInsertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 affected_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          affected_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 insert_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          insert_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sql_statement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sql_statement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlInsertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlInsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // uint64 affected_rows = 3;
  if (this->affected_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_affected_rows(), target);
  }

  // uint64 insert_id = 4;
  if (this->insert_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_insert_id(), target);
  }

  // bytes sql_statement = 5;
  if (this->sql_statement().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sql_statement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlInsertResponse)
  return target;
}

size_t MysqlInsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlInsertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bytes sql_statement = 5;
  if (this->sql_statement().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sql_statement());
  }

  // uint64 affected_rows = 3;
  if (this->affected_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_affected_rows());
  }

  // uint64 insert_id = 4;
  if (this->insert_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_insert_id());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlInsertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlInsertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlInsertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlInsertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlInsertResponse)
    MergeFrom(*source);
  }
}

void MysqlInsertResponse::MergeFrom(const MysqlInsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_info().size() > 0) {

    error_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  if (from.sql_statement().size() > 0) {

    sql_statement_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_statement_);
  }
  if (from.affected_rows() != 0) {
    _internal_set_affected_rows(from._internal_affected_rows());
  }
  if (from.insert_id() != 0) {
    _internal_set_insert_id(from._internal_insert_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MysqlInsertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlInsertResponse::CopyFrom(const MysqlInsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlInsertResponse::IsInitialized() const {
  return true;
}

void MysqlInsertResponse::InternalSwap(MysqlInsertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_info_.Swap(&other->error_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sql_statement_.Swap(&other->sql_statement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(affected_rows_, other->affected_rows_);
  swap(insert_id_, other->insert_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlInsertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlUpdateRequest::InitAsDefaultInstance() {
}
class MysqlUpdateRequest::_Internal {
 public:
};

MysqlUpdateRequest::MysqlUpdateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlUpdateRequest)
}
MysqlUpdateRequest::MysqlUpdateRequest(const MysqlUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_),
      primary_key_(from.primary_key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlUpdateRequest)
}

void MysqlUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlUpdateRequest_mysql_5fproxy_5fmsg_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MysqlUpdateRequest::~MysqlUpdateRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlUpdateRequest)
  SharedDtor();
}

void MysqlUpdateRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlUpdateRequest& MysqlUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlUpdateRequest_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  primary_key_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MysqlUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlUpdateRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlUpdateRequest.table_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField primary_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primary_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlUpdateRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlUpdateRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlField fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fields(i), target, stream);
  }

  // repeated .mysql_proxy_msg.MysqlField primary_key = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_primary_key_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_primary_key(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlUpdateRequest)
  return target;
}

size_t MysqlUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mysql_proxy_msg.MysqlField primary_key = 4;
  total_size += 1UL * this->_internal_primary_key_size();
  for (const auto& msg : this->primary_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlUpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlUpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlUpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlUpdateRequest)
    MergeFrom(*source);
  }
}

void MysqlUpdateRequest::MergeFrom(const MysqlUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  primary_key_.MergeFrom(from.primary_key_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void MysqlUpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlUpdateRequest::CopyFrom(const MysqlUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlUpdateRequest::IsInitialized() const {
  return true;
}

void MysqlUpdateRequest::InternalSwap(MysqlUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  primary_key_.InternalSwap(&other->primary_key_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlUpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlUpdateResponse::InitAsDefaultInstance() {
}
class MysqlUpdateResponse::_Internal {
 public:
};

MysqlUpdateResponse::MysqlUpdateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlUpdateResponse)
}
MysqlUpdateResponse::MysqlUpdateResponse(const MysqlUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_info().empty()) {
    error_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  sql_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sql_statement().empty()) {
    sql_statement_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_statement_);
  }
  ::memcpy(&affected_rows_, &from.affected_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&affected_rows_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlUpdateResponse)
}

void MysqlUpdateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlUpdateResponse_mysql_5fproxy_5fmsg_2eproto.base);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&affected_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&affected_rows_)) + sizeof(result_));
}

MysqlUpdateResponse::~MysqlUpdateResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlUpdateResponse)
  SharedDtor();
}

void MysqlUpdateResponse::SharedDtor() {
  error_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlUpdateResponse& MysqlUpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlUpdateResponse_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&affected_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&affected_rows_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* MysqlUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 affected_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          affected_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 insert_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          insert_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sql_statement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sql_statement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlUpdateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // uint64 affected_rows = 3;
  if (this->affected_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_affected_rows(), target);
  }

  // uint64 insert_id = 4;
  if (this->insert_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_insert_id(), target);
  }

  // bytes sql_statement = 5;
  if (this->sql_statement().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sql_statement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlUpdateResponse)
  return target;
}

size_t MysqlUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlUpdateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bytes sql_statement = 5;
  if (this->sql_statement().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sql_statement());
  }

  // uint64 affected_rows = 3;
  if (this->affected_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_affected_rows());
  }

  // uint64 insert_id = 4;
  if (this->insert_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_insert_id());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlUpdateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlUpdateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlUpdateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlUpdateResponse)
    MergeFrom(*source);
  }
}

void MysqlUpdateResponse::MergeFrom(const MysqlUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_info().size() > 0) {

    error_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  if (from.sql_statement().size() > 0) {

    sql_statement_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_statement_);
  }
  if (from.affected_rows() != 0) {
    _internal_set_affected_rows(from._internal_affected_rows());
  }
  if (from.insert_id() != 0) {
    _internal_set_insert_id(from._internal_insert_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MysqlUpdateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlUpdateResponse::CopyFrom(const MysqlUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlUpdateResponse::IsInitialized() const {
  return true;
}

void MysqlUpdateResponse::InternalSwap(MysqlUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_info_.Swap(&other->error_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sql_statement_.Swap(&other->sql_statement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(affected_rows_, other->affected_rows_);
  swap(insert_id_, other->insert_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlUpdateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlDeleteRequest::InitAsDefaultInstance() {
}
class MysqlDeleteRequest::_Internal {
 public:
};

MysqlDeleteRequest::MysqlDeleteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlDeleteRequest)
}
MysqlDeleteRequest::MysqlDeleteRequest(const MysqlDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      primary_key_(from.primary_key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDeleteRequest)
}

void MysqlDeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlDeleteRequest_mysql_5fproxy_5fmsg_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MysqlDeleteRequest::~MysqlDeleteRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDeleteRequest)
  SharedDtor();
}

void MysqlDeleteRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlDeleteRequest& MysqlDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlDeleteRequest_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_key_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MysqlDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlDeleteRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlDeleteRequest.table_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primary_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlDeleteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDeleteRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDeleteRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_primary_key_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_primary_key(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDeleteRequest)
  return target;
}

size_t MysqlDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
  total_size += 1UL * this->_internal_primary_key_size();
  for (const auto& msg : this->primary_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlDeleteRequest)
    MergeFrom(*source);
  }
}

void MysqlDeleteRequest::MergeFrom(const MysqlDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  primary_key_.MergeFrom(from.primary_key_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void MysqlDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlDeleteRequest::CopyFrom(const MysqlDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDeleteRequest::IsInitialized() const {
  return true;
}

void MysqlDeleteRequest::InternalSwap(MysqlDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  primary_key_.InternalSwap(&other->primary_key_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlDeleteResponse::InitAsDefaultInstance() {
}
class MysqlDeleteResponse::_Internal {
 public:
};

MysqlDeleteResponse::MysqlDeleteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlDeleteResponse)
}
MysqlDeleteResponse::MysqlDeleteResponse(const MysqlDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_info().empty()) {
    error_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  sql_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sql_statement().empty()) {
    sql_statement_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_statement_);
  }
  ::memcpy(&affected_rows_, &from.affected_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&affected_rows_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDeleteResponse)
}

void MysqlDeleteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlDeleteResponse_mysql_5fproxy_5fmsg_2eproto.base);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&affected_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&affected_rows_)) + sizeof(result_));
}

MysqlDeleteResponse::~MysqlDeleteResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDeleteResponse)
  SharedDtor();
}

void MysqlDeleteResponse::SharedDtor() {
  error_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlDeleteResponse& MysqlDeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlDeleteResponse_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_statement_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&affected_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&affected_rows_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* MysqlDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 affected_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          affected_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sql_statement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sql_statement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlDeleteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // uint64 affected_rows = 3;
  if (this->affected_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_affected_rows(), target);
  }

  // bytes sql_statement = 4;
  if (this->sql_statement().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sql_statement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDeleteResponse)
  return target;
}

size_t MysqlDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDeleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bytes sql_statement = 4;
  if (this->sql_statement().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sql_statement());
  }

  // uint64 affected_rows = 3;
  if (this->affected_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_affected_rows());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlDeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlDeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlDeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlDeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlDeleteResponse)
    MergeFrom(*source);
  }
}

void MysqlDeleteResponse::MergeFrom(const MysqlDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_info().size() > 0) {

    error_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  if (from.sql_statement().size() > 0) {

    sql_statement_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_statement_);
  }
  if (from.affected_rows() != 0) {
    _internal_set_affected_rows(from._internal_affected_rows());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MysqlDeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlDeleteResponse::CopyFrom(const MysqlDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDeleteResponse::IsInitialized() const {
  return true;
}

void MysqlDeleteResponse::InternalSwap(MysqlDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_info_.Swap(&other->error_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sql_statement_.Swap(&other->sql_statement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(affected_rows_, other->affected_rows_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlQueryRequestByFilter::InitAsDefaultInstance() {
}
class MysqlQueryRequestByFilter::_Internal {
 public:
};

MysqlQueryRequestByFilter::MysqlQueryRequestByFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_proxy_msg.MysqlQueryRequestByFilter)
}
MysqlQueryRequestByFilter::MysqlQueryRequestByFilter(const MysqlQueryRequestByFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      key_(from.key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlQueryRequestByFilter)
}

void MysqlQueryRequestByFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlQueryRequestByFilter_mysql_5fproxy_5fmsg_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MysqlQueryRequestByFilter::~MysqlQueryRequestByFilter() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlQueryRequestByFilter)
  SharedDtor();
}

void MysqlQueryRequestByFilter::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlQueryRequestByFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlQueryRequestByFilter& MysqlQueryRequestByFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlQueryRequestByFilter_mysql_5fproxy_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MysqlQueryRequestByFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlQueryRequestByFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MysqlQueryRequestByFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlQueryRequestByFilter.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mysql_proxy_msg.MysqlQueryRequestByFilter.table_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlQueryRequestByFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlQueryRequestByFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlQueryRequestByFilter.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlQueryRequestByFilter.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlField key = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_key_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_key(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlQueryRequestByFilter)
  return target;
}

size_t MysqlQueryRequestByFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlQueryRequestByFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField key = 3;
  total_size += 1UL * this->_internal_key_size();
  for (const auto& msg : this->key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlQueryRequestByFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mysql_proxy_msg.MysqlQueryRequestByFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlQueryRequestByFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlQueryRequestByFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mysql_proxy_msg.MysqlQueryRequestByFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mysql_proxy_msg.MysqlQueryRequestByFilter)
    MergeFrom(*source);
  }
}

void MysqlQueryRequestByFilter::MergeFrom(const MysqlQueryRequestByFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlQueryRequestByFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void MysqlQueryRequestByFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mysql_proxy_msg.MysqlQueryRequestByFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlQueryRequestByFilter::CopyFrom(const MysqlQueryRequestByFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlQueryRequestByFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQueryRequestByFilter::IsInitialized() const {
  return true;
}

void MysqlQueryRequestByFilter::InternalSwap(MysqlQueryRequestByFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.InternalSwap(&other->key_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlQueryRequestByFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mysql_proxy_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlValue* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlValue >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlField* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlField >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlField >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlRow* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlRow >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlRow >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlTable* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlTable >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlTable >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDescribeRequest* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDescribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlDescribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDescField* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDescField >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlDescField >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDescTable* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDescTable >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlDescTable >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDescribeResponse* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDescribeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlDescribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlQueryRequest* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlQueryResponse* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlQueryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlInsertRequest* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlInsertRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlInsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlInsertResponse* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlInsertResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlInsertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlUpdateRequest* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlUpdateResponse* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDeleteRequest* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDeleteResponse* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDeleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlQueryRequestByFilter* Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlQueryRequestByFilter >(Arena* arena) {
  return Arena::CreateInternal< ::mysql_proxy_msg::MysqlQueryRequestByFilter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
