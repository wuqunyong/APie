// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_msg.proto

#include "login_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace login_msg {
class MSG_REQUEST_CLIENT_LOGINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_REQUEST_CLIENT_LOGIN> _instance;
} _MSG_REQUEST_CLIENT_LOGIN_default_instance_;
class MSG_RESPONSE_CLIENT_LOGINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RESPONSE_CLIENT_LOGIN> _instance;
} _MSG_RESPONSE_CLIENT_LOGIN_default_instance_;
class MSG_LOGINSERVER_VALIDATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LOGINSERVER_VALIDATE> _instance;
} _MSG_LOGINSERVER_VALIDATE_default_instance_;
class MSG_Test1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Test1> _instance;
} _MSG_Test1_default_instance_;
class MSG_Test2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Test2> _instance;
} _MSG_Test2_default_instance_;
class MSG_Test3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Test3> _instance;
} _MSG_Test3_default_instance_;
class MSG_Test4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Test4> _instance;
} _MSG_Test4_default_instance_;
class MSG_Test5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Test5> _instance;
} _MSG_Test5_default_instance_;
}  // namespace login_msg
static void InitDefaultsscc_info_MSG_LOGINSERVER_VALIDATE_login_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::login_msg::_MSG_LOGINSERVER_VALIDATE_default_instance_;
    new (ptr) ::login_msg::MSG_LOGINSERVER_VALIDATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::login_msg::MSG_LOGINSERVER_VALIDATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_LOGINSERVER_VALIDATE_login_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_LOGINSERVER_VALIDATE_login_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_REQUEST_CLIENT_LOGIN_login_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::login_msg::_MSG_REQUEST_CLIENT_LOGIN_default_instance_;
    new (ptr) ::login_msg::MSG_REQUEST_CLIENT_LOGIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::login_msg::MSG_REQUEST_CLIENT_LOGIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_REQUEST_CLIENT_LOGIN_login_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_REQUEST_CLIENT_LOGIN_login_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RESPONSE_CLIENT_LOGIN_login_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::login_msg::_MSG_RESPONSE_CLIENT_LOGIN_default_instance_;
    new (ptr) ::login_msg::MSG_RESPONSE_CLIENT_LOGIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::login_msg::MSG_RESPONSE_CLIENT_LOGIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RESPONSE_CLIENT_LOGIN_login_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RESPONSE_CLIENT_LOGIN_login_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Test1_login_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::login_msg::_MSG_Test1_default_instance_;
    new (ptr) ::login_msg::MSG_Test1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::login_msg::MSG_Test1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Test1_login_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Test1_login_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Test2_login_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::login_msg::_MSG_Test2_default_instance_;
    new (ptr) ::login_msg::MSG_Test2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::login_msg::MSG_Test2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Test2_login_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Test2_login_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Test3_login_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::login_msg::_MSG_Test3_default_instance_;
    new (ptr) ::login_msg::MSG_Test3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::login_msg::MSG_Test3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Test3_login_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Test3_login_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Test4_login_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::login_msg::_MSG_Test4_default_instance_;
    new (ptr) ::login_msg::MSG_Test4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::login_msg::MSG_Test4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Test4_login_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Test4_login_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Test5_login_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::login_msg::_MSG_Test5_default_instance_;
    new (ptr) ::login_msg::MSG_Test5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::login_msg::MSG_Test5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Test5_login_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Test5_login_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_login_5fmsg_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_login_5fmsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_login_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_login_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_REQUEST_CLIENT_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_REQUEST_CLIENT_LOGIN, user_id_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_REQUEST_CLIENT_LOGIN, version_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_REQUEST_CLIENT_LOGIN, session_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_RESPONSE_CLIENT_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_RESPONSE_CLIENT_LOGIN, status_code_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_RESPONSE_CLIENT_LOGIN, user_id_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_RESPONSE_CLIENT_LOGIN, version_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_RESPONSE_CLIENT_LOGIN, is_newbie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_LOGINSERVER_VALIDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_LOGINSERVER_VALIDATE, user_id_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_LOGINSERVER_VALIDATE, port_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_LOGINSERVER_VALIDATE, is_real_name_flag_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_LOGINSERVER_VALIDATE, ip_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_LOGINSERVER_VALIDATE, check_out_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test1, id1_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test1, test1_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test2, id2_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test2, test2_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test3, id3_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test3, test3_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test4, id4_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test4, test4_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test5, id5_),
  PROTOBUF_FIELD_OFFSET(::login_msg::MSG_Test5, test5_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::login_msg::MSG_REQUEST_CLIENT_LOGIN)},
  { 8, -1, sizeof(::login_msg::MSG_RESPONSE_CLIENT_LOGIN)},
  { 17, -1, sizeof(::login_msg::MSG_LOGINSERVER_VALIDATE)},
  { 27, -1, sizeof(::login_msg::MSG_Test1)},
  { 34, -1, sizeof(::login_msg::MSG_Test2)},
  { 41, -1, sizeof(::login_msg::MSG_Test3)},
  { 48, -1, sizeof(::login_msg::MSG_Test4)},
  { 55, -1, sizeof(::login_msg::MSG_Test5)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::login_msg::_MSG_REQUEST_CLIENT_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::login_msg::_MSG_RESPONSE_CLIENT_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::login_msg::_MSG_LOGINSERVER_VALIDATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::login_msg::_MSG_Test1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::login_msg::_MSG_Test2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::login_msg::_MSG_Test3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::login_msg::_MSG_Test4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::login_msg::_MSG_Test5_default_instance_),
};

const char descriptor_table_protodef_login_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017login_msg.proto\022\tlogin_msg\"Q\n\030MSG_REQU"
  "EST_CLIENT_LOGIN\022\017\n\007user_id\030\001 \001(\004\022\017\n\007ver"
  "sion\030\002 \001(\005\022\023\n\013session_key\030\003 \001(\014\"e\n\031MSG_R"
  "ESPONSE_CLIENT_LOGIN\022\023\n\013status_code\030\001 \001("
  "\005\022\017\n\007user_id\030\002 \001(\004\022\017\n\007version\030\003 \001(\005\022\021\n\ti"
  "s_newbie\030\004 \001(\010\"x\n\030MSG_LOGINSERVER_VALIDA"
  "TE\022\017\n\007user_id\030\001 \001(\004\022\014\n\004port\030\002 \001(\005\022\031\n\021is_"
  "real_name_flag\030\003 \001(\010\022\n\n\002ip\030\004 \001(\t\022\026\n\016chec"
  "k_out_text\030\005 \001(\014\"+\n\tMSG_Test1\022\013\n\003id1\030\001 \001"
  "(\004\022\021\n\ttest1_str\030\002 \001(\t\"+\n\tMSG_Test2\022\013\n\003id"
  "2\030\001 \001(\004\022\021\n\ttest2_str\030\002 \001(\t\"+\n\tMSG_Test3\022"
  "\013\n\003id3\030\001 \001(\004\022\021\n\ttest3_str\030\002 \001(\t\"+\n\tMSG_T"
  "est4\022\013\n\003id4\030\001 \001(\004\022\021\n\ttest4_str\030\002 \001(\t\"+\n\t"
  "MSG_Test5\022\013\n\003id5\030\001 \001(\004\022\021\n\ttest5_str\030\002 \001("
  "\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_login_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_login_5fmsg_2eproto_sccs[8] = {
  &scc_info_MSG_LOGINSERVER_VALIDATE_login_5fmsg_2eproto.base,
  &scc_info_MSG_REQUEST_CLIENT_LOGIN_login_5fmsg_2eproto.base,
  &scc_info_MSG_RESPONSE_CLIENT_LOGIN_login_5fmsg_2eproto.base,
  &scc_info_MSG_Test1_login_5fmsg_2eproto.base,
  &scc_info_MSG_Test2_login_5fmsg_2eproto.base,
  &scc_info_MSG_Test3_login_5fmsg_2eproto.base,
  &scc_info_MSG_Test4_login_5fmsg_2eproto.base,
  &scc_info_MSG_Test5_login_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_login_5fmsg_2eproto_once;
static bool descriptor_table_login_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_5fmsg_2eproto = {
  &descriptor_table_login_5fmsg_2eproto_initialized, descriptor_table_protodef_login_5fmsg_2eproto, "login_msg.proto", 569,
  &descriptor_table_login_5fmsg_2eproto_once, descriptor_table_login_5fmsg_2eproto_sccs, descriptor_table_login_5fmsg_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_login_5fmsg_2eproto::offsets,
  file_level_metadata_login_5fmsg_2eproto, 8, file_level_enum_descriptors_login_5fmsg_2eproto, file_level_service_descriptors_login_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_login_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_login_5fmsg_2eproto), true);
namespace login_msg {

// ===================================================================

void MSG_REQUEST_CLIENT_LOGIN::InitAsDefaultInstance() {
}
class MSG_REQUEST_CLIENT_LOGIN::_Internal {
 public:
};

MSG_REQUEST_CLIENT_LOGIN::MSG_REQUEST_CLIENT_LOGIN()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_msg.MSG_REQUEST_CLIENT_LOGIN)
}
MSG_REQUEST_CLIENT_LOGIN::MSG_REQUEST_CLIENT_LOGIN(const MSG_REQUEST_CLIENT_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_key().empty()) {
    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:login_msg.MSG_REQUEST_CLIENT_LOGIN)
}

void MSG_REQUEST_CLIENT_LOGIN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_REQUEST_CLIENT_LOGIN_login_5fmsg_2eproto.base);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(version_));
}

MSG_REQUEST_CLIENT_LOGIN::~MSG_REQUEST_CLIENT_LOGIN() {
  // @@protoc_insertion_point(destructor:login_msg.MSG_REQUEST_CLIENT_LOGIN)
  SharedDtor();
}

void MSG_REQUEST_CLIENT_LOGIN::SharedDtor() {
  session_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_REQUEST_CLIENT_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_REQUEST_CLIENT_LOGIN& MSG_REQUEST_CLIENT_LOGIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_REQUEST_CLIENT_LOGIN_login_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_REQUEST_CLIENT_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.MSG_REQUEST_CLIENT_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

const char* MSG_REQUEST_CLIENT_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes session_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_REQUEST_CLIENT_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.MSG_REQUEST_CLIENT_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // bytes session_key = 3;
  if (this->session_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_session_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.MSG_REQUEST_CLIENT_LOGIN)
  return target;
}

size_t MSG_REQUEST_CLIENT_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.MSG_REQUEST_CLIENT_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes session_key = 3;
  if (this->session_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_session_key());
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_REQUEST_CLIENT_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login_msg.MSG_REQUEST_CLIENT_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_REQUEST_CLIENT_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_REQUEST_CLIENT_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login_msg.MSG_REQUEST_CLIENT_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login_msg.MSG_REQUEST_CLIENT_LOGIN)
    MergeFrom(*source);
  }
}

void MSG_REQUEST_CLIENT_LOGIN::MergeFrom(const MSG_REQUEST_CLIENT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login_msg.MSG_REQUEST_CLIENT_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_key().size() > 0) {

    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void MSG_REQUEST_CLIENT_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login_msg.MSG_REQUEST_CLIENT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_REQUEST_CLIENT_LOGIN::CopyFrom(const MSG_REQUEST_CLIENT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.MSG_REQUEST_CLIENT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_REQUEST_CLIENT_LOGIN::IsInitialized() const {
  return true;
}

void MSG_REQUEST_CLIENT_LOGIN::InternalSwap(MSG_REQUEST_CLIENT_LOGIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_key_.Swap(&other->session_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_REQUEST_CLIENT_LOGIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RESPONSE_CLIENT_LOGIN::InitAsDefaultInstance() {
}
class MSG_RESPONSE_CLIENT_LOGIN::_Internal {
 public:
};

MSG_RESPONSE_CLIENT_LOGIN::MSG_RESPONSE_CLIENT_LOGIN()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
}
MSG_RESPONSE_CLIENT_LOGIN::MSG_RESPONSE_CLIENT_LOGIN(const MSG_RESPONSE_CLIENT_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_newbie_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(is_newbie_));
  // @@protoc_insertion_point(copy_constructor:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
}

void MSG_RESPONSE_CLIENT_LOGIN::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_newbie_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(is_newbie_));
}

MSG_RESPONSE_CLIENT_LOGIN::~MSG_RESPONSE_CLIENT_LOGIN() {
  // @@protoc_insertion_point(destructor:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
  SharedDtor();
}

void MSG_RESPONSE_CLIENT_LOGIN::SharedDtor() {
}

void MSG_RESPONSE_CLIENT_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RESPONSE_CLIENT_LOGIN& MSG_RESPONSE_CLIENT_LOGIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RESPONSE_CLIENT_LOGIN_login_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RESPONSE_CLIENT_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_newbie_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(is_newbie_));
  _internal_metadata_.Clear();
}

const char* MSG_RESPONSE_CLIENT_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_newbie = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_newbie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RESPONSE_CLIENT_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status_code = 1;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status_code(), target);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // bool is_newbie = 4;
  if (this->is_newbie() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_newbie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
  return target;
}

size_t MSG_RESPONSE_CLIENT_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // int32 status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_code());
  }

  // int32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // bool is_newbie = 4;
  if (this->is_newbie() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RESPONSE_CLIENT_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RESPONSE_CLIENT_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RESPONSE_CLIENT_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
    MergeFrom(*source);
  }
}

void MSG_RESPONSE_CLIENT_LOGIN::MergeFrom(const MSG_RESPONSE_CLIENT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.is_newbie() != 0) {
    _internal_set_is_newbie(from._internal_is_newbie());
  }
}

void MSG_RESPONSE_CLIENT_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RESPONSE_CLIENT_LOGIN::CopyFrom(const MSG_RESPONSE_CLIENT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.MSG_RESPONSE_CLIENT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RESPONSE_CLIENT_LOGIN::IsInitialized() const {
  return true;
}

void MSG_RESPONSE_CLIENT_LOGIN::InternalSwap(MSG_RESPONSE_CLIENT_LOGIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(status_code_, other->status_code_);
  swap(version_, other->version_);
  swap(is_newbie_, other->is_newbie_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RESPONSE_CLIENT_LOGIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LOGINSERVER_VALIDATE::InitAsDefaultInstance() {
}
class MSG_LOGINSERVER_VALIDATE::_Internal {
 public:
};

MSG_LOGINSERVER_VALIDATE::MSG_LOGINSERVER_VALIDATE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_msg.MSG_LOGINSERVER_VALIDATE)
}
MSG_LOGINSERVER_VALIDATE::MSG_LOGINSERVER_VALIDATE(const MSG_LOGINSERVER_VALIDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  check_out_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_check_out_text().empty()) {
    check_out_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.check_out_text_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_real_name_flag_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(is_real_name_flag_));
  // @@protoc_insertion_point(copy_constructor:login_msg.MSG_LOGINSERVER_VALIDATE)
}

void MSG_LOGINSERVER_VALIDATE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_LOGINSERVER_VALIDATE_login_5fmsg_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  check_out_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_real_name_flag_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(is_real_name_flag_));
}

MSG_LOGINSERVER_VALIDATE::~MSG_LOGINSERVER_VALIDATE() {
  // @@protoc_insertion_point(destructor:login_msg.MSG_LOGINSERVER_VALIDATE)
  SharedDtor();
}

void MSG_LOGINSERVER_VALIDATE::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  check_out_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_LOGINSERVER_VALIDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LOGINSERVER_VALIDATE& MSG_LOGINSERVER_VALIDATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LOGINSERVER_VALIDATE_login_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_LOGINSERVER_VALIDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.MSG_LOGINSERVER_VALIDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  check_out_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_real_name_flag_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(is_real_name_flag_));
  _internal_metadata_.Clear();
}

const char* MSG_LOGINSERVER_VALIDATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_real_name_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_real_name_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "login_msg.MSG_LOGINSERVER_VALIDATE.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes check_out_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_check_out_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LOGINSERVER_VALIDATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.MSG_LOGINSERVER_VALIDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // bool is_real_name_flag = 3;
  if (this->is_real_name_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_real_name_flag(), target);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.MSG_LOGINSERVER_VALIDATE.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  // bytes check_out_text = 5;
  if (this->check_out_text().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_check_out_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.MSG_LOGINSERVER_VALIDATE)
  return target;
}

size_t MSG_LOGINSERVER_VALIDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.MSG_LOGINSERVER_VALIDATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // bytes check_out_text = 5;
  if (this->check_out_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_check_out_text());
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // bool is_real_name_flag = 3;
  if (this->is_real_name_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LOGINSERVER_VALIDATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login_msg.MSG_LOGINSERVER_VALIDATE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LOGINSERVER_VALIDATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LOGINSERVER_VALIDATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login_msg.MSG_LOGINSERVER_VALIDATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login_msg.MSG_LOGINSERVER_VALIDATE)
    MergeFrom(*source);
  }
}

void MSG_LOGINSERVER_VALIDATE::MergeFrom(const MSG_LOGINSERVER_VALIDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login_msg.MSG_LOGINSERVER_VALIDATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.check_out_text().size() > 0) {

    check_out_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.check_out_text_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.is_real_name_flag() != 0) {
    _internal_set_is_real_name_flag(from._internal_is_real_name_flag());
  }
}

void MSG_LOGINSERVER_VALIDATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login_msg.MSG_LOGINSERVER_VALIDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LOGINSERVER_VALIDATE::CopyFrom(const MSG_LOGINSERVER_VALIDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.MSG_LOGINSERVER_VALIDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LOGINSERVER_VALIDATE::IsInitialized() const {
  return true;
}

void MSG_LOGINSERVER_VALIDATE::InternalSwap(MSG_LOGINSERVER_VALIDATE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  check_out_text_.Swap(&other->check_out_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(port_, other->port_);
  swap(is_real_name_flag_, other->is_real_name_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LOGINSERVER_VALIDATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Test1::InitAsDefaultInstance() {
}
class MSG_Test1::_Internal {
 public:
};

MSG_Test1::MSG_Test1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_msg.MSG_Test1)
}
MSG_Test1::MSG_Test1(const MSG_Test1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  test1_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test1_str().empty()) {
    test1_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test1_str_);
  }
  id1_ = from.id1_;
  // @@protoc_insertion_point(copy_constructor:login_msg.MSG_Test1)
}

void MSG_Test1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Test1_login_5fmsg_2eproto.base);
  test1_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id1_ = PROTOBUF_ULONGLONG(0);
}

MSG_Test1::~MSG_Test1() {
  // @@protoc_insertion_point(destructor:login_msg.MSG_Test1)
  SharedDtor();
}

void MSG_Test1::SharedDtor() {
  test1_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Test1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Test1& MSG_Test1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Test1_login_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Test1::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.MSG_Test1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test1_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id1_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MSG_Test1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test1_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_test1_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "login_msg.MSG_Test1.test1_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Test1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.MSG_Test1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id1 = 1;
  if (this->id1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id1(), target);
  }

  // string test1_str = 2;
  if (this->test1_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test1_str().data(), static_cast<int>(this->_internal_test1_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.MSG_Test1.test1_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_test1_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.MSG_Test1)
  return target;
}

size_t MSG_Test1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.MSG_Test1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string test1_str = 2;
  if (this->test1_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test1_str());
  }

  // uint64 id1 = 1;
  if (this->id1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Test1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login_msg.MSG_Test1)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Test1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Test1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login_msg.MSG_Test1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login_msg.MSG_Test1)
    MergeFrom(*source);
  }
}

void MSG_Test1::MergeFrom(const MSG_Test1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login_msg.MSG_Test1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test1_str().size() > 0) {

    test1_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test1_str_);
  }
  if (from.id1() != 0) {
    _internal_set_id1(from._internal_id1());
  }
}

void MSG_Test1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login_msg.MSG_Test1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Test1::CopyFrom(const MSG_Test1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.MSG_Test1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Test1::IsInitialized() const {
  return true;
}

void MSG_Test1::InternalSwap(MSG_Test1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  test1_str_.Swap(&other->test1_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id1_, other->id1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Test1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Test2::InitAsDefaultInstance() {
}
class MSG_Test2::_Internal {
 public:
};

MSG_Test2::MSG_Test2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_msg.MSG_Test2)
}
MSG_Test2::MSG_Test2(const MSG_Test2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  test2_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test2_str().empty()) {
    test2_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test2_str_);
  }
  id2_ = from.id2_;
  // @@protoc_insertion_point(copy_constructor:login_msg.MSG_Test2)
}

void MSG_Test2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Test2_login_5fmsg_2eproto.base);
  test2_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id2_ = PROTOBUF_ULONGLONG(0);
}

MSG_Test2::~MSG_Test2() {
  // @@protoc_insertion_point(destructor:login_msg.MSG_Test2)
  SharedDtor();
}

void MSG_Test2::SharedDtor() {
  test2_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Test2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Test2& MSG_Test2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Test2_login_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Test2::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.MSG_Test2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test2_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id2_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MSG_Test2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test2_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_test2_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "login_msg.MSG_Test2.test2_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Test2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.MSG_Test2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id2 = 1;
  if (this->id2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id2(), target);
  }

  // string test2_str = 2;
  if (this->test2_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test2_str().data(), static_cast<int>(this->_internal_test2_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.MSG_Test2.test2_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_test2_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.MSG_Test2)
  return target;
}

size_t MSG_Test2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.MSG_Test2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string test2_str = 2;
  if (this->test2_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test2_str());
  }

  // uint64 id2 = 1;
  if (this->id2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Test2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login_msg.MSG_Test2)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Test2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Test2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login_msg.MSG_Test2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login_msg.MSG_Test2)
    MergeFrom(*source);
  }
}

void MSG_Test2::MergeFrom(const MSG_Test2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login_msg.MSG_Test2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test2_str().size() > 0) {

    test2_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test2_str_);
  }
  if (from.id2() != 0) {
    _internal_set_id2(from._internal_id2());
  }
}

void MSG_Test2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login_msg.MSG_Test2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Test2::CopyFrom(const MSG_Test2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.MSG_Test2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Test2::IsInitialized() const {
  return true;
}

void MSG_Test2::InternalSwap(MSG_Test2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  test2_str_.Swap(&other->test2_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id2_, other->id2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Test2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Test3::InitAsDefaultInstance() {
}
class MSG_Test3::_Internal {
 public:
};

MSG_Test3::MSG_Test3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_msg.MSG_Test3)
}
MSG_Test3::MSG_Test3(const MSG_Test3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  test3_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test3_str().empty()) {
    test3_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test3_str_);
  }
  id3_ = from.id3_;
  // @@protoc_insertion_point(copy_constructor:login_msg.MSG_Test3)
}

void MSG_Test3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Test3_login_5fmsg_2eproto.base);
  test3_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id3_ = PROTOBUF_ULONGLONG(0);
}

MSG_Test3::~MSG_Test3() {
  // @@protoc_insertion_point(destructor:login_msg.MSG_Test3)
  SharedDtor();
}

void MSG_Test3::SharedDtor() {
  test3_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Test3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Test3& MSG_Test3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Test3_login_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Test3::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.MSG_Test3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test3_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id3_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MSG_Test3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test3_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_test3_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "login_msg.MSG_Test3.test3_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Test3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.MSG_Test3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id3 = 1;
  if (this->id3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id3(), target);
  }

  // string test3_str = 2;
  if (this->test3_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test3_str().data(), static_cast<int>(this->_internal_test3_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.MSG_Test3.test3_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_test3_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.MSG_Test3)
  return target;
}

size_t MSG_Test3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.MSG_Test3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string test3_str = 2;
  if (this->test3_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test3_str());
  }

  // uint64 id3 = 1;
  if (this->id3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Test3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login_msg.MSG_Test3)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Test3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Test3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login_msg.MSG_Test3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login_msg.MSG_Test3)
    MergeFrom(*source);
  }
}

void MSG_Test3::MergeFrom(const MSG_Test3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login_msg.MSG_Test3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test3_str().size() > 0) {

    test3_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test3_str_);
  }
  if (from.id3() != 0) {
    _internal_set_id3(from._internal_id3());
  }
}

void MSG_Test3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login_msg.MSG_Test3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Test3::CopyFrom(const MSG_Test3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.MSG_Test3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Test3::IsInitialized() const {
  return true;
}

void MSG_Test3::InternalSwap(MSG_Test3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  test3_str_.Swap(&other->test3_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id3_, other->id3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Test3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Test4::InitAsDefaultInstance() {
}
class MSG_Test4::_Internal {
 public:
};

MSG_Test4::MSG_Test4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_msg.MSG_Test4)
}
MSG_Test4::MSG_Test4(const MSG_Test4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  test4_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test4_str().empty()) {
    test4_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test4_str_);
  }
  id4_ = from.id4_;
  // @@protoc_insertion_point(copy_constructor:login_msg.MSG_Test4)
}

void MSG_Test4::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Test4_login_5fmsg_2eproto.base);
  test4_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id4_ = PROTOBUF_ULONGLONG(0);
}

MSG_Test4::~MSG_Test4() {
  // @@protoc_insertion_point(destructor:login_msg.MSG_Test4)
  SharedDtor();
}

void MSG_Test4::SharedDtor() {
  test4_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Test4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Test4& MSG_Test4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Test4_login_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Test4::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.MSG_Test4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test4_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id4_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MSG_Test4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id4 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test4_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_test4_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "login_msg.MSG_Test4.test4_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Test4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.MSG_Test4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id4 = 1;
  if (this->id4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id4(), target);
  }

  // string test4_str = 2;
  if (this->test4_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test4_str().data(), static_cast<int>(this->_internal_test4_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.MSG_Test4.test4_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_test4_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.MSG_Test4)
  return target;
}

size_t MSG_Test4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.MSG_Test4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string test4_str = 2;
  if (this->test4_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test4_str());
  }

  // uint64 id4 = 1;
  if (this->id4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Test4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login_msg.MSG_Test4)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Test4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Test4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login_msg.MSG_Test4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login_msg.MSG_Test4)
    MergeFrom(*source);
  }
}

void MSG_Test4::MergeFrom(const MSG_Test4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login_msg.MSG_Test4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test4_str().size() > 0) {

    test4_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test4_str_);
  }
  if (from.id4() != 0) {
    _internal_set_id4(from._internal_id4());
  }
}

void MSG_Test4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login_msg.MSG_Test4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Test4::CopyFrom(const MSG_Test4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.MSG_Test4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Test4::IsInitialized() const {
  return true;
}

void MSG_Test4::InternalSwap(MSG_Test4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  test4_str_.Swap(&other->test4_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id4_, other->id4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Test4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Test5::InitAsDefaultInstance() {
}
class MSG_Test5::_Internal {
 public:
};

MSG_Test5::MSG_Test5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login_msg.MSG_Test5)
}
MSG_Test5::MSG_Test5(const MSG_Test5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  test5_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test5_str().empty()) {
    test5_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test5_str_);
  }
  id5_ = from.id5_;
  // @@protoc_insertion_point(copy_constructor:login_msg.MSG_Test5)
}

void MSG_Test5::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Test5_login_5fmsg_2eproto.base);
  test5_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id5_ = PROTOBUF_ULONGLONG(0);
}

MSG_Test5::~MSG_Test5() {
  // @@protoc_insertion_point(destructor:login_msg.MSG_Test5)
  SharedDtor();
}

void MSG_Test5::SharedDtor() {
  test5_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Test5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Test5& MSG_Test5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Test5_login_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Test5::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.MSG_Test5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test5_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id5_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MSG_Test5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test5_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_test5_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "login_msg.MSG_Test5.test5_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Test5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.MSG_Test5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id5 = 1;
  if (this->id5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id5(), target);
  }

  // string test5_str = 2;
  if (this->test5_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test5_str().data(), static_cast<int>(this->_internal_test5_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.MSG_Test5.test5_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_test5_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.MSG_Test5)
  return target;
}

size_t MSG_Test5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.MSG_Test5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string test5_str = 2;
  if (this->test5_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test5_str());
  }

  // uint64 id5 = 1;
  if (this->id5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id5());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Test5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login_msg.MSG_Test5)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Test5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Test5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login_msg.MSG_Test5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login_msg.MSG_Test5)
    MergeFrom(*source);
  }
}

void MSG_Test5::MergeFrom(const MSG_Test5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login_msg.MSG_Test5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test5_str().size() > 0) {

    test5_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test5_str_);
  }
  if (from.id5() != 0) {
    _internal_set_id5(from._internal_id5());
  }
}

void MSG_Test5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login_msg.MSG_Test5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Test5::CopyFrom(const MSG_Test5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.MSG_Test5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Test5::IsInitialized() const {
  return true;
}

void MSG_Test5::InternalSwap(MSG_Test5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  test5_str_.Swap(&other->test5_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id5_, other->id5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Test5::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace login_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::login_msg::MSG_REQUEST_CLIENT_LOGIN* Arena::CreateMaybeMessage< ::login_msg::MSG_REQUEST_CLIENT_LOGIN >(Arena* arena) {
  return Arena::CreateInternal< ::login_msg::MSG_REQUEST_CLIENT_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::MSG_RESPONSE_CLIENT_LOGIN* Arena::CreateMaybeMessage< ::login_msg::MSG_RESPONSE_CLIENT_LOGIN >(Arena* arena) {
  return Arena::CreateInternal< ::login_msg::MSG_RESPONSE_CLIENT_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::MSG_LOGINSERVER_VALIDATE* Arena::CreateMaybeMessage< ::login_msg::MSG_LOGINSERVER_VALIDATE >(Arena* arena) {
  return Arena::CreateInternal< ::login_msg::MSG_LOGINSERVER_VALIDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::MSG_Test1* Arena::CreateMaybeMessage< ::login_msg::MSG_Test1 >(Arena* arena) {
  return Arena::CreateInternal< ::login_msg::MSG_Test1 >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::MSG_Test2* Arena::CreateMaybeMessage< ::login_msg::MSG_Test2 >(Arena* arena) {
  return Arena::CreateInternal< ::login_msg::MSG_Test2 >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::MSG_Test3* Arena::CreateMaybeMessage< ::login_msg::MSG_Test3 >(Arena* arena) {
  return Arena::CreateInternal< ::login_msg::MSG_Test3 >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::MSG_Test4* Arena::CreateMaybeMessage< ::login_msg::MSG_Test4 >(Arena* arena) {
  return Arena::CreateInternal< ::login_msg::MSG_Test4 >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::MSG_Test5* Arena::CreateMaybeMessage< ::login_msg::MSG_Test5 >(Arena* arena) {
  return Arena::CreateInternal< ::login_msg::MSG_Test5 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
