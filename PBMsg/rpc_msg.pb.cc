// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_msg.proto

#include "rpc_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHANNEL_rpc_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleIdentifier_rpc_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STATUS_rpc_5fmsg_2eproto;
namespace rpc_msg {
class CHANNELDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHANNEL> _instance;
} _CHANNEL_default_instance_;
class CONTROLLERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CONTROLLER> _instance;
} _CONTROLLER_default_instance_;
class RoleIdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleIdentifier> _instance;
} _RoleIdentifier_default_instance_;
class CLIENT_IDENTIFIERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLIENT_IDENTIFIER> _instance;
} _CLIENT_IDENTIFIER_default_instance_;
class SERVER_IDENTIFIERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SERVER_IDENTIFIER> _instance;
} _SERVER_IDENTIFIER_default_instance_;
class RPC_REQUESTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC_REQUEST> _instance;
} _RPC_REQUEST_default_instance_;
class STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STATUS> _instance;
} _STATUS_default_instance_;
class RPC_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC_RESPONSE> _instance;
} _RPC_RESPONSE_default_instance_;
class PRC_Multiplexer_Forward_ArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PRC_Multiplexer_Forward_Args> _instance;
} _PRC_Multiplexer_Forward_Args_default_instance_;
class PRC_DeMultiplexer_Forward_ArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PRC_DeMultiplexer_Forward_Args> _instance;
} _PRC_DeMultiplexer_Forward_Args_default_instance_;
}  // namespace rpc_msg
static void InitDefaultsscc_info_CHANNEL_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_CHANNEL_default_instance_;
    new (ptr) ::rpc_msg::CHANNEL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::CHANNEL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHANNEL_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHANNEL_rpc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_CLIENT_IDENTIFIER_default_instance_;
    new (ptr) ::rpc_msg::CLIENT_IDENTIFIER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::CLIENT_IDENTIFIER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto}, {
      &scc_info_CHANNEL_rpc_5fmsg_2eproto.base,
      &scc_info_RoleIdentifier_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_CONTROLLER_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_CONTROLLER_default_instance_;
    new (ptr) ::rpc_msg::CONTROLLER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::CONTROLLER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CONTROLLER_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CONTROLLER_rpc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_PRC_DeMultiplexer_Forward_Args_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_PRC_DeMultiplexer_Forward_Args_default_instance_;
    new (ptr) ::rpc_msg::PRC_DeMultiplexer_Forward_Args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::PRC_DeMultiplexer_Forward_Args::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PRC_DeMultiplexer_Forward_Args_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PRC_DeMultiplexer_Forward_Args_rpc_5fmsg_2eproto}, {
      &scc_info_RoleIdentifier_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_PRC_Multiplexer_Forward_Args_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_PRC_Multiplexer_Forward_Args_default_instance_;
    new (ptr) ::rpc_msg::PRC_Multiplexer_Forward_Args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::PRC_Multiplexer_Forward_Args::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PRC_Multiplexer_Forward_Args_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PRC_Multiplexer_Forward_Args_rpc_5fmsg_2eproto}, {
      &scc_info_RoleIdentifier_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_RPC_REQUEST_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_RPC_REQUEST_default_instance_;
    new (ptr) ::rpc_msg::RPC_REQUEST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::RPC_REQUEST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RPC_REQUEST_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RPC_REQUEST_rpc_5fmsg_2eproto}, {
      &scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto.base,
      &scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_RPC_RESPONSE_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_RPC_RESPONSE_default_instance_;
    new (ptr) ::rpc_msg::RPC_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::RPC_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RPC_RESPONSE_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RPC_RESPONSE_rpc_5fmsg_2eproto}, {
      &scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto.base,
      &scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto.base,
      &scc_info_STATUS_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_RoleIdentifier_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_RoleIdentifier_default_instance_;
    new (ptr) ::rpc_msg::RoleIdentifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::RoleIdentifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleIdentifier_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleIdentifier_rpc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_SERVER_IDENTIFIER_default_instance_;
    new (ptr) ::rpc_msg::SERVER_IDENTIFIER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::SERVER_IDENTIFIER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto}, {
      &scc_info_CHANNEL_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_STATUS_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_STATUS_default_instance_;
    new (ptr) ::rpc_msg::STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STATUS_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STATUS_rpc_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_5fmsg_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rpc_5fmsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpc_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, type_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, serial_num_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, server_stream_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, seq_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, user_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, gw_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, channel_serial_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, stub_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, seq_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, required_reply_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, router_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, channel_serial_num_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, role_identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::SERVER_IDENTIFIER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::SERVER_IDENTIFIER, stub_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, client_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, server_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, opcodes_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, args_data_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, server_stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, code_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, msg_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, has_more_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, client_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, server_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, status_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, result_data_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, has_more_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_Multiplexer_Forward_Args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_Multiplexer_Forward_Args, role_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_Multiplexer_Forward_Args, opcodes_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_Multiplexer_Forward_Args, body_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward_Args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward_Args, role_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward_Args, opcodes_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward_Args, body_msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rpc_msg::CHANNEL)},
  { 7, -1, sizeof(::rpc_msg::CONTROLLER)},
  { 16, -1, sizeof(::rpc_msg::RoleIdentifier)},
  { 24, -1, sizeof(::rpc_msg::CLIENT_IDENTIFIER)},
  { 35, -1, sizeof(::rpc_msg::SERVER_IDENTIFIER)},
  { 41, -1, sizeof(::rpc_msg::RPC_REQUEST)},
  { 51, -1, sizeof(::rpc_msg::STATUS)},
  { 60, -1, sizeof(::rpc_msg::RPC_RESPONSE)},
  { 71, -1, sizeof(::rpc_msg::PRC_Multiplexer_Forward_Args)},
  { 79, -1, sizeof(::rpc_msg::PRC_DeMultiplexer_Forward_Args)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_CHANNEL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_CONTROLLER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_RoleIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_CLIENT_IDENTIFIER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_SERVER_IDENTIFIER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_RPC_REQUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_RPC_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_PRC_Multiplexer_Forward_Args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_PRC_DeMultiplexer_Forward_Args_default_instance_),
};

const char descriptor_table_protodef_rpc_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rrpc_msg.proto\022\007rpc_msg\"#\n\007CHANNEL\022\014\n\004t"
  "ype\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\"[\n\nCONTROLLER\022\022\n\ns"
  "erial_num\030\001 \001(\004\022\022\n\ntimeout_ms\030\002 \001(\004\022\025\n\rs"
  "erver_stream\030\003 \001(\010\022\016\n\006seq_id\030\004 \001(\004\"L\n\016Ro"
  "leIdentifier\022\017\n\007user_id\030\001 \001(\004\022\r\n\005gw_id\030\002"
  " \001(\r\022\032\n\022channel_serial_num\030\003 \001(\004\"\313\001\n\021CLI"
  "ENT_IDENTIFIER\022\036\n\004stub\030\001 \001(\0132\020.rpc_msg.C"
  "HANNEL\022\016\n\006seq_id\030\002 \001(\004\022\026\n\016required_reply"
  "\030\003 \001(\010\022 \n\006router\030\004 \001(\0132\020.rpc_msg.CHANNEL"
  "\022\032\n\022channel_serial_num\030\005 \001(\004\0220\n\017role_ide"
  "ntifier\030\006 \001(\0132\027.rpc_msg.RoleIdentifier\"3"
  "\n\021SERVER_IDENTIFIER\022\036\n\004stub\030\001 \001(\0132\020.rpc_"
  "msg.CHANNEL\"\266\001\n\013RPC_REQUEST\022*\n\006client\030\001 "
  "\001(\0132\032.rpc_msg.CLIENT_IDENTIFIER\022*\n\006serve"
  "r\030\002 \001(\0132\032.rpc_msg.SERVER_IDENTIFIER\022%\n\007o"
  "pcodes\030\003 \001(\0162\024.rpc_msg.RPC_OPCODES\022\021\n\tar"
  "gs_data\030\004 \001(\014\022\025\n\rserver_stream\030\005 \001(\010\"E\n\006"
  "STATUS\022\014\n\004code\030\001 \001(\r\022\013\n\003msg\030\002 \001(\t\022\020\n\010has"
  "_more\030\003 \001(\010\022\016\n\006offset\030\004 \001(\r\"\276\001\n\014RPC_RESP"
  "ONSE\022*\n\006client\030\001 \001(\0132\032.rpc_msg.CLIENT_ID"
  "ENTIFIER\022*\n\006server\030\002 \001(\0132\032.rpc_msg.SERVE"
  "R_IDENTIFIER\022\037\n\006status\030\003 \001(\0132\017.rpc_msg.S"
  "TATUS\022\023\n\013result_data\030\004 \001(\014\022\020\n\010has_more\030\005"
  " \001(\010\022\016\n\006offset\030\006 \001(\r\"k\n\034PRC_Multiplexer_"
  "Forward_Args\022(\n\007role_id\030\001 \001(\0132\027.rpc_msg."
  "RoleIdentifier\022\017\n\007opcodes\030\002 \001(\r\022\020\n\010body_"
  "msg\030\003 \001(\014\"m\n\036PRC_DeMultiplexer_Forward_A"
  "rgs\022(\n\007role_id\030\001 \001(\0132\027.rpc_msg.RoleIdent"
  "ifier\022\017\n\007opcodes\030\002 \001(\r\022\020\n\010body_msg\030\003 \001(\014"
  "*\377\001\n\013RPC_OPCODES\022\014\n\010RPC_None\020\000\022\033\n\027RPC_Mu"
  "ltiplexer_Forward\020\001\022\035\n\031RPC_DeMultiplexer"
  "_Forward\020\002\022\027\n\022RPC_MysqlDescTable\020\221\003\022\023\n\016R"
  "PC_MysqlQuery\020\222\003\022\024\n\017RPC_MysqlInsert\020\223\003\022\024"
  "\n\017RPC_MysqlUpdate\020\224\003\022\024\n\017RPC_MysqlDelete\020"
  "\225\003\022\033\n\026RPC_MysqlQueryByFilter\020\226\003\022\031\n\024RPC_L"
  "2G_LoginPending\020\351\007*\355\002\n\010RPC_CODE\022\013\n\007CODE_"
  "Ok\020\000\022\021\n\rCODE_Ok_Async\020\001\022\020\n\014CODE_Timeout\020"
  "d\022\023\n\017CODE_Unregister\020e\022\023\n\017CODE_ParseErro"
  "r\020f\022\030\n\024CODE_ErrorServerPost\020g\022\035\n\031CODE_Ro"
  "uteNotLinkToServer\020h\022\037\n\033CODE_RouteSendTo"
  "ServerError\020i\022\031\n\025CODE_OpcodeUnregister\020j"
  "\022\027\n\023CODE_CreateMsgError\020k\022\030\n\024CODE_LogicT"
  "hreadNull\020l\022\031\n\025CODE_NotReceivedReply\020m\022\020"
  "\n\014CODE_NotSend\020n\022\030\n\024CODE_LoadFromDbError"
  "\020o\022\026\n\022CODE_DirtyFlagZero\020pb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpc_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpc_5fmsg_2eproto_sccs[10] = {
  &scc_info_CHANNEL_rpc_5fmsg_2eproto.base,
  &scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto.base,
  &scc_info_CONTROLLER_rpc_5fmsg_2eproto.base,
  &scc_info_PRC_DeMultiplexer_Forward_Args_rpc_5fmsg_2eproto.base,
  &scc_info_PRC_Multiplexer_Forward_Args_rpc_5fmsg_2eproto.base,
  &scc_info_RPC_REQUEST_rpc_5fmsg_2eproto.base,
  &scc_info_RPC_RESPONSE_rpc_5fmsg_2eproto.base,
  &scc_info_RoleIdentifier_rpc_5fmsg_2eproto.base,
  &scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto.base,
  &scc_info_STATUS_rpc_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_5fmsg_2eproto_once;
static bool descriptor_table_rpc_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fmsg_2eproto = {
  &descriptor_table_rpc_5fmsg_2eproto_initialized, descriptor_table_protodef_rpc_5fmsg_2eproto, "rpc_msg.proto", 1794,
  &descriptor_table_rpc_5fmsg_2eproto_once, descriptor_table_rpc_5fmsg_2eproto_sccs, descriptor_table_rpc_5fmsg_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_rpc_5fmsg_2eproto::offsets,
  file_level_metadata_rpc_5fmsg_2eproto, 10, file_level_enum_descriptors_rpc_5fmsg_2eproto, file_level_service_descriptors_rpc_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpc_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpc_5fmsg_2eproto), true);
namespace rpc_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPC_OPCODES_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmsg_2eproto);
  return file_level_enum_descriptors_rpc_5fmsg_2eproto[0];
}
bool RPC_OPCODES_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 1001:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPC_CODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmsg_2eproto);
  return file_level_enum_descriptors_rpc_5fmsg_2eproto[1];
}
bool RPC_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CHANNEL::InitAsDefaultInstance() {
}
class CHANNEL::_Internal {
 public:
};

CHANNEL::CHANNEL()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.CHANNEL)
}
CHANNEL::CHANNEL(const CHANNEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.CHANNEL)
}

void CHANNEL::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
}

CHANNEL::~CHANNEL() {
  // @@protoc_insertion_point(destructor:rpc_msg.CHANNEL)
  SharedDtor();
}

void CHANNEL::SharedDtor() {
}

void CHANNEL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHANNEL& CHANNEL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHANNEL_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CHANNEL::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.CHANNEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* CHANNEL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHANNEL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.CHANNEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.CHANNEL)
  return target;
}

size_t CHANNEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.CHANNEL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHANNEL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.CHANNEL)
  GOOGLE_DCHECK_NE(&from, this);
  const CHANNEL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHANNEL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.CHANNEL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.CHANNEL)
    MergeFrom(*source);
  }
}

void CHANNEL::MergeFrom(const CHANNEL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.CHANNEL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CHANNEL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.CHANNEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHANNEL::CopyFrom(const CHANNEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.CHANNEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHANNEL::IsInitialized() const {
  return true;
}

void CHANNEL::InternalSwap(CHANNEL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHANNEL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CONTROLLER::InitAsDefaultInstance() {
}
class CONTROLLER::_Internal {
 public:
};

CONTROLLER::CONTROLLER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.CONTROLLER)
}
CONTROLLER::CONTROLLER(const CONTROLLER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serial_num_, &from.serial_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_stream_) -
    reinterpret_cast<char*>(&serial_num_)) + sizeof(server_stream_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.CONTROLLER)
}

void CONTROLLER::SharedCtor() {
  ::memset(&serial_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_stream_) -
      reinterpret_cast<char*>(&serial_num_)) + sizeof(server_stream_));
}

CONTROLLER::~CONTROLLER() {
  // @@protoc_insertion_point(destructor:rpc_msg.CONTROLLER)
  SharedDtor();
}

void CONTROLLER::SharedDtor() {
}

void CONTROLLER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CONTROLLER& CONTROLLER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CONTROLLER_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CONTROLLER::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.CONTROLLER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&serial_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_stream_) -
      reinterpret_cast<char*>(&serial_num_)) + sizeof(server_stream_));
  _internal_metadata_.Clear();
}

const char* CONTROLLER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 serial_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timeout_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool server_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CONTROLLER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.CONTROLLER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 serial_num = 1;
  if (this->serial_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_serial_num(), target);
  }

  // uint64 timeout_ms = 2;
  if (this->timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timeout_ms(), target);
  }

  // bool server_stream = 3;
  if (this->server_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_server_stream(), target);
  }

  // uint64 seq_id = 4;
  if (this->seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_seq_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.CONTROLLER)
  return target;
}

size_t CONTROLLER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.CONTROLLER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 serial_num = 1;
  if (this->serial_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_serial_num());
  }

  // uint64 timeout_ms = 2;
  if (this->timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timeout_ms());
  }

  // uint64 seq_id = 4;
  if (this->seq_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_id());
  }

  // bool server_stream = 3;
  if (this->server_stream() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CONTROLLER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.CONTROLLER)
  GOOGLE_DCHECK_NE(&from, this);
  const CONTROLLER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CONTROLLER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.CONTROLLER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.CONTROLLER)
    MergeFrom(*source);
  }
}

void CONTROLLER::MergeFrom(const CONTROLLER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.CONTROLLER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial_num() != 0) {
    _internal_set_serial_num(from._internal_serial_num());
  }
  if (from.timeout_ms() != 0) {
    _internal_set_timeout_ms(from._internal_timeout_ms());
  }
  if (from.seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  if (from.server_stream() != 0) {
    _internal_set_server_stream(from._internal_server_stream());
  }
}

void CONTROLLER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.CONTROLLER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CONTROLLER::CopyFrom(const CONTROLLER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.CONTROLLER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CONTROLLER::IsInitialized() const {
  return true;
}

void CONTROLLER::InternalSwap(CONTROLLER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(serial_num_, other->serial_num_);
  swap(timeout_ms_, other->timeout_ms_);
  swap(seq_id_, other->seq_id_);
  swap(server_stream_, other->server_stream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CONTROLLER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleIdentifier::InitAsDefaultInstance() {
}
class RoleIdentifier::_Internal {
 public:
};

RoleIdentifier::RoleIdentifier()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.RoleIdentifier)
}
RoleIdentifier::RoleIdentifier(const RoleIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gw_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(gw_id_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RoleIdentifier)
}

void RoleIdentifier::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gw_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(gw_id_));
}

RoleIdentifier::~RoleIdentifier() {
  // @@protoc_insertion_point(destructor:rpc_msg.RoleIdentifier)
  SharedDtor();
}

void RoleIdentifier::SharedDtor() {
}

void RoleIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleIdentifier& RoleIdentifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleIdentifier_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RoleIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RoleIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gw_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(gw_id_));
  _internal_metadata_.Clear();
}

const char* RoleIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gw_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gw_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_serial_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          channel_serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RoleIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 gw_id = 2;
  if (this->gw_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gw_id(), target);
  }

  // uint64 channel_serial_num = 3;
  if (this->channel_serial_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_channel_serial_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RoleIdentifier)
  return target;
}

size_t RoleIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RoleIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 channel_serial_num = 3;
  if (this->channel_serial_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_serial_num());
  }

  // uint32 gw_id = 2;
  if (this->gw_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gw_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleIdentifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.RoleIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleIdentifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.RoleIdentifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.RoleIdentifier)
    MergeFrom(*source);
  }
}

void RoleIdentifier::MergeFrom(const RoleIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RoleIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_serial_num() != 0) {
    _internal_set_channel_serial_num(from._internal_channel_serial_num());
  }
  if (from.gw_id() != 0) {
    _internal_set_gw_id(from._internal_gw_id());
  }
}

void RoleIdentifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.RoleIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleIdentifier::CopyFrom(const RoleIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RoleIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleIdentifier::IsInitialized() const {
  return true;
}

void RoleIdentifier::InternalSwap(RoleIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(channel_serial_num_, other->channel_serial_num_);
  swap(gw_id_, other->gw_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleIdentifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLIENT_IDENTIFIER::InitAsDefaultInstance() {
  ::rpc_msg::_CLIENT_IDENTIFIER_default_instance_._instance.get_mutable()->stub_ = const_cast< ::rpc_msg::CHANNEL*>(
      ::rpc_msg::CHANNEL::internal_default_instance());
  ::rpc_msg::_CLIENT_IDENTIFIER_default_instance_._instance.get_mutable()->router_ = const_cast< ::rpc_msg::CHANNEL*>(
      ::rpc_msg::CHANNEL::internal_default_instance());
  ::rpc_msg::_CLIENT_IDENTIFIER_default_instance_._instance.get_mutable()->role_identifier_ = const_cast< ::rpc_msg::RoleIdentifier*>(
      ::rpc_msg::RoleIdentifier::internal_default_instance());
}
class CLIENT_IDENTIFIER::_Internal {
 public:
  static const ::rpc_msg::CHANNEL& stub(const CLIENT_IDENTIFIER* msg);
  static const ::rpc_msg::CHANNEL& router(const CLIENT_IDENTIFIER* msg);
  static const ::rpc_msg::RoleIdentifier& role_identifier(const CLIENT_IDENTIFIER* msg);
};

const ::rpc_msg::CHANNEL&
CLIENT_IDENTIFIER::_Internal::stub(const CLIENT_IDENTIFIER* msg) {
  return *msg->stub_;
}
const ::rpc_msg::CHANNEL&
CLIENT_IDENTIFIER::_Internal::router(const CLIENT_IDENTIFIER* msg) {
  return *msg->router_;
}
const ::rpc_msg::RoleIdentifier&
CLIENT_IDENTIFIER::_Internal::role_identifier(const CLIENT_IDENTIFIER* msg) {
  return *msg->role_identifier_;
}
CLIENT_IDENTIFIER::CLIENT_IDENTIFIER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.CLIENT_IDENTIFIER)
}
CLIENT_IDENTIFIER::CLIENT_IDENTIFIER(const CLIENT_IDENTIFIER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stub()) {
    stub_ = new ::rpc_msg::CHANNEL(*from.stub_);
  } else {
    stub_ = nullptr;
  }
  if (from._internal_has_router()) {
    router_ = new ::rpc_msg::CHANNEL(*from.router_);
  } else {
    router_ = nullptr;
  }
  if (from._internal_has_role_identifier()) {
    role_identifier_ = new ::rpc_msg::RoleIdentifier(*from.role_identifier_);
  } else {
    role_identifier_ = nullptr;
  }
  ::memcpy(&seq_id_, &from.seq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&required_reply_) -
    reinterpret_cast<char*>(&seq_id_)) + sizeof(required_reply_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.CLIENT_IDENTIFIER)
}

void CLIENT_IDENTIFIER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto.base);
  ::memset(&stub_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_reply_) -
      reinterpret_cast<char*>(&stub_)) + sizeof(required_reply_));
}

CLIENT_IDENTIFIER::~CLIENT_IDENTIFIER() {
  // @@protoc_insertion_point(destructor:rpc_msg.CLIENT_IDENTIFIER)
  SharedDtor();
}

void CLIENT_IDENTIFIER::SharedDtor() {
  if (this != internal_default_instance()) delete stub_;
  if (this != internal_default_instance()) delete router_;
  if (this != internal_default_instance()) delete role_identifier_;
}

void CLIENT_IDENTIFIER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLIENT_IDENTIFIER& CLIENT_IDENTIFIER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CLIENT_IDENTIFIER::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.CLIENT_IDENTIFIER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stub_ != nullptr) {
    delete stub_;
  }
  stub_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && role_identifier_ != nullptr) {
    delete role_identifier_;
  }
  role_identifier_ = nullptr;
  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_reply_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(required_reply_));
  _internal_metadata_.Clear();
}

const char* CLIENT_IDENTIFIER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.CHANNEL stub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool required_reply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          required_reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.CHANNEL router = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_serial_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          channel_serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.RoleIdentifier role_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLIENT_IDENTIFIER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.CLIENT_IDENTIFIER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->has_stub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stub(this), target, stream);
  }

  // uint64 seq_id = 2;
  if (this->seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seq_id(), target);
  }

  // bool required_reply = 3;
  if (this->required_reply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_required_reply(), target);
  }

  // .rpc_msg.CHANNEL router = 4;
  if (this->has_router()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::router(this), target, stream);
  }

  // uint64 channel_serial_num = 5;
  if (this->channel_serial_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_channel_serial_num(), target);
  }

  // .rpc_msg.RoleIdentifier role_identifier = 6;
  if (this->has_role_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::role_identifier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.CLIENT_IDENTIFIER)
  return target;
}

size_t CLIENT_IDENTIFIER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.CLIENT_IDENTIFIER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->has_stub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stub_);
  }

  // .rpc_msg.CHANNEL router = 4;
  if (this->has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router_);
  }

  // .rpc_msg.RoleIdentifier role_identifier = 6;
  if (this->has_role_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_identifier_);
  }

  // uint64 seq_id = 2;
  if (this->seq_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_id());
  }

  // uint64 channel_serial_num = 5;
  if (this->channel_serial_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_serial_num());
  }

  // bool required_reply = 3;
  if (this->required_reply() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLIENT_IDENTIFIER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.CLIENT_IDENTIFIER)
  GOOGLE_DCHECK_NE(&from, this);
  const CLIENT_IDENTIFIER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLIENT_IDENTIFIER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.CLIENT_IDENTIFIER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.CLIENT_IDENTIFIER)
    MergeFrom(*source);
  }
}

void CLIENT_IDENTIFIER::MergeFrom(const CLIENT_IDENTIFIER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.CLIENT_IDENTIFIER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stub()) {
    _internal_mutable_stub()->::rpc_msg::CHANNEL::MergeFrom(from._internal_stub());
  }
  if (from.has_router()) {
    _internal_mutable_router()->::rpc_msg::CHANNEL::MergeFrom(from._internal_router());
  }
  if (from.has_role_identifier()) {
    _internal_mutable_role_identifier()->::rpc_msg::RoleIdentifier::MergeFrom(from._internal_role_identifier());
  }
  if (from.seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  if (from.channel_serial_num() != 0) {
    _internal_set_channel_serial_num(from._internal_channel_serial_num());
  }
  if (from.required_reply() != 0) {
    _internal_set_required_reply(from._internal_required_reply());
  }
}

void CLIENT_IDENTIFIER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.CLIENT_IDENTIFIER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLIENT_IDENTIFIER::CopyFrom(const CLIENT_IDENTIFIER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.CLIENT_IDENTIFIER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLIENT_IDENTIFIER::IsInitialized() const {
  return true;
}

void CLIENT_IDENTIFIER::InternalSwap(CLIENT_IDENTIFIER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stub_, other->stub_);
  swap(router_, other->router_);
  swap(role_identifier_, other->role_identifier_);
  swap(seq_id_, other->seq_id_);
  swap(channel_serial_num_, other->channel_serial_num_);
  swap(required_reply_, other->required_reply_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLIENT_IDENTIFIER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SERVER_IDENTIFIER::InitAsDefaultInstance() {
  ::rpc_msg::_SERVER_IDENTIFIER_default_instance_._instance.get_mutable()->stub_ = const_cast< ::rpc_msg::CHANNEL*>(
      ::rpc_msg::CHANNEL::internal_default_instance());
}
class SERVER_IDENTIFIER::_Internal {
 public:
  static const ::rpc_msg::CHANNEL& stub(const SERVER_IDENTIFIER* msg);
};

const ::rpc_msg::CHANNEL&
SERVER_IDENTIFIER::_Internal::stub(const SERVER_IDENTIFIER* msg) {
  return *msg->stub_;
}
SERVER_IDENTIFIER::SERVER_IDENTIFIER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.SERVER_IDENTIFIER)
}
SERVER_IDENTIFIER::SERVER_IDENTIFIER(const SERVER_IDENTIFIER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stub()) {
    stub_ = new ::rpc_msg::CHANNEL(*from.stub_);
  } else {
    stub_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rpc_msg.SERVER_IDENTIFIER)
}

void SERVER_IDENTIFIER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto.base);
  stub_ = nullptr;
}

SERVER_IDENTIFIER::~SERVER_IDENTIFIER() {
  // @@protoc_insertion_point(destructor:rpc_msg.SERVER_IDENTIFIER)
  SharedDtor();
}

void SERVER_IDENTIFIER::SharedDtor() {
  if (this != internal_default_instance()) delete stub_;
}

void SERVER_IDENTIFIER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SERVER_IDENTIFIER& SERVER_IDENTIFIER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void SERVER_IDENTIFIER::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.SERVER_IDENTIFIER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stub_ != nullptr) {
    delete stub_;
  }
  stub_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SERVER_IDENTIFIER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.CHANNEL stub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SERVER_IDENTIFIER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.SERVER_IDENTIFIER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->has_stub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stub(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.SERVER_IDENTIFIER)
  return target;
}

size_t SERVER_IDENTIFIER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.SERVER_IDENTIFIER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->has_stub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stub_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SERVER_IDENTIFIER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.SERVER_IDENTIFIER)
  GOOGLE_DCHECK_NE(&from, this);
  const SERVER_IDENTIFIER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SERVER_IDENTIFIER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.SERVER_IDENTIFIER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.SERVER_IDENTIFIER)
    MergeFrom(*source);
  }
}

void SERVER_IDENTIFIER::MergeFrom(const SERVER_IDENTIFIER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.SERVER_IDENTIFIER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stub()) {
    _internal_mutable_stub()->::rpc_msg::CHANNEL::MergeFrom(from._internal_stub());
  }
}

void SERVER_IDENTIFIER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.SERVER_IDENTIFIER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SERVER_IDENTIFIER::CopyFrom(const SERVER_IDENTIFIER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.SERVER_IDENTIFIER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SERVER_IDENTIFIER::IsInitialized() const {
  return true;
}

void SERVER_IDENTIFIER::InternalSwap(SERVER_IDENTIFIER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stub_, other->stub_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SERVER_IDENTIFIER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPC_REQUEST::InitAsDefaultInstance() {
  ::rpc_msg::_RPC_REQUEST_default_instance_._instance.get_mutable()->client_ = const_cast< ::rpc_msg::CLIENT_IDENTIFIER*>(
      ::rpc_msg::CLIENT_IDENTIFIER::internal_default_instance());
  ::rpc_msg::_RPC_REQUEST_default_instance_._instance.get_mutable()->server_ = const_cast< ::rpc_msg::SERVER_IDENTIFIER*>(
      ::rpc_msg::SERVER_IDENTIFIER::internal_default_instance());
}
class RPC_REQUEST::_Internal {
 public:
  static const ::rpc_msg::CLIENT_IDENTIFIER& client(const RPC_REQUEST* msg);
  static const ::rpc_msg::SERVER_IDENTIFIER& server(const RPC_REQUEST* msg);
};

const ::rpc_msg::CLIENT_IDENTIFIER&
RPC_REQUEST::_Internal::client(const RPC_REQUEST* msg) {
  return *msg->client_;
}
const ::rpc_msg::SERVER_IDENTIFIER&
RPC_REQUEST::_Internal::server(const RPC_REQUEST* msg) {
  return *msg->server_;
}
RPC_REQUEST::RPC_REQUEST()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.RPC_REQUEST)
}
RPC_REQUEST::RPC_REQUEST(const RPC_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  args_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args_data().empty()) {
    args_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.args_data_);
  }
  if (from._internal_has_client()) {
    client_ = new ::rpc_msg::CLIENT_IDENTIFIER(*from.client_);
  } else {
    client_ = nullptr;
  }
  if (from._internal_has_server()) {
    server_ = new ::rpc_msg::SERVER_IDENTIFIER(*from.server_);
  } else {
    server_ = nullptr;
  }
  ::memcpy(&opcodes_, &from.opcodes_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_stream_) -
    reinterpret_cast<char*>(&opcodes_)) + sizeof(server_stream_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RPC_REQUEST)
}

void RPC_REQUEST::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPC_REQUEST_rpc_5fmsg_2eproto.base);
  args_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_stream_) -
      reinterpret_cast<char*>(&client_)) + sizeof(server_stream_));
}

RPC_REQUEST::~RPC_REQUEST() {
  // @@protoc_insertion_point(destructor:rpc_msg.RPC_REQUEST)
  SharedDtor();
}

void RPC_REQUEST::SharedDtor() {
  args_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_;
  if (this != internal_default_instance()) delete server_;
}

void RPC_REQUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC_REQUEST& RPC_REQUEST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_REQUEST_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RPC_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RPC_REQUEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  ::memset(&opcodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_stream_) -
      reinterpret_cast<char*>(&opcodes_)) + sizeof(server_stream_));
  _internal_metadata_.Clear();
}

const char* RPC_REQUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.CLIENT_IDENTIFIER client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.SERVER_IDENTIFIER server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.RPC_OPCODES opcodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_opcodes(static_cast<::rpc_msg::RPC_OPCODES>(val));
        } else goto handle_unusual;
        continue;
      // bytes args_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_args_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool server_stream = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC_REQUEST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RPC_REQUEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::client(this), target, stream);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server(this), target, stream);
  }

  // .rpc_msg.RPC_OPCODES opcodes = 3;
  if (this->opcodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_opcodes(), target);
  }

  // bytes args_data = 4;
  if (this->args_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_args_data(), target);
  }

  // bool server_stream = 5;
  if (this->server_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_server_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RPC_REQUEST)
  return target;
}

size_t RPC_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RPC_REQUEST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes args_data = 4;
  if (this->args_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args_data());
  }

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  // .rpc_msg.RPC_OPCODES opcodes = 3;
  if (this->opcodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_opcodes());
  }

  // bool server_stream = 5;
  if (this->server_stream() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC_REQUEST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.RPC_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC_REQUEST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC_REQUEST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.RPC_REQUEST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.RPC_REQUEST)
    MergeFrom(*source);
  }
}

void RPC_REQUEST::MergeFrom(const RPC_REQUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RPC_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.args_data().size() > 0) {

    args_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.args_data_);
  }
  if (from.has_client()) {
    _internal_mutable_client()->::rpc_msg::CLIENT_IDENTIFIER::MergeFrom(from._internal_client());
  }
  if (from.has_server()) {
    _internal_mutable_server()->::rpc_msg::SERVER_IDENTIFIER::MergeFrom(from._internal_server());
  }
  if (from.opcodes() != 0) {
    _internal_set_opcodes(from._internal_opcodes());
  }
  if (from.server_stream() != 0) {
    _internal_set_server_stream(from._internal_server_stream());
  }
}

void RPC_REQUEST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.RPC_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC_REQUEST::CopyFrom(const RPC_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RPC_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_REQUEST::IsInitialized() const {
  return true;
}

void RPC_REQUEST::InternalSwap(RPC_REQUEST* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  args_data_.Swap(&other->args_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_, other->client_);
  swap(server_, other->server_);
  swap(opcodes_, other->opcodes_);
  swap(server_stream_, other->server_stream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_REQUEST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STATUS::InitAsDefaultInstance() {
}
class STATUS::_Internal {
 public:
};

STATUS::STATUS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.STATUS)
}
STATUS::STATUS(const STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&code_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.STATUS)
}

void STATUS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_STATUS_rpc_5fmsg_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&code_)) + sizeof(offset_));
}

STATUS::~STATUS() {
  // @@protoc_insertion_point(destructor:rpc_msg.STATUS)
  SharedDtor();
}

void STATUS::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STATUS& STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STATUS_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&code_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc_msg.STATUS.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_more = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc_msg.STATUS.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // bool has_more = 3;
  if (this->has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_more(), target);
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.STATUS)
  return target;
}

size_t STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  // bool has_more = 3;
  if (this->has_more() != 0) {
    total_size += 1 + 1;
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.STATUS)
    MergeFrom(*source);
  }
}

void STATUS::MergeFrom(const STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.has_more() != 0) {
    _internal_set_has_more(from._internal_has_more());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STATUS::CopyFrom(const STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STATUS::IsInitialized() const {
  return true;
}

void STATUS::InternalSwap(STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(has_more_, other->has_more_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPC_RESPONSE::InitAsDefaultInstance() {
  ::rpc_msg::_RPC_RESPONSE_default_instance_._instance.get_mutable()->client_ = const_cast< ::rpc_msg::CLIENT_IDENTIFIER*>(
      ::rpc_msg::CLIENT_IDENTIFIER::internal_default_instance());
  ::rpc_msg::_RPC_RESPONSE_default_instance_._instance.get_mutable()->server_ = const_cast< ::rpc_msg::SERVER_IDENTIFIER*>(
      ::rpc_msg::SERVER_IDENTIFIER::internal_default_instance());
  ::rpc_msg::_RPC_RESPONSE_default_instance_._instance.get_mutable()->status_ = const_cast< ::rpc_msg::STATUS*>(
      ::rpc_msg::STATUS::internal_default_instance());
}
class RPC_RESPONSE::_Internal {
 public:
  static const ::rpc_msg::CLIENT_IDENTIFIER& client(const RPC_RESPONSE* msg);
  static const ::rpc_msg::SERVER_IDENTIFIER& server(const RPC_RESPONSE* msg);
  static const ::rpc_msg::STATUS& status(const RPC_RESPONSE* msg);
};

const ::rpc_msg::CLIENT_IDENTIFIER&
RPC_RESPONSE::_Internal::client(const RPC_RESPONSE* msg) {
  return *msg->client_;
}
const ::rpc_msg::SERVER_IDENTIFIER&
RPC_RESPONSE::_Internal::server(const RPC_RESPONSE* msg) {
  return *msg->server_;
}
const ::rpc_msg::STATUS&
RPC_RESPONSE::_Internal::status(const RPC_RESPONSE* msg) {
  return *msg->status_;
}
RPC_RESPONSE::RPC_RESPONSE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.RPC_RESPONSE)
}
RPC_RESPONSE::RPC_RESPONSE(const RPC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_data().empty()) {
    result_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_data_);
  }
  if (from._internal_has_client()) {
    client_ = new ::rpc_msg::CLIENT_IDENTIFIER(*from.client_);
  } else {
    client_ = nullptr;
  }
  if (from._internal_has_server()) {
    server_ = new ::rpc_msg::SERVER_IDENTIFIER(*from.server_);
  } else {
    server_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::rpc_msg::STATUS(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&has_more_, &from.has_more_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&has_more_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RPC_RESPONSE)
}

void RPC_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPC_RESPONSE_rpc_5fmsg_2eproto.base);
  result_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&client_)) + sizeof(offset_));
}

RPC_RESPONSE::~RPC_RESPONSE() {
  // @@protoc_insertion_point(destructor:rpc_msg.RPC_RESPONSE)
  SharedDtor();
}

void RPC_RESPONSE::SharedDtor() {
  result_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_;
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete status_;
}

void RPC_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC_RESPONSE& RPC_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_RESPONSE_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RPC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RPC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&has_more_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&has_more_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* RPC_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.CLIENT_IDENTIFIER client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.SERVER_IDENTIFIER server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.STATUS status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes result_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_result_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_more = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RPC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::client(this), target, stream);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server(this), target, stream);
  }

  // .rpc_msg.STATUS status = 3;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  // bytes result_data = 4;
  if (this->result_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_result_data(), target);
  }

  // bool has_more = 5;
  if (this->has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_has_more(), target);
  }

  // uint32 offset = 6;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RPC_RESPONSE)
  return target;
}

size_t RPC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RPC_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result_data = 4;
  if (this->result_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result_data());
  }

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  // .rpc_msg.STATUS status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool has_more = 5;
  if (this->has_more() != 0) {
    total_size += 1 + 1;
  }

  // uint32 offset = 6;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.RPC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.RPC_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.RPC_RESPONSE)
    MergeFrom(*source);
  }
}

void RPC_RESPONSE::MergeFrom(const RPC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RPC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_data().size() > 0) {

    result_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_data_);
  }
  if (from.has_client()) {
    _internal_mutable_client()->::rpc_msg::CLIENT_IDENTIFIER::MergeFrom(from._internal_client());
  }
  if (from.has_server()) {
    _internal_mutable_server()->::rpc_msg::SERVER_IDENTIFIER::MergeFrom(from._internal_server());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::rpc_msg::STATUS::MergeFrom(from._internal_status());
  }
  if (from.has_more() != 0) {
    _internal_set_has_more(from._internal_has_more());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void RPC_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.RPC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC_RESPONSE::CopyFrom(const RPC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RPC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_RESPONSE::IsInitialized() const {
  return true;
}

void RPC_RESPONSE::InternalSwap(RPC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_data_.Swap(&other->result_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_, other->client_);
  swap(server_, other->server_);
  swap(status_, other->status_);
  swap(has_more_, other->has_more_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PRC_Multiplexer_Forward_Args::InitAsDefaultInstance() {
  ::rpc_msg::_PRC_Multiplexer_Forward_Args_default_instance_._instance.get_mutable()->role_id_ = const_cast< ::rpc_msg::RoleIdentifier*>(
      ::rpc_msg::RoleIdentifier::internal_default_instance());
}
class PRC_Multiplexer_Forward_Args::_Internal {
 public:
  static const ::rpc_msg::RoleIdentifier& role_id(const PRC_Multiplexer_Forward_Args* msg);
};

const ::rpc_msg::RoleIdentifier&
PRC_Multiplexer_Forward_Args::_Internal::role_id(const PRC_Multiplexer_Forward_Args* msg) {
  return *msg->role_id_;
}
PRC_Multiplexer_Forward_Args::PRC_Multiplexer_Forward_Args()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.PRC_Multiplexer_Forward_Args)
}
PRC_Multiplexer_Forward_Args::PRC_Multiplexer_Forward_Args(const PRC_Multiplexer_Forward_Args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body_msg().empty()) {
    body_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_msg_);
  }
  if (from._internal_has_role_id()) {
    role_id_ = new ::rpc_msg::RoleIdentifier(*from.role_id_);
  } else {
    role_id_ = nullptr;
  }
  opcodes_ = from.opcodes_;
  // @@protoc_insertion_point(copy_constructor:rpc_msg.PRC_Multiplexer_Forward_Args)
}

void PRC_Multiplexer_Forward_Args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PRC_Multiplexer_Forward_Args_rpc_5fmsg_2eproto.base);
  body_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opcodes_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(opcodes_));
}

PRC_Multiplexer_Forward_Args::~PRC_Multiplexer_Forward_Args() {
  // @@protoc_insertion_point(destructor:rpc_msg.PRC_Multiplexer_Forward_Args)
  SharedDtor();
}

void PRC_Multiplexer_Forward_Args::SharedDtor() {
  body_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_id_;
}

void PRC_Multiplexer_Forward_Args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PRC_Multiplexer_Forward_Args& PRC_Multiplexer_Forward_Args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PRC_Multiplexer_Forward_Args_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void PRC_Multiplexer_Forward_Args::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.PRC_Multiplexer_Forward_Args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && role_id_ != nullptr) {
    delete role_id_;
  }
  role_id_ = nullptr;
  opcodes_ = 0u;
  _internal_metadata_.Clear();
}

const char* PRC_Multiplexer_Forward_Args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.RoleIdentifier role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 opcodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          opcodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes body_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_body_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PRC_Multiplexer_Forward_Args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.PRC_Multiplexer_Forward_Args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.RoleIdentifier role_id = 1;
  if (this->has_role_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role_id(this), target, stream);
  }

  // uint32 opcodes = 2;
  if (this->opcodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_opcodes(), target);
  }

  // bytes body_msg = 3;
  if (this->body_msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.PRC_Multiplexer_Forward_Args)
  return target;
}

size_t PRC_Multiplexer_Forward_Args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.PRC_Multiplexer_Forward_Args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body_msg = 3;
  if (this->body_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body_msg());
  }

  // .rpc_msg.RoleIdentifier role_id = 1;
  if (this->has_role_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_id_);
  }

  // uint32 opcodes = 2;
  if (this->opcodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opcodes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PRC_Multiplexer_Forward_Args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.PRC_Multiplexer_Forward_Args)
  GOOGLE_DCHECK_NE(&from, this);
  const PRC_Multiplexer_Forward_Args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PRC_Multiplexer_Forward_Args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.PRC_Multiplexer_Forward_Args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.PRC_Multiplexer_Forward_Args)
    MergeFrom(*source);
  }
}

void PRC_Multiplexer_Forward_Args::MergeFrom(const PRC_Multiplexer_Forward_Args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.PRC_Multiplexer_Forward_Args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body_msg().size() > 0) {

    body_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_msg_);
  }
  if (from.has_role_id()) {
    _internal_mutable_role_id()->::rpc_msg::RoleIdentifier::MergeFrom(from._internal_role_id());
  }
  if (from.opcodes() != 0) {
    _internal_set_opcodes(from._internal_opcodes());
  }
}

void PRC_Multiplexer_Forward_Args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.PRC_Multiplexer_Forward_Args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRC_Multiplexer_Forward_Args::CopyFrom(const PRC_Multiplexer_Forward_Args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.PRC_Multiplexer_Forward_Args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRC_Multiplexer_Forward_Args::IsInitialized() const {
  return true;
}

void PRC_Multiplexer_Forward_Args::InternalSwap(PRC_Multiplexer_Forward_Args* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  body_msg_.Swap(&other->body_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(role_id_, other->role_id_);
  swap(opcodes_, other->opcodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PRC_Multiplexer_Forward_Args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PRC_DeMultiplexer_Forward_Args::InitAsDefaultInstance() {
  ::rpc_msg::_PRC_DeMultiplexer_Forward_Args_default_instance_._instance.get_mutable()->role_id_ = const_cast< ::rpc_msg::RoleIdentifier*>(
      ::rpc_msg::RoleIdentifier::internal_default_instance());
}
class PRC_DeMultiplexer_Forward_Args::_Internal {
 public:
  static const ::rpc_msg::RoleIdentifier& role_id(const PRC_DeMultiplexer_Forward_Args* msg);
};

const ::rpc_msg::RoleIdentifier&
PRC_DeMultiplexer_Forward_Args::_Internal::role_id(const PRC_DeMultiplexer_Forward_Args* msg) {
  return *msg->role_id_;
}
PRC_DeMultiplexer_Forward_Args::PRC_DeMultiplexer_Forward_Args()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.PRC_DeMultiplexer_Forward_Args)
}
PRC_DeMultiplexer_Forward_Args::PRC_DeMultiplexer_Forward_Args(const PRC_DeMultiplexer_Forward_Args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body_msg().empty()) {
    body_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_msg_);
  }
  if (from._internal_has_role_id()) {
    role_id_ = new ::rpc_msg::RoleIdentifier(*from.role_id_);
  } else {
    role_id_ = nullptr;
  }
  opcodes_ = from.opcodes_;
  // @@protoc_insertion_point(copy_constructor:rpc_msg.PRC_DeMultiplexer_Forward_Args)
}

void PRC_DeMultiplexer_Forward_Args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PRC_DeMultiplexer_Forward_Args_rpc_5fmsg_2eproto.base);
  body_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opcodes_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(opcodes_));
}

PRC_DeMultiplexer_Forward_Args::~PRC_DeMultiplexer_Forward_Args() {
  // @@protoc_insertion_point(destructor:rpc_msg.PRC_DeMultiplexer_Forward_Args)
  SharedDtor();
}

void PRC_DeMultiplexer_Forward_Args::SharedDtor() {
  body_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_id_;
}

void PRC_DeMultiplexer_Forward_Args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PRC_DeMultiplexer_Forward_Args& PRC_DeMultiplexer_Forward_Args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PRC_DeMultiplexer_Forward_Args_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void PRC_DeMultiplexer_Forward_Args::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.PRC_DeMultiplexer_Forward_Args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && role_id_ != nullptr) {
    delete role_id_;
  }
  role_id_ = nullptr;
  opcodes_ = 0u;
  _internal_metadata_.Clear();
}

const char* PRC_DeMultiplexer_Forward_Args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.RoleIdentifier role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 opcodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          opcodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes body_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_body_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PRC_DeMultiplexer_Forward_Args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.PRC_DeMultiplexer_Forward_Args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.RoleIdentifier role_id = 1;
  if (this->has_role_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role_id(this), target, stream);
  }

  // uint32 opcodes = 2;
  if (this->opcodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_opcodes(), target);
  }

  // bytes body_msg = 3;
  if (this->body_msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.PRC_DeMultiplexer_Forward_Args)
  return target;
}

size_t PRC_DeMultiplexer_Forward_Args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.PRC_DeMultiplexer_Forward_Args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body_msg = 3;
  if (this->body_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body_msg());
  }

  // .rpc_msg.RoleIdentifier role_id = 1;
  if (this->has_role_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_id_);
  }

  // uint32 opcodes = 2;
  if (this->opcodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opcodes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PRC_DeMultiplexer_Forward_Args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.PRC_DeMultiplexer_Forward_Args)
  GOOGLE_DCHECK_NE(&from, this);
  const PRC_DeMultiplexer_Forward_Args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PRC_DeMultiplexer_Forward_Args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.PRC_DeMultiplexer_Forward_Args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.PRC_DeMultiplexer_Forward_Args)
    MergeFrom(*source);
  }
}

void PRC_DeMultiplexer_Forward_Args::MergeFrom(const PRC_DeMultiplexer_Forward_Args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.PRC_DeMultiplexer_Forward_Args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body_msg().size() > 0) {

    body_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_msg_);
  }
  if (from.has_role_id()) {
    _internal_mutable_role_id()->::rpc_msg::RoleIdentifier::MergeFrom(from._internal_role_id());
  }
  if (from.opcodes() != 0) {
    _internal_set_opcodes(from._internal_opcodes());
  }
}

void PRC_DeMultiplexer_Forward_Args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.PRC_DeMultiplexer_Forward_Args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRC_DeMultiplexer_Forward_Args::CopyFrom(const PRC_DeMultiplexer_Forward_Args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.PRC_DeMultiplexer_Forward_Args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRC_DeMultiplexer_Forward_Args::IsInitialized() const {
  return true;
}

void PRC_DeMultiplexer_Forward_Args::InternalSwap(PRC_DeMultiplexer_Forward_Args* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  body_msg_.Swap(&other->body_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(role_id_, other->role_id_);
  swap(opcodes_, other->opcodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PRC_DeMultiplexer_Forward_Args::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpc_msg::CHANNEL* Arena::CreateMaybeMessage< ::rpc_msg::CHANNEL >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::CHANNEL >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::CONTROLLER* Arena::CreateMaybeMessage< ::rpc_msg::CONTROLLER >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::CONTROLLER >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RoleIdentifier* Arena::CreateMaybeMessage< ::rpc_msg::RoleIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::RoleIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::CLIENT_IDENTIFIER* Arena::CreateMaybeMessage< ::rpc_msg::CLIENT_IDENTIFIER >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::CLIENT_IDENTIFIER >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::SERVER_IDENTIFIER* Arena::CreateMaybeMessage< ::rpc_msg::SERVER_IDENTIFIER >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::SERVER_IDENTIFIER >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RPC_REQUEST* Arena::CreateMaybeMessage< ::rpc_msg::RPC_REQUEST >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::RPC_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::STATUS* Arena::CreateMaybeMessage< ::rpc_msg::STATUS >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RPC_RESPONSE* Arena::CreateMaybeMessage< ::rpc_msg::RPC_RESPONSE >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::RPC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::PRC_Multiplexer_Forward_Args* Arena::CreateMaybeMessage< ::rpc_msg::PRC_Multiplexer_Forward_Args >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::PRC_Multiplexer_Forward_Args >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::PRC_DeMultiplexer_Forward_Args* Arena::CreateMaybeMessage< ::rpc_msg::PRC_DeMultiplexer_Forward_Args >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::PRC_DeMultiplexer_Forward_Args >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
